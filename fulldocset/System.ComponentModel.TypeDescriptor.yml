### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.TypeDescriptor
  id: TypeDescriptor
  children:
  - System.ComponentModel.TypeDescriptor.AddAttributes(System.Object,System.Attribute[])
  - System.ComponentModel.TypeDescriptor.AddAttributes(System.Type,System.Attribute[])
  - System.ComponentModel.TypeDescriptor.AddEditorTable(System.Type,System.Collections.Hashtable)
  - System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)
  - System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)
  - System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)
  - System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)
  - System.ComponentModel.TypeDescriptor.ComNativeDescriptorHandler
  - System.ComponentModel.TypeDescriptor.ComObjectType
  - System.ComponentModel.TypeDescriptor.CreateAssociation(System.Object,System.Object)
  - System.ComponentModel.TypeDescriptor.CreateDesigner(System.ComponentModel.IComponent,System.Type)
  - System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.ComponentModel.EventDescriptor,System.Attribute[])
  - System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.String,System.Type,System.Attribute[])
  - System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
  - System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.ComponentModel.PropertyDescriptor,System.Attribute[])
  - System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.String,System.Type,System.Attribute[])
  - System.ComponentModel.TypeDescriptor.GetAssociation(System.Type,System.Object)
  - System.ComponentModel.TypeDescriptor.GetAttributes(System.Object)
  - System.ComponentModel.TypeDescriptor.GetAttributes(System.Type)
  - System.ComponentModel.TypeDescriptor.GetAttributes(System.Object,System.Boolean)
  - System.ComponentModel.TypeDescriptor.GetClassName(System.Object)
  - System.ComponentModel.TypeDescriptor.GetClassName(System.Type)
  - System.ComponentModel.TypeDescriptor.GetClassName(System.Object,System.Boolean)
  - System.ComponentModel.TypeDescriptor.GetComponentName(System.Object)
  - System.ComponentModel.TypeDescriptor.GetComponentName(System.Object,System.Boolean)
  - System.ComponentModel.TypeDescriptor.GetConverter(System.Object)
  - System.ComponentModel.TypeDescriptor.GetConverter(System.Type)
  - System.ComponentModel.TypeDescriptor.GetConverter(System.Object,System.Boolean)
  - System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object)
  - System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Type)
  - System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object,System.Boolean)
  - System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object)
  - System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Type)
  - System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object,System.Boolean)
  - System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type)
  - System.ComponentModel.TypeDescriptor.GetEditor(System.Type,System.Type)
  - System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type,System.Boolean)
  - System.ComponentModel.TypeDescriptor.GetEvents(System.Object)
  - System.ComponentModel.TypeDescriptor.GetEvents(System.Type)
  - System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[])
  - System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Boolean)
  - System.ComponentModel.TypeDescriptor.GetEvents(System.Type,System.Attribute[])
  - System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[],System.Boolean)
  - System.ComponentModel.TypeDescriptor.GetFullComponentName(System.Object)
  - System.ComponentModel.TypeDescriptor.GetProperties(System.Object)
  - System.ComponentModel.TypeDescriptor.GetProperties(System.Type)
  - System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[])
  - System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Boolean)
  - System.ComponentModel.TypeDescriptor.GetProperties(System.Type,System.Attribute[])
  - System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[],System.Boolean)
  - System.ComponentModel.TypeDescriptor.GetProvider(System.Object)
  - System.ComponentModel.TypeDescriptor.GetProvider(System.Type)
  - System.ComponentModel.TypeDescriptor.GetReflectionType(System.Object)
  - System.ComponentModel.TypeDescriptor.GetReflectionType(System.Type)
  - System.ComponentModel.TypeDescriptor.InterfaceType
  - System.ComponentModel.TypeDescriptor.Refresh(System.Object)
  - System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Assembly)
  - System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Module)
  - System.ComponentModel.TypeDescriptor.Refresh(System.Type)
  - System.ComponentModel.TypeDescriptor.Refreshed
  - System.ComponentModel.TypeDescriptor.RemoveAssociation(System.Object,System.Object)
  - System.ComponentModel.TypeDescriptor.RemoveAssociations(System.Object)
  - System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)
  - System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)
  - System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)
  - System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)
  - System.ComponentModel.TypeDescriptor.SortDescriptorArray(System.Collections.IList)
  langs:
  - csharp
  name: TypeDescriptor
  nameWithType: TypeDescriptor
  fullName: System.ComponentModel.TypeDescriptor
  type: Class
  summary: "Fornece informações sobre as características de um componente, por exemplo, os respetivos atributos, propriedades e os eventos. Esta classe não pode ser herdada."
  remarks: "O .NET Framework fornece duas formas de aceder aos metadados num tipo: a reflexão API fornecida no <xref:System.Reflection?displayProperty=fullName>espaço de nomes e a classe TypeDescriptor.</xref:System.Reflection?displayProperty=fullName> Reflexão é um mecanismo geral disponível para todos os tipos de porque o respetivo foundation é estabelecida no <xref:System.Object.GetType%2A>método da raiz de <xref:System.Object>classe.</xref:System.Object> </xref:System.Object.GetType%2A> As informações que devolva para um tipo não são extensíveis, em que não podem ser modificada após compilação do tipo de destino. Para obter mais informações, consulte os tópicos [reflexão](~/add/includes/ajax-current-ext-md.md).       Em contrapartida, TypeDescriptor é um mecanismo de inspeção extensível para componentes: as classes que implementa o <xref:System.ComponentModel.IComponent>interface.</xref:System.ComponentModel.IComponent> Ao contrário de reflexão,-Inspecione não para métodos. TypeDescriptor pode ser expandido dinamicamente por vários serviços disponíveis através do componente de destino <xref:System.ComponentModel.Component.Site%2A>.</xref:System.ComponentModel.Component.Site%2A> A tabela seguinte mostra esses serviços.      | Nome do serviço | Descrição |   |------------------|-----------------|   | <xref:System.ComponentModel.IExtenderProvider>| Permite que outra classe, como <xref:System.Windows.Forms.ToolTip>, forneça as propriedades adicionais para um componente. |   | <xref:System.ComponentModel.Design.ITypeDescriptorFilterService>| Permite que outro objecto para modificar os metadados padrão que é exposto por um componente. |   | <xref:System.ComponentModel.ICustomTypeDescriptor>| Permite que uma classe para completamente e dinamicamente especificar os suas próprias metadados, substituindo o mecanismo de inspeção de padrão de TypeDescriptor. |       A extensibilidade fornecida pelo TypeDescriptor permite a representação de tempo de criação de um componente a ser diferente da respetiva representação real de tempo de execução, que torna TypeDescriptor útil ao criar a infraestrutura do momento da concepção.</xref:System.ComponentModel.ICustomTypeDescriptor> </xref:System.ComponentModel.Design.ITypeDescriptorFilterService> </xref:System.Windows.Forms.ToolTip> </xref:System.ComponentModel.IExtenderProvider>       Todos os métodos de TypeDescriptor são `static`. Não é possível criar uma instância desta classe e esta classe não pode ser herdada.       Pode definir a propriedade e eventos valores duas formas diferentes: Especifica a classe de componentes ou alterá-los no momento da concepção. Porque pode definir estas duas formas de valores, os métodos sobrecarregados de TypeDescriptor efetuar dois tipos diferentes de parâmetros: um tipo de classe ou uma instância de objeto.       Quando pretende aceder às informações de TypeDescriptor e tiver uma instância do objeto, utilize o método que chama para um componente. Utilize o método que chama para o tipo de classe apenas quando não tiver uma instância do objeto.       Propriedades e os eventos são colocadas em cache por TypeDescriptor para velocidade. Normalmente, são constantes para a duração de um objeto. No entanto, os fornecedores de extensão e designers podem alterar o conjunto de propriedades de um objeto. Se for este o caso, o <xref:System.ComponentModel.TypeDescriptor.Refresh%2A>método tem de ser chamado para atualizar a cache.</xref:System.ComponentModel.TypeDescriptor.Refresh%2A>"
  syntax:
    content: public sealed class TypeDescriptor
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.AddAttributes(System.Object,System.Attribute[])
  id: AddAttributes(System.Object,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: AddAttributes(Object,Attribute[])
  nameWithType: TypeDescriptor.AddAttributes(Object,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.AddAttributes(Object,Attribute[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Adiciona os atributos de nível de classe para a instância do componente de destino."
  remarks: "O método AddAttributes adiciona os atributos de nível de classe para a instância especificada de um componente. Porque se trata de um requisito comuns das aplicações a utilizar o [!INCLUDE[vsprvs](~/add/includes/vsprvs-md.md)] janela estruturador de formulários do Windows e as propriedades, este método proporciona um atalho através da criação de um fornecedor de descrições de tipo intercala os atributos fornecidos com os atributos que já existem na classe. O valor de retorno é o fornecedor de descrição de tipo que foi utilizado para adicionar os atributos. Este fornecedor posterior pode ser transmitido para o <xref:System.ComponentModel.TypeDescriptor.RemoveProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29>método quando os atributos adicionados já não são necessárias.</xref:System.ComponentModel.TypeDescriptor.RemoveProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29>"
  syntax:
    content: public static System.ComponentModel.TypeDescriptionProvider AddAttributes (object instance, Attribute[] attributes);
    parameters:
    - id: instance
      type: System.Object
      description: "Uma instância do componente de destino."
    - id: attributes
      type: System.Attribute[]
      description: "Uma matriz de <xref:System.Attribute>objetos a adicionar a classe de. o componente</xref:System.Attribute>"
    return:
      type: System.ComponentModel.TypeDescriptionProvider
      description: "Criado recentemente <xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;> </xref> que foi utilizada para adicionar os atributos especificados."
  overload: System.ComponentModel.TypeDescriptor.AddAttributes*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Um ou ambos os parâmetros se <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.AddAttributes(System.Type,System.Attribute[])
  id: AddAttributes(System.Type,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: AddAttributes(Type,Attribute[])
  nameWithType: TypeDescriptor.AddAttributes(Type,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.AddAttributes(Type,Attribute[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Adiciona os atributos de nível de classe para o tipo de componente de destino."
  remarks: "O método AddAttributes adiciona os atributos de nível de classe para o tipo especificado de um componente. Porque se trata de um requisito comuns das aplicações a utilizar o [!INCLUDE[vsprvs](~/add/includes/vsprvs-md.md)] janela estruturador de formulários do Windows e as propriedades, este método proporciona um atalho através da criação de um fornecedor de descrições de tipo intercala os atributos fornecidos com os atributos que já existem na classe. O valor de retorno é o fornecedor de descrição de tipo que foi utilizado para adicionar os atributos. Este fornecedor posterior pode ser transmitido para o <xref:System.ComponentModel.TypeDescriptor.RemoveProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>método quando os atributos adicionados já não são necessárias.</xref:System.ComponentModel.TypeDescriptor.RemoveProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>"
  syntax:
    content: public static System.ComponentModel.TypeDescriptionProvider AddAttributes (Type type, Attribute[] attributes);
    parameters:
    - id: type
      type: System.Type
      description: "O <xref:System.Type>do componente de destino.</xref:System.Type>"
    - id: attributes
      type: System.Attribute[]
      description: "Uma matriz de <xref:System.Attribute>objetos a adicionar a classe de. o componente</xref:System.Attribute>"
    return:
      type: System.ComponentModel.TypeDescriptionProvider
      description: "Criado recentemente <xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;> </xref> que foi utilizada para adicionar os atributos especificados."
  overload: System.ComponentModel.TypeDescriptor.AddAttributes*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Um ou ambos os parâmetros se <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.AddEditorTable(System.Type,System.Collections.Hashtable)
  id: AddEditorTable(System.Type,System.Collections.Hashtable)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: AddEditorTable(Type,Hashtable)
  nameWithType: TypeDescriptor.AddEditorTable(Type,Hashtable)
  fullName: System.ComponentModel.TypeDescriptor.AddEditorTable(Type,Hashtable)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Adiciona uma tabela do editor para o tipo de base do editor especificado."
  remarks: "O método AddEditorTable adiciona uma tabela do editor para o tipo de base do editor especificado. Normalmente, os editores são especificadas como metadados de um componente. No entanto, se não existem metadados para um editor de pedido base tipo pode ser encontrado o componente, associado <xref:System.ComponentModel.TypeDescriptor>irá procurar uma tabela do editor para o tipo de editor, se um pode ser encontrado.</xref:System.ComponentModel.TypeDescriptor> Depois de uma tabela de editor foi adicionada ao descritor de tipo, não é possível remover e proprietário é o descritor de tipo. O descritor de tipo livremente poderá fazer alterações a esta tabela.       O formato para uma tabela de editor utiliza tipos de dados como as chaves e editores como valores. A parte do valor de uma entrada na tabela representa uma instância de editor. Pode ter um dos três valores. Se este contiver uma cadeia, o descritor de tipo assumirá que este é um nome completamente qualificado de um tipo e, em seguida, o tipo de carga para o objeto. Se este contiver um tipo, será criada uma instância deste tipo para obter um editor. Por fim, a parte do valor pode conter uma instância de editor real. Se o descritor de tipo resolve editor para uma instância, armazenará a instância de volta para a tabela para utilização futura."
  syntax:
    content: public static void AddEditorTable (Type editorBaseType, System.Collections.Hashtable table);
    parameters:
    - id: editorBaseType
      type: System.Type
      description: "O tipo base editor para adicionar a tabela de editor para. Se já existe uma tabela para este tipo, este método não fará nada."
    - id: table
      type: System.Collections.Hashtable
      description: "The <xref href=&quot;System.Collections.Hashtable&quot;></xref> to add."
  overload: System.ComponentModel.TypeDescriptor.AddEditorTable*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)
  id: AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: AddProvider(TypeDescriptionProvider,Object)
  nameWithType: TypeDescriptor.AddProvider(TypeDescriptionProvider,Object)
  fullName: System.ComponentModel.TypeDescriptor.AddProvider(TypeDescriptionProvider,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Adiciona um fornecedor de descrições de tipo para uma única instância de um componente."
  remarks: "O método AddProvider adiciona um fornecedor de descrições de tipo fontes de tipo de informações para uma única instância de um componente. Se um fornecedor é adicionado por este método, o fornecedor <xref:System.ComponentModel.TypeDescriptor.CreateInstance%2A>método não será chamado porque a instância já existe.</xref:System.ComponentModel.TypeDescriptor.CreateInstance%2A>       Este método não mantém uma referência de disco rígida para o componente, pelo que não impede que o componente a finalizar o.       É possível adicionar vários fornecedores de descrição de tipo para o mesmo tipo ou objecto. Se isto ocorrer, será utilizado o primeiro tipo Descrição fornecedor encontrado que fornece informações sobre o tipo exclusivamente. Uma vez que os fornecedores de informações de tipo são armazenadas numa pilha, o último fornecedor adicionado irá ser o primeiro consultado. Este comportamento permite que o AddProvider e <xref:System.ComponentModel.TypeDescriptor.RemoveProvider%2A>métodos para ser utilizado para emitir e destaque escreva fornecedores de descrição conforme necessário para cenários específicos.</xref:System.ComponentModel.TypeDescriptor.RemoveProvider%2A>       Se tiver êxito, este método chama o <xref:System.ComponentModel.TypeDescriptor.Refresh%28System.Object%29>método no `instance` parâmetro.</xref:System.ComponentModel.TypeDescriptor.Refresh%28System.Object%29>      > [!NOTE] > Das duas versões deste método produzem resultados com âmbitos diferentes. O <xref:System.ComponentModel.TypeDescriptor.AddProvider%2A>método que assume um <xref:System.Object>parâmetro afeta apenas essa instância única do componente especificado.</xref:System.Object> </xref:System.ComponentModel.TypeDescriptor.AddProvider%2A> Em contrapartida, a outra sobrecarga, que demora um <xref:System.Type>parâmetro, afeta todas as instâncias do componente descrita através desse tipo.</xref:System.Type>       Utilize o <xref:System.ComponentModel.TypeDescriptor.AddProviderTransparent%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29>método se tiver de chamar a partir do código parcialmente fidedigno.</xref:System.ComponentModel.TypeDescriptor.AddProviderTransparent%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29>"
  syntax:
    content: public static void AddProvider (System.ComponentModel.TypeDescriptionProvider provider, object instance);
    parameters:
    - id: provider
      type: System.ComponentModel.TypeDescriptionProvider
      description: "The <xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;></xref> to add."
    - id: instance
      type: System.Object
      description: "Uma instância do componente de destino."
  overload: System.ComponentModel.TypeDescriptor.AddProvider*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Um ou ambos os parâmetros são <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)
  id: AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: AddProvider(TypeDescriptionProvider,Type)
  nameWithType: TypeDescriptor.AddProvider(TypeDescriptionProvider,Type)
  fullName: System.ComponentModel.TypeDescriptor.AddProvider(TypeDescriptionProvider,Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Adiciona um fornecedor de descrições de tipo de uma classe de componentes."
  remarks: "O método AddProvider adiciona essas informações de tipo de fontes para a classe especificada, as classes derivadas e todas as instâncias dos seguintes tipos de um fornecedor de descrições de tipo.      > [!NOTE] > O `type` parâmetro pode ser qualquer tipo, incluindo uma interface. Por exemplo, para fornecer informações de instância de todos os componentes e tipo personalizado, tem de especificar `typeof(IComponent)`. Transmitir `typeof(object)` ligará para o fornecedor para fornecer informações de tipo para todos os tipos.       Este método não mantém uma referência de disco rígida para qualquer objeto, pelo que não impede objetos a finalizar o.       É possível adicionar vários fornecedores de descrição de tipo para o mesmo tipo ou objecto. Se isto ocorrer, será utilizado o primeiro tipo Descrição fornecedor encontrado que fornece informações sobre o tipo exclusivamente. Porque os fornecedores de informações de tipo são armazenadas numa pilha, o último fornecedor adicionado irá ser o primeiro consultado. Este comportamento permite que o AddProvider e <xref:System.ComponentModel.TypeDescriptor.RemoveProvider%2A>métodos para ser utilizado para emitir e destaque escreva fornecedores de descrição conforme necessário para cenários específicos.</xref:System.ComponentModel.TypeDescriptor.RemoveProvider%2A>       Se tiver êxito, este método chama o <xref:System.ComponentModel.TypeDescriptor.Refresh%28System.Type%29>método no `type` parâmetro.</xref:System.ComponentModel.TypeDescriptor.Refresh%28System.Type%29>      > [!NOTE] > Das duas versões deste método produzem resultados com âmbitos diferentes. O <xref:System.ComponentModel.TypeDescriptor.AddProvider%2A>método que assume um <xref:System.Object>parâmetro afeta apenas essa instância única do componente especificado.</xref:System.Object> </xref:System.ComponentModel.TypeDescriptor.AddProvider%2A> Em contrapartida, a outra sobrecarga, que demora um <xref:System.Type>parâmetro, afeta todas as instâncias do componente descrita através desse tipo.</xref:System.Type>       Utilize o <xref:System.ComponentModel.TypeDescriptor.AddProviderTransparent%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>método se tiver de chamar a partir do código parcialmente fidedigno.</xref:System.ComponentModel.TypeDescriptor.AddProviderTransparent%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>"
  syntax:
    content: public static void AddProvider (System.ComponentModel.TypeDescriptionProvider provider, Type type);
    parameters:
    - id: provider
      type: System.ComponentModel.TypeDescriptionProvider
      description: "The <xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;></xref> to add."
    - id: type
      type: System.Type
      description: "O <xref:System.Type>do componente de destino.</xref:System.Type>"
  overload: System.ComponentModel.TypeDescriptor.AddProvider*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Um ou ambos os parâmetros são <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)
  id: AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: AddProviderTransparent(TypeDescriptionProvider,Object)
  nameWithType: TypeDescriptor.AddProviderTransparent(TypeDescriptionProvider,Object)
  fullName: System.ComponentModel.TypeDescriptor.AddProviderTransparent(TypeDescriptionProvider,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Adiciona um fornecedor de descrições de tipo para uma única instância de um componente."
  remarks: "Este método pode ser chamado a partir do código parcialmente fidedigno. Se <xref:System.Security.Permissions.TypeDescriptorPermissionFlags>está definido, o autor da chamada pode registar um fornecedor para a instância especificada se o respetivo tipo também é parcialmente fidedigno.</xref:System.Security.Permissions.TypeDescriptorPermissionFlags>       Utilize o <xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29>método se não for necessário chamar a partir do código parcialmente fidedigno.</xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29>"
  syntax:
    content: public static void AddProviderTransparent (System.ComponentModel.TypeDescriptionProvider provider, object instance);
    parameters:
    - id: provider
      type: System.ComponentModel.TypeDescriptionProvider
      description: "The <xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;></xref> to add."
    - id: instance
      type: System.Object
      description: "Uma instância do componente de destino."
  overload: System.ComponentModel.TypeDescriptor.AddProviderTransparent*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Um ou ambos os parâmetros são <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)
  id: AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: AddProviderTransparent(TypeDescriptionProvider,Type)
  nameWithType: TypeDescriptor.AddProviderTransparent(TypeDescriptionProvider,Type)
  fullName: System.ComponentModel.TypeDescriptor.AddProviderTransparent(TypeDescriptionProvider,Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Adiciona um fornecedor de descrições de tipo de uma classe de componentes."
  remarks: "Este método pode ser chamado a partir do código parcialmente fidedigno. Se <xref:System.Security.Permissions.TypeDescriptorPermissionFlags>está definido, o autor da chamada pode registar-se um fornecedor para o tipo especificado se também é parcialmente fidedigna.</xref:System.Security.Permissions.TypeDescriptorPermissionFlags>       Utilize o <xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>método se não for necessário chamar a partir do código parcialmente fidedigno.</xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>"
  syntax:
    content: public static void AddProviderTransparent (System.ComponentModel.TypeDescriptionProvider provider, Type type);
    parameters:
    - id: provider
      type: System.ComponentModel.TypeDescriptionProvider
      description: "The <xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;></xref> to add."
    - id: type
      type: System.Type
      description: "O <xref:System.Type>do componente de destino.</xref:System.Type>"
  overload: System.ComponentModel.TypeDescriptor.AddProviderTransparent*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Um ou ambos os parâmetros são <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.ComNativeDescriptorHandler
  id: ComNativeDescriptorHandler
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: ComNativeDescriptorHandler
  nameWithType: TypeDescriptor.ComNativeDescriptorHandler
  fullName: System.ComponentModel.TypeDescriptor.ComNativeDescriptorHandler
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Obtém ou define o fornecedor para as informações de tipo de modelo de objeto do componente (COM) para o componente de destino."
  remarks: "A propriedade ComNativeDescriptorHandler e <xref:System.ComponentModel.IComNativeDescriptorHandler>interface está obsoleta.</xref:System.ComponentModel.IComNativeDescriptorHandler> Para obter mais informações, consulte o <xref:System.ComponentModel.TypeDescriptor.ComObjectType%2A>propriedade.</xref:System.ComponentModel.TypeDescriptor.ComObjectType%2A>"
  syntax:
    content: public static System.ComponentModel.IComNativeDescriptorHandler ComNativeDescriptorHandler { get; set; }
    return:
      type: System.ComponentModel.IComNativeDescriptorHandler
      description: "Um <xref href=&quot;System.ComponentModel.IComNativeDescriptorHandler&quot;> </xref> instância que representa o fornecedor de informações de tipo de COM."
  overload: System.ComponentModel.TypeDescriptor.ComNativeDescriptorHandler*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.ComObjectType
  id: ComObjectType
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: ComObjectType
  nameWithType: TypeDescriptor.ComObjectType
  fullName: System.ComponentModel.TypeDescriptor.ComObjectType
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Obtém o tipo do objeto de modelo de objeto do componente (COM) representado pelo componente de destino."
  remarks: "A propriedade ComObjectType devolve um tipo que pode ser transferido para o <xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>método para definir um fornecedor de descrições de tipo para tipos de COM.</xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>       A propriedade ComObjectType e outros membros desta classe substituem a funcionalidade no obsoleto <xref:System.ComponentModel.IComNativeDescriptorHandler>interface.</xref:System.ComponentModel.IComNativeDescriptorHandler> Para implementar uma camada de mapeamento entre um objecto COM e <xref:System.ComponentModel.TypeDescriptor>, adicione um <xref:System.ComponentModel.TypeDescriptionProvider>para processar o tipo ComObjectType.</xref:System.ComponentModel.TypeDescriptionProvider> </xref:System.ComponentModel.TypeDescriptor>"
  syntax:
    content: public static Type ComObjectType { get; }
    return:
      type: System.Type
      description: "O <xref:System.Type>do objeto COM representado por este componente, ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> para objectos COM não.</xref:System.Type>"
  overload: System.ComponentModel.TypeDescriptor.ComObjectType*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.CreateAssociation(System.Object,System.Object)
  id: CreateAssociation(System.Object,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: CreateAssociation(Object,Object)
  nameWithType: TypeDescriptor.CreateAssociation(Object,Object)
  fullName: System.ComponentModel.TypeDescriptor.CreateAssociation(Object,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Cria uma associação de secundário do primário entre dois objetos."
  remarks: "O método CreateAssociation cria uma associação entre um site primário e um objeto secundário. Quando é criada uma associação, um designer ou outro mecanismo de filtragem, pode adicionar propriedades encaminhar para o objeto no conjunto de propriedade do objeto principal. Quando é efetuada uma invocação de propriedade contra o objeto principal, o <xref:System.ComponentModel.TypeDescriptor.GetAssociation%2A>método irá ser chamado para resolver a instância de objecto real que está relacionado com o parâmetro de tipo.</xref:System.ComponentModel.TypeDescriptor.GetAssociation%2A>       A <xref:System.WeakReference>é utilizado para manter a associação entre o objeto principal e secundário; por conseguinte, este método não impede que o objeto que está a ser finalizada e recuperados através da recolha de lixo.</xref:System.WeakReference>"
  syntax:
    content: public static void CreateAssociation (object primary, object secondary);
    parameters:
    - id: primary
      type: System.Object
      description: "O principal <xref:System.Object>.</xref:System.Object>"
    - id: secondary
      type: System.Object
      description: "O elemento secundário <xref:System.Object>.</xref:System.Object>"
  overload: System.ComponentModel.TypeDescriptor.CreateAssociation*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Um ou ambos os parâmetros são <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>primary</code>é igual ao <code>secondary</code>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.CreateDesigner(System.ComponentModel.IComponent,System.Type)
  id: CreateDesigner(System.ComponentModel.IComponent,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: CreateDesigner(IComponent,Type)
  nameWithType: TypeDescriptor.CreateDesigner(IComponent,Type)
  fullName: System.ComponentModel.TypeDescriptor.CreateDesigner(IComponent,Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Cria uma instância do designer associadas com o componente especificado e do tipo especificado do designer."
  remarks: "Se este método não é possível localizar um <xref:System.ComponentModel.DesignerAttribute>, este procura ascendentemente na hierarquia de classe para um estruturador.</xref:System.ComponentModel.DesignerAttribute> Se não conseguir localizar um designer a hierarquia de classes, devolve `null`."
  syntax:
    content: public static System.ComponentModel.Design.IDesigner CreateDesigner (System.ComponentModel.IComponent component, Type designerBaseType);
    parameters:
    - id: component
      type: System.ComponentModel.IComponent
      description: "Um <xref href=&quot;System.ComponentModel.IComponent&quot;> </xref> Especifica que o componente para associar o estruturador."
    - id: designerBaseType
      type: System.Type
      description: "A <xref:System.Type>que representa o tipo de designer para criar.</xref:System.Type>"
    return:
      type: System.ComponentModel.Design.IDesigner
      description: "Um <xref href=&quot;System.ComponentModel.Design.IDesigner&quot;> </xref> que é uma instância do designer para o componente, ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> não se é possível encontrar nenhum estruturador."
  overload: System.ComponentModel.TypeDescriptor.CreateDesigner*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.ComponentModel.EventDescriptor,System.Attribute[])
  id: CreateEvent(System.Type,System.ComponentModel.EventDescriptor,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: CreateEvent(Type,EventDescriptor,Attribute[])
  nameWithType: TypeDescriptor.CreateEvent(Type,EventDescriptor,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.CreateEvent(Type,EventDescriptor,Attribute[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Cria um novo descritor de eventos é idêntico a um descritor de evento existente, quando o existente <xref href=&quot;System.ComponentModel.EventDescriptor&quot;> </xref>."
  syntax:
    content: public static System.ComponentModel.EventDescriptor CreateEvent (Type componentType, System.ComponentModel.EventDescriptor oldEventDescriptor, Attribute[] attributes);
    parameters:
    - id: componentType
      type: System.Type
      description: "O tipo do componente para o qual pretende criar o novo evento."
    - id: oldEventDescriptor
      type: System.ComponentModel.EventDescriptor
      description: "As informações de evento existente."
    - id: attributes
      type: System.Attribute[]
      description: "Os atributos de novo."
    return:
      type: System.ComponentModel.EventDescriptor
      description: "Um novo <xref href=&quot;System.ComponentModel.EventDescriptor&quot;> </xref> que foi intercalado os atributos de metadados especificado com os atributos de metadados existente."
  overload: System.ComponentModel.TypeDescriptor.CreateEvent*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.String,System.Type,System.Attribute[])
  id: CreateEvent(System.Type,System.String,System.Type,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: CreateEvent(Type,String,Type,Attribute[])
  nameWithType: TypeDescriptor.CreateEvent(Type,String,Type,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.CreateEvent(Type,String,Type,Attribute[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Cria um novo descritor de eventos é idêntico a um descritor de evento existente ao gerar dinamicamente as informações do descritor de um evento num tipo especificado."
  syntax:
    content: public static System.ComponentModel.EventDescriptor CreateEvent (Type componentType, string name, Type type, Attribute[] attributes);
    parameters:
    - id: componentType
      type: System.Type
      description: "O tipo de componente de evento se encontra."
    - id: name
      type: System.String
      description: "O nome do evento."
    - id: type
      type: System.Type
      description: "O tipo de delegado que processa o evento."
    - id: attributes
      type: System.Attribute[]
      description: "Os atributos para este evento."
    return:
      type: System.ComponentModel.EventDescriptor
      description: "Um <xref href=&quot;System.ComponentModel.EventDescriptor&quot;> </xref> que está vinculado a um tipo."
  overload: System.ComponentModel.TypeDescriptor.CreateEvent*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
  id: CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: CreateInstance(IServiceProvider,Type,Type[],Object[])
  nameWithType: TypeDescriptor.CreateInstance(IServiceProvider,Type,Type[],Object[])
  fullName: System.ComponentModel.TypeDescriptor.CreateInstance(IServiceProvider,Type,Type[],Object[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Cria um objeto que pode substituir a outro tipo de dados."
  remarks: "O método de CreateInstance irá procurar um <xref:System.ComponentModel.TypeDescriptionProvider>associado especificado `objectType` tipo de dados.</xref:System.ComponentModel.TypeDescriptionProvider> Este método tenta pela primeira vez obter um fornecedor de descrições de tipo do `provider` parâmetro. Se isto falhar, procura as seus próprios tabelas internas para um fornecedor (estas entradas criadas através de chamadas anteriores para <xref:System.ComponentModel.TypeDescriptor.AddProvider%2A>).</xref:System.ComponentModel.TypeDescriptor.AddProvider%2A> Se encontrar um fornecedor, este método irão delegar a chamada de criação para esse objeto."
  syntax:
    content: public static object CreateInstance (IServiceProvider provider, Type objectType, Type[] argTypes, object[] args);
    parameters:
    - id: provider
      type: System.IServiceProvider
      description: "O fornecedor de serviço que fornece um <xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;> </xref> serviço. Este parâmetro pode ser <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    - id: objectType
      type: System.Type
      description: "O <xref:System.Type>do objeto a criar.</xref:System.Type>"
    - id: argTypes
      type: System.Type[]
      description: "Uma matriz opcional de tipos de parâmetros a transmitir ao construtor do objeto. Este parâmetro pode ser <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> ou uma matriz de comprimento zero."
    - id: args
      type: System.Object[]
      description: "Uma matriz opcional de valores de parâmetros a transmitir ao construtor do objeto. Se não for <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, o número de elementos deve ser o mesmo que `argTypes`."
    return:
      type: System.Object
      description: "Uma instância do tipo de dados substitute se um associados <xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;> </xref> é encontrado; caso contrário, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.ComponentModel.TypeDescriptor.CreateInstance*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>objectType</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>, or <code>args</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> when <code>argTypes</code> is not <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>argTypes</code>e <code>args</code> têm diferentes números de elementos."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.ComponentModel.PropertyDescriptor,System.Attribute[])
  id: CreateProperty(System.Type,System.ComponentModel.PropertyDescriptor,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: CreateProperty(Type,PropertyDescriptor,Attribute[])
  nameWithType: TypeDescriptor.CreateProperty(Type,PropertyDescriptor,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.CreateProperty(Type,PropertyDescriptor,Attribute[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Cria um novo descritor de propriedade a partir de um descritor de propriedade existentes, utilizando o existente especificado <xref href=&quot;System.ComponentModel.PropertyDescriptor&quot;> </xref> e a matriz de atributo."
  syntax:
    content: public static System.ComponentModel.PropertyDescriptor CreateProperty (Type componentType, System.ComponentModel.PropertyDescriptor oldPropertyDescriptor, Attribute[] attributes);
    parameters:
    - id: componentType
      type: System.Type
      description: "O <xref:System.Type>do componente que a propriedade é um membro de.</xref:System.Type>"
    - id: oldPropertyDescriptor
      type: System.ComponentModel.PropertyDescriptor
      description: "O descritor de propriedade existentes."
    - id: attributes
      type: System.Attribute[]
      description: "Os atributos novos para esta propriedade."
    return:
      type: System.ComponentModel.PropertyDescriptor
      description: "Um novo <xref href=&quot;System.ComponentModel.PropertyDescriptor&quot;> </xref> que tem os atributos de metadados especificado intercalados com os atributos de metadados existente."
  overload: System.ComponentModel.TypeDescriptor.CreateProperty*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.String,System.Type,System.Attribute[])
  id: CreateProperty(System.Type,System.String,System.Type,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: CreateProperty(Type,String,Type,Attribute[])
  nameWithType: TypeDescriptor.CreateProperty(Type,String,Type,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.CreateProperty(Type,String,Type,Attribute[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Cria e vincula dinamicamente um descritor de propriedade para um tipo, utilizando o nome de propriedade especificado, o tipo e a matriz de atributo."
  syntax:
    content: public static System.ComponentModel.PropertyDescriptor CreateProperty (Type componentType, string name, Type type, Attribute[] attributes);
    parameters:
    - id: componentType
      type: System.Type
      description: "O <xref:System.Type>do componente que a propriedade é um membro de.</xref:System.Type>"
    - id: name
      type: System.String
      description: "O nome da propriedade."
    - id: type
      type: System.Type
      description: "O <xref:System.Type>da propriedade.</xref:System.Type>"
    - id: attributes
      type: System.Attribute[]
      description: "Os atributos novos para esta propriedade."
    return:
      type: System.ComponentModel.PropertyDescriptor
      description: "A <xref href=&quot;System.ComponentModel.PropertyDescriptor&quot;> </xref> que está vinculado ao tipo especificado e que tem os atributos de metadados especificado intercalados com os atributos de metadados existente."
  overload: System.ComponentModel.TypeDescriptor.CreateProperty*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetAssociation(System.Type,System.Object)
  id: GetAssociation(System.Type,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetAssociation(Type,Object)
  nameWithType: TypeDescriptor.GetAssociation(Type,Object)
  fullName: System.ComponentModel.TypeDescriptor.GetAssociation(Type,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Devolve uma instância do tipo associado ao objeto principal especificado."
  remarks: "Se uma associação anterior não foi efetuada a `type` parâmetro utilizando o <xref:System.ComponentModel.TypeDescriptor.CreateAssociation%2A>método, em seguida, o método GetAssociation devolve o objeto secundário correto para invocar para o tipo de pedido.</xref:System.ComponentModel.TypeDescriptor.CreateAssociation%2A> Caso contrário, GetAssociation procuram um estruturador compatível para `type` e devolve o designer, caso encontre algum. Este método devolve nunca `null`.       A <xref:System.WeakReference>é utilizado para manter a associação entre o objeto principal e secundário; por conseguinte, este método não impede que o objeto principal ou secundário que está a ser finalizada e recuperados através da recolha de lixo.</xref:System.WeakReference>"
  syntax:
    content: public static object GetAssociation (Type type, object primary);
    parameters:
    - id: type
      type: System.Type
      description: "O <xref:System.Type>do componente de destino.</xref:System.Type>"
    - id: primary
      type: System.Object
      description: "O objeto principal da associação."
    return:
      type: System.Object
      description: "Uma instância do tipo secundário que foi associado com o objeto principal se existe uma associação; caso contrário, <code> primary </code> se não for especificado já existe associação."
  overload: System.ComponentModel.TypeDescriptor.GetAssociation*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Um ou ambos os parâmetros são <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetAttributes(System.Object)
  id: GetAttributes(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetAttributes(Object)
  nameWithType: TypeDescriptor.GetAttributes(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetAttributes(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Devolve o conjunto de atributos para o componente especificado."
  remarks: "Os atributos devolvidos pelo <xref:System.ComponentModel.TypeDescriptor.GetAttributes%2A>método pode ser modificado dinamicamente a partir da origem do componente original listagem pelos fornecedores de extensão (<xref:System.ComponentModel.IExtenderProvider>), filtrar serviços (<xref:System.ComponentModel.Design.ITypeDescriptorFilterService>) e os filtros de atributos.</xref:System.ComponentModel.Design.ITypeDescriptorFilterService> </xref:System.ComponentModel.IExtenderProvider> </xref:System.ComponentModel.TypeDescriptor.GetAttributes%2A>       Quando define um atributo personalizado com <xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>definido como `true`, tem de substituir o <xref:System.Attribute.TypeId%2A?displayProperty=fullName>propriedade para o tornar único.</xref:System.Attribute.TypeId%2A?displayProperty=fullName> </xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName> Se a todas as instâncias do seu atributo são exclusivas, substituir <xref:System.Attribute.TypeId%2A?displayProperty=fullName>para devolver a identidade do objeto do seu atributo.</xref:System.Attribute.TypeId%2A?displayProperty=fullName> Se apenas algumas instâncias do seu atributo são exclusivas, devolver um valor de <xref:System.Attribute.TypeId%2A?displayProperty=fullName>que devolvam igualdade nesses casos.</xref:System.Attribute.TypeId%2A?displayProperty=fullName> Por exemplo, alguns atributos tem um parâmetro de construtor que age como uma chave exclusiva. Para estes atributos, devolver o valor do parâmetro de construtor de <xref:System.Attribute.TypeId%2A?displayProperty=fullName>propriedade.</xref:System.Attribute.TypeId%2A?displayProperty=fullName>      > [!NOTE] > A implementação predefinida do <xref:System.Attribute.TypeId%2A?displayProperty=fullName>devolve a identidade de tipo independentemente do valor da <xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>propriedade.</xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName> </xref:System.Attribute.TypeId%2A?displayProperty=fullName> Para devolver várias instâncias de um <xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>atributo do <xref:System.ComponentModel.AttributeCollection>, o atributo tem de substituir o <xref:System.Attribute.TypeId%2A?displayProperty=fullName>propriedade.</xref:System.Attribute.TypeId%2A?displayProperty=fullName> </xref:System.ComponentModel.AttributeCollection> </xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>"
  example:
  - For an example of this method, see the <xref:System.ComponentModel.AttributeCollection.Matches%2A> method.
  syntax:
    content: public static System.ComponentModel.AttributeCollection GetAttributes (object component);
    parameters:
    - id: component
      type: System.Object
      description: "O componente para o qual deseja obter atributos."
    return:
      type: System.ComponentModel.AttributeCollection
      description: "Um <xref href=&quot;System.ComponentModel.AttributeCollection&quot;> </xref> que contém os atributos para o componente. Se <code> component </code> é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, este método devolve uma coleção vazia."
  overload: System.ComponentModel.TypeDescriptor.GetAttributes*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetAttributes(System.Type)
  id: GetAttributes(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetAttributes(Type)
  nameWithType: TypeDescriptor.GetAttributes(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetAttributes(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Devolve um conjunto de atributos para o tipo de componente especificado."
  remarks: "Chame esta versão deste método apenas quando não tiver uma instância do objeto.       Para atributos com <xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>definido como `true`, a coleção de atributos remove ocorrências duplicadas.</xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName> Estes são instâncias em que o <xref:System.Attribute.TypeId%2A?displayProperty=fullName>propriedade devolve valores iguais.</xref:System.Attribute.TypeId%2A?displayProperty=fullName>       Quando define um atributo personalizado com <xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>definido como `true`, tem de substituir o <xref:System.Attribute.TypeId%2A?displayProperty=fullName>propriedade para o tornar único.</xref:System.Attribute.TypeId%2A?displayProperty=fullName> </xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName> Se a todas as instâncias do seu atributo são exclusivas, substituir <xref:System.Attribute.TypeId%2A?displayProperty=fullName>para devolver a identidade do objeto do seu atributo.</xref:System.Attribute.TypeId%2A?displayProperty=fullName> Se apenas algumas instâncias do seu atributo são exclusivas, devolver um valor de <xref:System.Attribute.TypeId%2A?displayProperty=fullName>que devolvam igualdade nesses casos.</xref:System.Attribute.TypeId%2A?displayProperty=fullName> Por exemplo, alguns atributos tem um parâmetro de construtor que age como uma chave exclusiva. Para estes atributos, devolver o valor do parâmetro de construtor de <xref:System.Attribute.TypeId%2A?displayProperty=fullName>propriedade.</xref:System.Attribute.TypeId%2A?displayProperty=fullName>      > [!NOTE] > A implementação predefinida do <xref:System.Attribute.TypeId%2A?displayProperty=fullName>devolve a identidade de tipo independentemente do valor da <xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>propriedade.</xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName> </xref:System.Attribute.TypeId%2A?displayProperty=fullName> Para devolver várias instâncias de um <xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>atributo do <xref:System.ComponentModel.AttributeCollection>, o atributo tem de substituir o <xref:System.Attribute.TypeId%2A?displayProperty=fullName>propriedade.</xref:System.Attribute.TypeId%2A?displayProperty=fullName> </xref:System.ComponentModel.AttributeCollection> </xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>"
  syntax:
    content: public static System.ComponentModel.AttributeCollection GetAttributes (Type componentType);
    parameters:
    - id: componentType
      type: System.Type
      description: "O <xref:System.Type>do componente de destino.</xref:System.Type>"
    return:
      type: System.ComponentModel.AttributeCollection
      description: "Um <xref href=&quot;System.ComponentModel.AttributeCollection&quot;> </xref> com os atributos para o tipo de componente. Se o componente está <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, este método devolve uma coleção vazia."
  overload: System.ComponentModel.TypeDescriptor.GetAttributes*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetAttributes(System.Object,System.Boolean)
  id: GetAttributes(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetAttributes(Object,Boolean)
  nameWithType: TypeDescriptor.GetAttributes(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetAttributes(Object,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Devolve um conjunto de atributos para o componente especificado e um valor boleano que indica que foi criado um descritor de tipo personalizado."
  remarks: "Os atributos devolvidos pelo <xref:System.ComponentModel.TypeDescriptor.GetAttributes%2A>método pode ser modificado dinamicamente de origem original de componentes listagem pelos fornecedores de extensão (<xref:System.ComponentModel.IExtenderProvider>), filtrar serviços (<xref:System.ComponentModel.Design.ITypeDescriptorFilterService>) e os filtros de atributos.</xref:System.ComponentModel.Design.ITypeDescriptorFilterService> </xref:System.ComponentModel.IExtenderProvider> </xref:System.ComponentModel.TypeDescriptor.GetAttributes%2A>       Quando define um atributo personalizado com <xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>definido como `true`, tem de substituir o <xref:System.Attribute.TypeId%2A?displayProperty=fullName>propriedade para o tornar único.</xref:System.Attribute.TypeId%2A?displayProperty=fullName> </xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName> Se a todas as instâncias do seu atributo são exclusivas, substituir <xref:System.Attribute.TypeId%2A?displayProperty=fullName>para devolver a identidade do objeto do seu atributo.</xref:System.Attribute.TypeId%2A?displayProperty=fullName> Se apenas algumas instâncias do seu atributo são exclusivas, devolver um valor de <xref:System.Attribute.TypeId%2A?displayProperty=fullName>que devolvam igualdade nesses casos.</xref:System.Attribute.TypeId%2A?displayProperty=fullName> Por exemplo, alguns atributos tem um parâmetro de construtor que age como uma chave exclusiva. Para estes atributos, devolver o valor do parâmetro de construtor de <xref:System.Attribute.TypeId%2A?displayProperty=fullName>propriedade.</xref:System.Attribute.TypeId%2A?displayProperty=fullName>      > [!NOTE] > A implementação predefinida do <xref:System.Attribute.TypeId%2A?displayProperty=fullName>devolve a identidade de tipo independentemente do valor da <xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>propriedade.</xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName> </xref:System.Attribute.TypeId%2A?displayProperty=fullName> Para devolver várias instâncias de um <xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>atributo do <xref:System.ComponentModel.AttributeCollection>, o atributo tem de substituir o <xref:System.Attribute.TypeId%2A?displayProperty=fullName>propriedade.</xref:System.Attribute.TypeId%2A?displayProperty=fullName> </xref:System.ComponentModel.AttributeCollection> </xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>"
  syntax:
    content: public static System.ComponentModel.AttributeCollection GetAttributes (object component, bool noCustomTypeDesc);
    parameters:
    - id: component
      type: System.Object
      description: "O componente para o qual deseja obter atributos."
    - id: noCustomTypeDesc
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Para utilizar um conjunto de linha de base de atributos do descritor de tipo personalizado se `component` é do tipo <xref href=&quot;System.ComponentModel.ICustomTypeDescriptor&quot;> </xref>; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.ComponentModel.AttributeCollection
      description: "Um <xref href=&quot;System.ComponentModel.AttributeCollection&quot;> </xref> com os atributos para o componente. Se o componente está <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, este método devolve uma coleção vazia."
  overload: System.ComponentModel.TypeDescriptor.GetAttributes*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetClassName(System.Object)
  id: GetClassName(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetClassName(Object)
  nameWithType: TypeDescriptor.GetClassName(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetClassName(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Devolve o nome da classe para o componente especificado utilizando o descritor de tipo predefinido."
  remarks: "Normalmente, este método devolve o completo <xref:System.Type>nome para o `component` tipo de parâmetro.</xref:System.Type> Por exemplo, o nome de classe para um botão é &quot;System.Windows.Forms.Button&quot;. Se `component` implementa <xref:System.ComponentModel.ICustomTypeDescriptor>, pode devolver um nome alternativo.</xref:System.ComponentModel.ICustomTypeDescriptor>       Este método é equivalente à sobrecarregado <xref:System.ComponentModel.TypeDescriptor.GetClassName%28System.Object%2CSystem.Boolean%29>método com um segundo parâmetro de `false`.</xref:System.ComponentModel.TypeDescriptor.GetClassName%28System.Object%2CSystem.Boolean%29>"
  syntax:
    content: public static string GetClassName (object component);
    parameters:
    - id: component
      type: System.Object
      description: "O <xref:System.Object>para o qual pretende que o nome da classe.</xref:System.Object>"
    return:
      type: System.String
      description: "A <xref:System.String>que contém o nome da classe para o componente especificado.</xref:System.String>"
  overload: System.ComponentModel.TypeDescriptor.GetClassName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetClassName(System.Type)
  id: GetClassName(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetClassName(Type)
  nameWithType: TypeDescriptor.GetClassName(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetClassName(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Devolve o nome da classe para o tipo especificado."
  remarks: "Este método utiliza o descritor de tipo personalizado em cache para o tipo especificado para detetar o nome de classe associada."
  syntax:
    content: public static string GetClassName (Type componentType);
    parameters:
    - id: componentType
      type: System.Type
      description: "O <xref:System.Type>do componente de destino.</xref:System.Type>"
    return:
      type: System.String
      description: "A <xref:System.String>que contém o nome da classe para o tipo de componente especificado.</xref:System.String>"
  overload: System.ComponentModel.TypeDescriptor.GetClassName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>componentType</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetClassName(System.Object,System.Boolean)
  id: GetClassName(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetClassName(Object,Boolean)
  nameWithType: TypeDescriptor.GetClassName(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetClassName(Object,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Devolve o nome da classe para o componente especificado com um descritor de tipo personalizado."
  remarks: "Normalmente, este método devolve o completo <xref:System.Type>nome para o `component` tipo de parâmetro.</xref:System.Type> Por exemplo, o nome de classe para um botão é &quot;System.Windows.Forms.Button&quot;. Se o `component` parâmetro implementa <xref:System.ComponentModel.ICustomTypeDescriptor>, pode devolver um nome alternativo.</xref:System.ComponentModel.ICustomTypeDescriptor>"
  syntax:
    content: public static string GetClassName (object component, bool noCustomTypeDesc);
    parameters:
    - id: component
      type: System.Object
      description: "O <xref:System.Object>para o qual pretende que o nome da classe.</xref:System.Object>"
    - id: noCustomTypeDesc
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>considerar as informações de descrição do tipo personalizado; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.String
      description: "A <xref:System.String>que contém o nome da classe para o componente especificado.</xref:System.String>"
  overload: System.ComponentModel.TypeDescriptor.GetClassName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>é um objeto controlado remotamente processos cruzados."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetComponentName(System.Object)
  id: GetComponentName(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetComponentName(Object)
  nameWithType: TypeDescriptor.GetComponentName(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetComponentName(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Devolve o nome do componente especificado utilizando o descritor de tipo predefinido."
  remarks: "Normalmente, este método devolve o nome para o site do componente, se existir. Por exemplo, o nome de classe para um botão é &quot;System.Windows.Forms.Button&quot;.       Este método é equivalente à sobrecarregado <xref:System.ComponentModel.TypeDescriptor.GetComponentName%28System.Object%2CSystem.Boolean%29>método com um segundo parâmetro de `false`.</xref:System.ComponentModel.TypeDescriptor.GetComponentName%28System.Object%2CSystem.Boolean%29>       Este método é utilizado no momento da conceção para obter o nome de uma instância de um componente."
  syntax:
    content: public static string GetComponentName (object component);
    parameters:
    - id: component
      type: System.Object
      description: "O <xref:System.Object>para o qual pretende que o nome da classe.</xref:System.Object>"
    return:
      type: System.String
      description: "A <xref:System.String>contendo o nome do componente especificado, ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se não houver nenhum nome de componente.</xref:System.String>"
  overload: System.ComponentModel.TypeDescriptor.GetComponentName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>é um objeto controlado remotamente processos cruzados."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetComponentName(System.Object,System.Boolean)
  id: GetComponentName(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetComponentName(Object,Boolean)
  nameWithType: TypeDescriptor.GetComponentName(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetComponentName(Object,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Devolve o nome do componente especificado com um descritor de tipo personalizado."
  remarks: "Este método é utilizado no momento da conceção para obter o nome de uma instância de um componente. Normalmente, este método devolve o nome para o site do componente, se existir. Por exemplo, o nome de classe para um botão é &quot;System.Windows.Forms.Button&quot;. Se o componente implementa o <xref:System.ComponentModel.ICustomTypeDescriptor>interface, pode devolver um nome alternativo.</xref:System.ComponentModel.ICustomTypeDescriptor>"
  syntax:
    content: public static string GetComponentName (object component, bool noCustomTypeDesc);
    parameters:
    - id: component
      type: System.Object
      description: "O <xref:System.Object>para o qual pretende que o nome da classe.</xref:System.Object>"
    - id: noCustomTypeDesc
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>considerar as informações de descrição do tipo personalizado; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.String
      description: "O nome da classe para o componente especificado, ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se não houver nenhum nome de componente."
  overload: System.ComponentModel.TypeDescriptor.GetComponentName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>é um objeto controlado remotamente processos cruzados."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetConverter(System.Object)
  id: GetConverter(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetConverter(Object)
  nameWithType: TypeDescriptor.GetConverter(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetConverter(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Devolve um conversor de tipos para o tipo de componente especificado."
  remarks: "Este método localiza um conversor de tipos adequado, procurando <xref:System.ComponentModel.TypeConverterAttribute>.</xref:System.ComponentModel.TypeConverterAttribute> Se não conseguir encontrar um <xref:System.ComponentModel.TypeConverterAttribute>, atravessa a hierarquia de classes base da classe até encontrar um tipo primitivo.</xref:System.ComponentModel.TypeConverterAttribute>       Este método é equivalente à sobrecarregado <xref:System.ComponentModel.TypeDescriptor.GetConverter%2A>método com um segundo parâmetro de `false`.</xref:System.ComponentModel.TypeDescriptor.GetConverter%2A>"
  example:
  - For an example of using this method, see the <xref:System.ComponentModel.TypeConverter> class.
  syntax:
    content: public static System.ComponentModel.TypeConverter GetConverter (object component);
    parameters:
    - id: component
      type: System.Object
      description: "Um componente para obter o conversor para."
    return:
      type: System.ComponentModel.TypeConverter
      description: "A <xref href=&quot;System.ComponentModel.TypeConverter&quot;> </xref> para o componente especificado."
  overload: System.ComponentModel.TypeDescriptor.GetConverter*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>é um objeto controlado remotamente processos cruzados."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetConverter(System.Type)
  id: GetConverter(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetConverter(Type)
  nameWithType: TypeDescriptor.GetConverter(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetConverter(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Devolve um conversor de tipos para o tipo especificado."
  remarks: "Chame esta versão deste método apenas quando não tiver uma instância do objeto.       Este método procura o conversor de tipo apropriado, procurando <xref:System.ComponentModel.TypeConverterAttribute>.</xref:System.ComponentModel.TypeConverterAttribute> Se não conseguir encontrar um <xref:System.ComponentModel.TypeConverterAttribute>, atravessa a hierarquia de classes base da classe até encontrar um tipo primitivo.</xref:System.ComponentModel.TypeConverterAttribute>"
  syntax:
    content: public static System.ComponentModel.TypeConverter GetConverter (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "O <xref:System.Type>do componente de destino.</xref:System.Type>"
    return:
      type: System.ComponentModel.TypeConverter
      description: "A <xref href=&quot;System.ComponentModel.TypeConverter&quot;> </xref> para o tipo especificado."
  overload: System.ComponentModel.TypeDescriptor.GetConverter*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetConverter(System.Object,System.Boolean)
  id: GetConverter(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetConverter(Object,Boolean)
  nameWithType: TypeDescriptor.GetConverter(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetConverter(Object,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Devolve um conversor de tipos para o tipo de componente especificado com um descritor de tipo personalizado."
  remarks: "Este método procura o conversor de tipos adequado ao tentar localizar um <xref:System.ComponentModel.TypeConverterAttribute>.</xref:System.ComponentModel.TypeConverterAttribute> Se não conseguir encontrar um <xref:System.ComponentModel.TypeConverterAttribute>, atravessa a hierarquia de classes base da classe até encontrar um tipo primitivo.</xref:System.ComponentModel.TypeConverterAttribute>"
  syntax:
    content: public static System.ComponentModel.TypeConverter GetConverter (object component, bool noCustomTypeDesc);
    parameters:
    - id: component
      type: System.Object
      description: "Um componente para obter o conversor para."
    - id: noCustomTypeDesc
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>considerar as informações de descrição do tipo personalizado; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.ComponentModel.TypeConverter
      description: "A <xref href=&quot;System.ComponentModel.TypeConverter&quot;> </xref> para o componente especificado."
  overload: System.ComponentModel.TypeDescriptor.GetConverter*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>é um objeto controlado remotamente processos cruzados."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object)
  id: GetDefaultEvent(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetDefaultEvent(Object)
  nameWithType: TypeDescriptor.GetDefaultEvent(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetDefaultEvent(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Devolve o evento de predefinido para o componente especificado."
  remarks: "Este método é equivalente à sobrecarregado <xref:System.ComponentModel.TypeDescriptor.GetDefaultEvent%28System.Object%2CSystem.Boolean%29>método com um segundo parâmetro de `false`.</xref:System.ComponentModel.TypeDescriptor.GetDefaultEvent%28System.Object%2CSystem.Boolean%29>"
  syntax:
    content: public static System.ComponentModel.EventDescriptor GetDefaultEvent (object component);
    parameters:
    - id: component
      type: System.Object
      description: "O componente para obter o evento para."
    return:
      type: System.ComponentModel.EventDescriptor
      description: "Um <xref href=&quot;System.ComponentModel.EventDescriptor&quot;> </xref> ao evento predefinida, ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se existirem não há eventos."
  overload: System.ComponentModel.TypeDescriptor.GetDefaultEvent*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>é um objeto controlado remotamente processos cruzados."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Type)
  id: GetDefaultEvent(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetDefaultEvent(Type)
  nameWithType: TypeDescriptor.GetDefaultEvent(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetDefaultEvent(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Devolve o evento de predefinido para o tipo de componente especificado."
  remarks: "Chame esta versão deste método apenas quando não tiver uma instância do objeto."
  syntax:
    content: public static System.ComponentModel.EventDescriptor GetDefaultEvent (Type componentType);
    parameters:
    - id: componentType
      type: System.Type
      description: "O <xref:System.Type>do componente de destino.</xref:System.Type>"
    return:
      type: System.ComponentModel.EventDescriptor
      description: "Um <xref href=&quot;System.ComponentModel.EventDescriptor&quot;> </xref> ao evento predefinida, ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se existirem não há eventos."
  overload: System.ComponentModel.TypeDescriptor.GetDefaultEvent*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object,System.Boolean)
  id: GetDefaultEvent(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetDefaultEvent(Object,Boolean)
  nameWithType: TypeDescriptor.GetDefaultEvent(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetDefaultEvent(Object,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Devolve o evento de predefinido para um componente com um descritor de tipo personalizado."
  syntax:
    content: public static System.ComponentModel.EventDescriptor GetDefaultEvent (object component, bool noCustomTypeDesc);
    parameters:
    - id: component
      type: System.Object
      description: "O componente para obter o evento para."
    - id: noCustomTypeDesc
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>considerar as informações de descrição do tipo personalizado; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.ComponentModel.EventDescriptor
      description: "Um <xref href=&quot;System.ComponentModel.EventDescriptor&quot;> </xref> ao evento predefinida, ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se existirem não há eventos."
  overload: System.ComponentModel.TypeDescriptor.GetDefaultEvent*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>é um objeto controlado remotamente processos cruzados."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object)
  id: GetDefaultProperty(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetDefaultProperty(Object)
  nameWithType: TypeDescriptor.GetDefaultProperty(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetDefaultProperty(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Devolve a propriedade predefinida para o componente especificado."
  remarks: "Se o `component` parâmetro é `null`, este método devolve `null`."
  syntax:
    content: public static System.ComponentModel.PropertyDescriptor GetDefaultProperty (object component);
    parameters:
    - id: component
      type: System.Object
      description: "O componente para obter a propriedade predefinida."
    return:
      type: System.ComponentModel.PropertyDescriptor
      description: "A <xref href=&quot;System.ComponentModel.PropertyDescriptor&quot;> </xref> com a propriedade predefinida, ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se existirem sem propriedades."
  overload: System.ComponentModel.TypeDescriptor.GetDefaultProperty*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>é um objeto controlado remotamente processos cruzados."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Type)
  id: GetDefaultProperty(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetDefaultProperty(Type)
  nameWithType: TypeDescriptor.GetDefaultProperty(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetDefaultProperty(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Devolve a propriedade predefinida para o tipo de componente especificado."
  remarks: "Chame esta versão deste método apenas quando não tiver uma instância do objeto.       Se o `componentType` parâmetro é `null`, este método devolve `null`."
  syntax:
    content: public static System.ComponentModel.PropertyDescriptor GetDefaultProperty (Type componentType);
    parameters:
    - id: componentType
      type: System.Type
      description: "Um <xref:System.Type>que representa a classe para obter a propriedade for.</xref:System.Type>"
    return:
      type: System.ComponentModel.PropertyDescriptor
      description: "A <xref href=&quot;System.ComponentModel.PropertyDescriptor&quot;> </xref> com a propriedade predefinida, ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se existirem sem propriedades."
  overload: System.ComponentModel.TypeDescriptor.GetDefaultProperty*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object,System.Boolean)
  id: GetDefaultProperty(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetDefaultProperty(Object,Boolean)
  nameWithType: TypeDescriptor.GetDefaultProperty(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetDefaultProperty(Object,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Devolve a propriedade predefinida para o componente especificado com um descritor de tipo personalizado."
  remarks: "Se o `component` parâmetro é `null`, este método devolve `null`."
  syntax:
    content: public static System.ComponentModel.PropertyDescriptor GetDefaultProperty (object component, bool noCustomTypeDesc);
    parameters:
    - id: component
      type: System.Object
      description: "O componente para obter a propriedade predefinida."
    - id: noCustomTypeDesc
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>considerar as informações de descrição do tipo personalizado; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.ComponentModel.PropertyDescriptor
      description: "A <xref href=&quot;System.ComponentModel.PropertyDescriptor&quot;> </xref> com a propriedade predefinida, ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se existirem sem propriedades."
  overload: System.ComponentModel.TypeDescriptor.GetDefaultProperty*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>é um objeto controlado remotamente processos cruzados."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type)
  id: GetEditor(System.Object,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetEditor(Object,Type)
  nameWithType: TypeDescriptor.GetEditor(Object,Type)
  fullName: System.ComponentModel.TypeDescriptor.GetEditor(Object,Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Obtém um editor com o tipo base especificado para o componente especificado."
  remarks: "O tipo de `editorBaseType` é normalmente <xref:System.Drawing.Design.UITypeEditor>, mas também pode utilizar outros tipos (por exemplo, <xref:System.ComponentModel.ComponentEditor>e <xref:System.ComponentModel.InstanceCreationEditor>).</xref:System.ComponentModel.InstanceCreationEditor> </xref:System.ComponentModel.ComponentEditor> </xref:System.Drawing.Design.UITypeEditor>       Pode definir vários editores para uma propriedade. Utilize este método para selecionar o editor de que pretende utilizar."
  syntax:
    content: public static object GetEditor (object component, Type editorBaseType);
    parameters:
    - id: component
      type: System.Object
      description: "O componente para obter o editor."
    - id: editorBaseType
      type: System.Type
      description: "A <xref:System.Type>que representa o tipo de base do editor que pretende localizar.</xref:System.Type>"
    return:
      type: System.Object
      description: "Uma instância do editor que pode ser convertido no tipo de editor especificado, ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> não se é possível encontrar nenhum editor do tipo pedido."
  overload: System.ComponentModel.TypeDescriptor.GetEditor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>or <code>editorBaseType</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>é um objeto controlado remotamente processos cruzados."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetEditor(System.Type,System.Type)
  id: GetEditor(System.Type,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetEditor(Type,Type)
  nameWithType: TypeDescriptor.GetEditor(Type,Type)
  fullName: System.ComponentModel.TypeDescriptor.GetEditor(Type,Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Devolve um editor com o tipo base especificado para o tipo especificado."
  remarks: "O tipo de `editorBaseType` é normalmente <xref:System.Drawing.Design.UITypeEditor>, mas também pode utilizar outros tipos (por exemplo <xref:System.ComponentModel.ComponentEditor>e <xref:System.ComponentModel.InstanceCreationEditor>).</xref:System.ComponentModel.InstanceCreationEditor> </xref:System.ComponentModel.ComponentEditor> </xref:System.Drawing.Design.UITypeEditor>       Pode definir vários editores para um tipo. Utilize este método para selecionar aquela que pretende utilizar.       Chame esta versão deste método apenas quando não tiver uma instância do objeto."
  syntax:
    content: public static object GetEditor (Type type, Type editorBaseType);
    parameters:
    - id: type
      type: System.Type
      description: "O <xref:System.Type>do componente de destino.</xref:System.Type>"
    - id: editorBaseType
      type: System.Type
      description: "A <xref:System.Type>que representa o tipo de base do editor que está a tentar encontrar.</xref:System.Type>"
    return:
      type: System.Object
      description: "Uma instância do objeto do editor que pode ser convertido no tipo base especificado, ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> não se é possível encontrar nenhum editor do tipo pedido."
  overload: System.ComponentModel.TypeDescriptor.GetEditor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>or <code>editorBaseType</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type,System.Boolean)
  id: GetEditor(System.Object,System.Type,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetEditor(Object,Type,Boolean)
  nameWithType: TypeDescriptor.GetEditor(Object,Type,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetEditor(Object,Type,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Devolve um editor com o tipo base especificado e com um descritor de tipo personalizado para o componente especificado."
  remarks: "O tipo de `editorBaseType` é normalmente <xref:System.Drawing.Design.UITypeEditor>, mas também pode utilizar outros tipos (por exemplo <xref:System.ComponentModel.ComponentEditor>e <xref:System.ComponentModel.InstanceCreationEditor>).</xref:System.ComponentModel.InstanceCreationEditor> </xref:System.ComponentModel.ComponentEditor> </xref:System.Drawing.Design.UITypeEditor>       Pode definir vários editores para uma propriedade. Utilize este método para selecionar o editor de que pretende utilizar."
  syntax:
    content: public static object GetEditor (object component, Type editorBaseType, bool noCustomTypeDesc);
    parameters:
    - id: component
      type: System.Object
      description: "O componente para obter o editor."
    - id: editorBaseType
      type: System.Type
      description: "A <xref:System.Type>que representa o tipo de base do editor que pretende localizar.</xref:System.Type>"
    - id: noCustomTypeDesc
      type: System.Boolean
      description: "Um sinalizador que indica se devem ser consideradas as informações de descrição do tipo personalizado."
    return:
      type: System.Object
      description: "Uma instância do editor que pode ser convertido no tipo de editor especificado, ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> não se é possível encontrar nenhum editor do tipo pedido."
  overload: System.ComponentModel.TypeDescriptor.GetEditor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>or <code>editorBaseType</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>é um objeto controlado remotamente processos cruzados."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetEvents(System.Object)
  id: GetEvents(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetEvents(Object)
  nameWithType: TypeDescriptor.GetEvents(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetEvents(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Devolve a recolha de eventos para o componente especificado."
  remarks: "Obtém uma recolha de eventos do que o indicado `component` fornece de instância de parâmetro. Esta coleção pode ser diferente do conjunto de eventos que a classe fornece. Se o `component` sited do parâmetro, o site pode adicionar ou remover eventos adicionais.       Se `component` é `null`, em seguida, é devolvida uma coleção vazia.       A ordem da coleção devolvida não é assegurada para ser idênticos nas chamadas, por isso sempre ordená-lo antes de utilização."
  example:
  - For an example of this method, see the <xref:System.ComponentModel.EventDescriptorCollection.Count%2A> property.
  syntax:
    content: public static System.ComponentModel.EventDescriptorCollection GetEvents (object component);
    parameters:
    - id: component
      type: System.Object
      description: "Um componente de obtenção de eventos para."
    return:
      type: System.ComponentModel.EventDescriptorCollection
      description: "Um <xref href=&quot;System.ComponentModel.EventDescriptorCollection&quot;> </xref> com os eventos para este componente."
  overload: System.ComponentModel.TypeDescriptor.GetEvents*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>é um objeto controlado remotamente processos cruzados."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetEvents(System.Type)
  id: GetEvents(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetEvents(Type)
  nameWithType: TypeDescriptor.GetEvents(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetEvents(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Devolve a recolha de eventos para um tipo de componente especificado."
  remarks: "Chame esta versão deste método apenas quando não tiver uma instância do objeto.       Se o `componentType` parâmetro é `null`, é devolvida uma coleção vazia.       A ordem da coleção devolvida não é assegurada para ser idênticos nas chamadas, por isso sempre ordená-lo antes de utilização."
  syntax:
    content: public static System.ComponentModel.EventDescriptorCollection GetEvents (Type componentType);
    parameters:
    - id: componentType
      type: System.Type
      description: "O <xref:System.Type>do componente de destino.</xref:System.Type>"
    return:
      type: System.ComponentModel.EventDescriptorCollection
      description: "Um <xref href=&quot;System.ComponentModel.EventDescriptorCollection&quot;> </xref> com os eventos para este componente."
  overload: System.ComponentModel.TypeDescriptor.GetEvents*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[])
  id: GetEvents(System.Object,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetEvents(Object,Attribute[])
  nameWithType: TypeDescriptor.GetEvents(Object,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.GetEvents(Object,Attribute[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Devolve a recolha de eventos para um componente especificado através de uma matriz de atributos especificada como um filtro."
  remarks: "Os eventos para o `component` parâmetro pode ser diferente dos eventos de uma classe, porque o site pode adicionar ou remover os eventos se os `component` sited do parâmetro.       O `attributes` matriz pode ter uma mistura de <xref:System.Type>e <xref:System.Attribute>objetos.</xref:System.Attribute> </xref:System.Type> Filtragem é definida pelas seguintes regras: - um <xref:System.Type>é tratado como um caráter universal; corresponde a qualquer evento que tenha o <xref:System.Type>no respetivo conjunto de atributos.</xref:System.Type> </xref:System.Type>      -Se um evento não tem um <xref:System.Attribute>da mesma classe, o evento não está incluído na matriz devolvida.</xref:System.Attribute>      -Se o atributo é uma instância do <xref:System.Attribute>classe, o evento tem de ser uma correspondência exata ou não está incluído na matriz devolvida.</xref:System.Attribute>      -Se um <xref:System.Attribute>instância for especificada e é o evento de predefinição, está incluído na matriz devolvida, mesmo se não houver nenhuma instância do <xref:System.Attribute>nos eventos.</xref:System.Attribute> </xref:System.Attribute>       Se `component` é `null`, é devolvida uma coleção vazia.       A ordem da coleção devolvida não é assegurada para ser idênticos nas chamadas, por isso sempre ordená-lo antes de utilização."
  syntax:
    content: public static System.ComponentModel.EventDescriptorCollection GetEvents (object component, Attribute[] attributes);
    parameters:
    - id: component
      type: System.Object
      description: "Um componente de obtenção de eventos para."
    - id: attributes
      type: System.Attribute[]
      description: "Uma matriz do tipo <xref:System.Attribute>que pode utilizar como um filtro.</xref:System.Attribute>"
    return:
      type: System.ComponentModel.EventDescriptorCollection
      description: "Um <xref href=&quot;System.ComponentModel.EventDescriptorCollection&quot;> </xref> com os eventos que correspondem aos atributos especificados para este componente."
  overload: System.ComponentModel.TypeDescriptor.GetEvents*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>é um objeto controlado remotamente processos cruzados."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Boolean)
  id: GetEvents(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetEvents(Object,Boolean)
  nameWithType: TypeDescriptor.GetEvents(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetEvents(Object,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Devolve a recolha de eventos para um componente especificado com um descritor de tipo personalizado."
  remarks: "Este método obtém uma recolha de eventos do que o indicado `component` fornece de instância de parâmetro. Isto pode ser diferente do conjunto de eventos que a classe fornece. Se o `component` sited do parâmetro, o site pode adicionar ou remover eventos adicionais.       Se `component` é `null`, é devolvida uma coleção vazia.       A ordem da coleção devolvida não é assegurada para ser idênticos nas chamadas, por isso sempre ordená-lo antes de utilização."
  syntax:
    content: public static System.ComponentModel.EventDescriptorCollection GetEvents (object component, bool noCustomTypeDesc);
    parameters:
    - id: component
      type: System.Object
      description: "Um componente de obtenção de eventos para."
    - id: noCustomTypeDesc
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>considerar as informações de descrição do tipo personalizado; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.ComponentModel.EventDescriptorCollection
      description: "Um <xref href=&quot;System.ComponentModel.EventDescriptorCollection&quot;> </xref> com os eventos para este componente."
  overload: System.ComponentModel.TypeDescriptor.GetEvents*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>é um objeto controlado remotamente processos cruzados."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetEvents(System.Type,System.Attribute[])
  id: GetEvents(System.Type,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetEvents(Type,Attribute[])
  nameWithType: TypeDescriptor.GetEvents(Type,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.GetEvents(Type,Attribute[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Devolve a recolha de eventos para um tipo de componente com uma matriz de atributos especificada como um filtro especificado."
  remarks: "Chame esta versão deste método apenas quando não tiver uma instância do objeto.       O `attributes` matriz dos parâmetros pode ter uma mistura de <xref:System.Type>e <xref:System.Attribute>objetos.</xref:System.Attribute> </xref:System.Type> Filtragem é definida pelas seguintes regras: - um <xref:System.Type>é tratado como um caráter universal; corresponde a qualquer evento que tenha o <xref:System.Type>no respetivo conjunto de atributos.</xref:System.Type> </xref:System.Type>      -Se um evento não tem um <xref:System.Attribute>da mesma classe, o evento não está incluído na matriz devolvida.</xref:System.Attribute>      -Se o atributo é uma instância do <xref:System.Attribute>classe, o evento tem de ser uma correspondência exata ou não está incluído na matriz devolvida.</xref:System.Attribute>      -Se um <xref:System.Attribute>instância for especificada e é o evento de predefinição, está incluído na matriz devolvida, mesmo se não houver nenhuma instância do <xref:System.Attribute>nos eventos.</xref:System.Attribute> </xref:System.Attribute>       Se o `componentType` parâmetro é `null`, é devolvida uma coleção vazia.       A ordem da coleção devolvida não é assegurada para ser idênticos nas chamadas, por isso sempre ordená-lo antes de utilização."
  syntax:
    content: public static System.ComponentModel.EventDescriptorCollection GetEvents (Type componentType, Attribute[] attributes);
    parameters:
    - id: componentType
      type: System.Type
      description: "O <xref:System.Type>do componente de destino.</xref:System.Type>"
    - id: attributes
      type: System.Attribute[]
      description: "Uma matriz do tipo <xref:System.Attribute>que pode utilizar como um filtro.</xref:System.Attribute>"
    return:
      type: System.ComponentModel.EventDescriptorCollection
      description: "Um <xref href=&quot;System.ComponentModel.EventDescriptorCollection&quot;> </xref> com os eventos que correspondem aos atributos especificados para este componente."
  overload: System.ComponentModel.TypeDescriptor.GetEvents*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[],System.Boolean)
  id: GetEvents(System.Object,System.Attribute[],System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetEvents(Object,Attribute[],Boolean)
  nameWithType: TypeDescriptor.GetEvents(Object,Attribute[],Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetEvents(Object,Attribute[],Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Devolve a recolha de eventos para um componente especificado através de uma matriz de atributos especificada como um filtro e utilizar um descritor de tipo personalizado."
  remarks: "Os eventos para o `component` parâmetro pode ser diferente dos eventos de uma classe, porque o site pode adicionar ou remover os eventos se os `component` sited do parâmetro.       O `attributes` matriz dos parâmetros pode ter uma mistura de <xref:System.Type>e <xref:System.Attribute>objetos.</xref:System.Attribute> </xref:System.Type> Filtragem é definida pelas seguintes regras: - um <xref:System.Type>é tratado como um caráter universal; corresponde a qualquer evento que tenha o <xref:System.Type>no respetivo conjunto de atributos.</xref:System.Type> </xref:System.Type>      -Se um evento não tem um <xref:System.Attribute>da mesma classe, o evento não está incluído na matriz devolvida.</xref:System.Attribute>      -Se o atributo é uma instância do <xref:System.Attribute>classe, o evento tem de ser uma correspondência exata ou não está incluído na matriz devolvida.</xref:System.Attribute>      -Se um <xref:System.Attribute>instância for especificada e é o evento de predefinição, está incluído na matriz devolvida, mesmo se não houver nenhuma instância do <xref:System.Attribute>nos eventos.</xref:System.Attribute> </xref:System.Attribute>       Se `component` é `null`, é devolvida uma coleção vazia.       A ordem da coleção devolvida não é assegurada para ser idênticos nas chamadas, por isso sempre ordená-lo antes de utilização."
  syntax:
    content: public static System.ComponentModel.EventDescriptorCollection GetEvents (object component, Attribute[] attributes, bool noCustomTypeDesc);
    parameters:
    - id: component
      type: System.Object
      description: "Um componente de obtenção de eventos para."
    - id: attributes
      type: System.Attribute[]
      description: "Uma matriz do tipo <xref:System.Attribute>para utilizar como um filtro.</xref:System.Attribute>"
    - id: noCustomTypeDesc
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>considerar as informações de descrição do tipo personalizado; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.ComponentModel.EventDescriptorCollection
      description: "Um <xref href=&quot;System.ComponentModel.EventDescriptorCollection&quot;> </xref> com os eventos que correspondem aos atributos especificados para este componente."
  overload: System.ComponentModel.TypeDescriptor.GetEvents*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>é um objeto controlado remotamente processos cruzados."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetFullComponentName(System.Object)
  id: GetFullComponentName(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetFullComponentName(Object)
  nameWithType: TypeDescriptor.GetFullComponentName(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetFullComponentName(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Devolve o nome completamente qualificado do componente."
  remarks: "Em muitos casos, o método GetFullComponentName irá devolver o mesmo valor que o <xref:System.ComponentModel.TypeDescriptor.GetComponentName%2A>método.</xref:System.ComponentModel.TypeDescriptor.GetComponentName%2A> No entanto, se o componente reside num contentor aninhado ou tem outras semânticas aninhadas, pode devolver um nome completamente qualificado diferente."
  syntax:
    content: public static string GetFullComponentName (object component);
    parameters:
    - id: component
      type: System.Object
      description: "O <xref href=&quot;System.ComponentModel.Component&quot;> </xref> para localizar o nome de."
    return:
      type: System.String
      description: "O nome completamente qualificado do componente especificado, ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se o componente não tem nome."
  overload: System.ComponentModel.TypeDescriptor.GetFullComponentName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetProperties(System.Object)
  id: GetProperties(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetProperties(Object)
  nameWithType: TypeDescriptor.GetProperties(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetProperties(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Devolve o conjunto de propriedades para um componente especificado."
  remarks: "As propriedades de um componente podem ser diferente das propriedades de uma classe, porque o site pode adicionar ou remover propriedades se o componente está sited.       Se o `component` parâmetro é `null`, é devolvida uma coleção vazia.       A ordem da coleção devolvida não é assegurada para ser idênticos nas chamadas, por isso sempre ordená-lo antes de utilização."
  example:
  - "The following code example demonstrates the use of the GetProperties method to access the properties of a control. This code example is part of a larger example provided for the <xref:System.ComponentModel.Design.ComponentDesigner> class.  \n  \n [!code-vb[System.ComponentModel.Design.DesignerServices#8](~/add/codesnippet/visualbasic/m-system.componentmodel._38_1.vb)]\n [!code-cs[System.ComponentModel.Design.DesignerServices#8](~/add/codesnippet/csharp/m-system.componentmodel._38_1.cs)]"
  syntax:
    content: public static System.ComponentModel.PropertyDescriptorCollection GetProperties (object component);
    parameters:
    - id: component
      type: System.Object
      description: "Um componente para obter as propriedades."
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "A <xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;> </xref> com as propriedades do componente especificado."
  overload: System.ComponentModel.TypeDescriptor.GetProperties*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>é um objeto controlado remotamente processos cruzados."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetProperties(System.Type)
  id: GetProperties(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetProperties(Type)
  nameWithType: TypeDescriptor.GetProperties(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetProperties(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Devolve o conjunto de propriedades para um tipo de componente especificado."
  remarks: "Chame esta versão deste método apenas quando não tiver uma instância do objeto.       Se o `componentType` parâmetro é `null`, é devolvida uma coleção vazia.       A ordem da coleção devolvida não é assegurada para ser idênticos nas chamadas, por isso sempre ordená-lo antes de utilização."
  syntax:
    content: public static System.ComponentModel.PropertyDescriptorCollection GetProperties (Type componentType);
    parameters:
    - id: componentType
      type: System.Type
      description: "Um <xref:System.Type>que representa o componente obter for. de propriedades</xref:System.Type>"
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "A <xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;> </xref> com as propriedades de um tipo de componente especificado."
  overload: System.ComponentModel.TypeDescriptor.GetProperties*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[])
  id: GetProperties(System.Object,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetProperties(Object,Attribute[])
  nameWithType: TypeDescriptor.GetProperties(Object,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.GetProperties(Object,Attribute[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Devolve o conjunto de propriedades para um componente especificado através de uma matriz de atributos especificada como um filtro."
  remarks: "As propriedades para o `component` parâmetro pode ser diferente das propriedades de uma classe, porque o site pode adicionar ou remover propriedades se o `component` sited do parâmetro.       O `attributes` matriz de parâmetros é utilizada para filtrar a matriz. Filtragem é definida pelas seguintes regras: - se de uma propriedade não tem um <xref:System.Attribute>da mesma classe, a propriedade não está incluída na matriz devolvida.</xref:System.Attribute>      -Se o atributo é uma instância do <xref:System.Attribute>classe, a propriedade tem de ser uma correspondência exata ou não está incluído na matriz devolvida.</xref:System.Attribute>      -Se um <xref:System.Attribute>instância for especificada e é a propriedade predefinida, que está incluída na matriz devolvida, mesmo se não houver nenhuma instância do <xref:System.Attribute>na propriedade.</xref:System.Attribute> </xref:System.Attribute>      -Se `attributes` tem um atributo predefinido, GetProperties método corresponde o caso, quando a propriedade não tem o atributo aplicado.       Se `component` é `null`, é devolvida uma coleção vazia.       A ordem da coleção devolvida não é assegurada para ser idênticos nas chamadas, por isso sempre ordená-lo antes de utilização."
  example:
  - "The following code example demonstrates how to implement the <xref:System.Windows.Forms.Design.PropertyTab.GetProperties%2A> method. This code example is part of a larger example provided for the <xref:System.Windows.Forms.Design.PropertyTab> class.  \n  \n [!code-cs[PropertyTabExample#2](~/add/codesnippet/csharp/0d160e65-8e23-4623-ad72-_1.cs)]\n [!code-cpp[PropertyTabExample#2](~/add/codesnippet/cpp/0d160e65-8e23-4623-ad72-_1.cpp)]\n [!code-vb[PropertyTabExample#2](~/add/codesnippet/visualbasic/0d160e65-8e23-4623-ad72-_1.vb)]"
  syntax:
    content: public static System.ComponentModel.PropertyDescriptorCollection GetProperties (object component, Attribute[] attributes);
    parameters:
    - id: component
      type: System.Object
      description: "Um componente para obter as propriedades."
    - id: attributes
      type: System.Attribute[]
      description: "Uma matriz do tipo <xref:System.Attribute>para utilizar como um filtro.</xref:System.Attribute>"
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "A <xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;> </xref> com as propriedades que correspondem aos atributos especificados para o componente especificado."
  overload: System.ComponentModel.TypeDescriptor.GetProperties*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>é um objeto controlado remotamente processos cruzados."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Boolean)
  id: GetProperties(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetProperties(Object,Boolean)
  nameWithType: TypeDescriptor.GetProperties(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetProperties(Object,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Devolve o conjunto de propriedades para um componente especificado utilizando o descritor de tipo predefinido."
  remarks: "As propriedades para o `component` parâmetro pode ser diferente das propriedades de uma classe, porque o site pode adicionar ou remover propriedades se o `component` sited do parâmetro.       Se `component` é `null`, é devolvida uma coleção vazia.       A ordem da coleção devolvida não é assegurada para ser idênticos nas chamadas, por isso sempre ordená-lo antes de utilização."
  syntax:
    content: public static System.ComponentModel.PropertyDescriptorCollection GetProperties (object component, bool noCustomTypeDesc);
    parameters:
    - id: component
      type: System.Object
      description: "Um componente para obter as propriedades."
    - id: noCustomTypeDesc
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>não considerar as informações de descrição do tipo personalizado; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "A <xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;> </xref> com as propriedades de um componente especificado."
  overload: System.ComponentModel.TypeDescriptor.GetProperties*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>é um objeto controlado remotamente processos cruzados."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetProperties(System.Type,System.Attribute[])
  id: GetProperties(System.Type,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetProperties(Type,Attribute[])
  nameWithType: TypeDescriptor.GetProperties(Type,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.GetProperties(Type,Attribute[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Devolve o conjunto de propriedades para um tipo de componente utilizando uma matriz de atributos especificada como um filtro especificado."
  remarks: "Chame esta versão deste método apenas quando não tiver uma instância do objeto.       O `attributes` matriz de parâmetros é utilizada para filtrar a matriz. Filtragem é definida pelas seguintes regras: - se de uma propriedade não tem um <xref:System.Attribute>da mesma classe, a propriedade não está incluída na matriz devolvida.</xref:System.Attribute>      -Se o atributo é uma instância do <xref:System.Attribute>classe, a propriedade tem de ser uma correspondência exata ou não está incluído na matriz devolvida.</xref:System.Attribute>      -Se um <xref:System.Attribute>instância for especificada e é a propriedade predefinida, que está incluída na matriz devolvida, mesmo se não houver nenhuma instância do <xref:System.Attribute>na propriedade.</xref:System.Attribute> </xref:System.Attribute>      -Se `attributes` tem um atributo predefinido, GetProperties método corresponde o caso, quando a propriedade não tem o atributo aplicado.       Se o `componentType` parâmetro é `null`, é devolvida uma coleção vazia.       A ordem da coleção devolvida não é assegurada para ser idênticos nas chamadas, por isso sempre ordená-lo antes de utilização."
  example:
  - "The following code example demonstrates how to implement the <xref:System.Windows.Forms.Design.PropertyTab.GetProperties%2A> method. This code example is part of a larger example provided for the <xref:System.Windows.Forms.Design.PropertyTab> class.  \n  \n [!code-cs[PropertyTabExample#2](~/add/codesnippet/csharp/af245915-0d17-4307-99bf-_1.cs)]\n [!code-cpp[PropertyTabExample#2](~/add/codesnippet/cpp/af245915-0d17-4307-99bf-_1.cpp)]\n [!code-vb[PropertyTabExample#2](~/add/codesnippet/visualbasic/af245915-0d17-4307-99bf-_1.vb)]"
  syntax:
    content: public static System.ComponentModel.PropertyDescriptorCollection GetProperties (Type componentType, Attribute[] attributes);
    parameters:
    - id: componentType
      type: System.Type
      description: "O <xref:System.Type>do componente de destino.</xref:System.Type>"
    - id: attributes
      type: System.Attribute[]
      description: "Uma matriz do tipo <xref:System.Attribute>para utilizar como um filtro.</xref:System.Attribute>"
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "A <xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;> </xref> o cuja propriedade corresponda os atributos especificados para este tipo de componente."
  overload: System.ComponentModel.TypeDescriptor.GetProperties*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[],System.Boolean)
  id: GetProperties(System.Object,System.Attribute[],System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetProperties(Object,Attribute[],Boolean)
  nameWithType: TypeDescriptor.GetProperties(Object,Attribute[],Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetProperties(Object,Attribute[],Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Devolve o conjunto de propriedades para um componente especificado através de uma matriz de atributos especificada como um filtro e utilizar um descritor de tipo personalizado."
  remarks: "As propriedades de um `component` pode ser diferente das propriedades de uma classe, porque o site pode adicionar ou remover propriedades se o `component` é sited.       O `attributes` matriz de parâmetros é utilizada para filtrar a matriz. Filtragem é definida pelas seguintes regras: - se de uma propriedade não tem um <xref:System.Attribute>da mesma classe, a propriedade não está incluída na matriz devolvida.</xref:System.Attribute>      -Se o atributo é uma instância do <xref:System.Attribute>classe, a propriedade tem de ser uma correspondência exata ou não está incluído na matriz devolvida.</xref:System.Attribute>      -Se um <xref:System.Attribute>instância for especificada e é a propriedade predefinida, que está incluída na matriz devolvida, mesmo se não houver nenhuma instância do <xref:System.Attribute>na propriedade.</xref:System.Attribute> </xref:System.Attribute>      -Se `attributes` tem um atributo predefinido, GetProperties método corresponde o caso, quando a propriedade não tem o atributo aplicado.       Se o `component` parâmetro é `null`, é devolvida uma coleção vazia.       A ordem da coleção devolvida não é assegurada para ser idênticos nas chamadas, por isso sempre ordená-lo antes de utilização."
  syntax:
    content: public static System.ComponentModel.PropertyDescriptorCollection GetProperties (object component, Attribute[] attributes, bool noCustomTypeDesc);
    parameters:
    - id: component
      type: System.Object
      description: "Um componente para obter as propriedades."
    - id: attributes
      type: System.Attribute[]
      description: "Uma matriz do tipo <xref:System.Attribute>para utilizar como um filtro.</xref:System.Attribute>"
    - id: noCustomTypeDesc
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>considerar as informações de descrição do tipo personalizado; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "A <xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;> </xref> com os eventos que correspondem aos atributos especificados para o componente especificado."
  overload: System.ComponentModel.TypeDescriptor.GetProperties*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>é um objeto controlado remotamente processos cruzados."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetProvider(System.Object)
  id: GetProvider(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetProvider(Object)
  nameWithType: TypeDescriptor.GetProvider(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetProvider(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Devolve o fornecedor de descrições de tipo para o componente especificado."
  remarks: "O <xref:System.ComponentModel.TypeDescriptor.GetProvider%2A>método devolverá sempre um fornecedor de descrições de tipo.</xref:System.ComponentModel.TypeDescriptor.GetProvider%2A> Mesmo a predefinição <xref:System.ComponentModel.TypeDescriptor>implementação está incorporada no <xref:System.ComponentModel.TypeDescriptionProvider>.</xref:System.ComponentModel.TypeDescriptionProvider> </xref:System.ComponentModel.TypeDescriptor>"
  syntax:
    content: public static System.ComponentModel.TypeDescriptionProvider GetProvider (object instance);
    parameters:
    - id: instance
      type: System.Object
      description: "Uma instância do componente de destino."
    return:
      type: System.ComponentModel.TypeDescriptionProvider
      description: "A <xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;> </xref> associadas com o componente especificado."
  overload: System.ComponentModel.TypeDescriptor.GetProvider*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>instance</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetProvider(System.Type)
  id: GetProvider(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetProvider(Type)
  nameWithType: TypeDescriptor.GetProvider(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetProvider(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Devolve o fornecedor de descrições de tipo para o tipo especificado."
  remarks: "O <xref:System.ComponentModel.TypeDescriptor.GetProvider%2A>método devolverá sempre um fornecedor de descrições de tipo.</xref:System.ComponentModel.TypeDescriptor.GetProvider%2A> Mesmo a predefinição <xref:System.ComponentModel.TypeDescriptor>implementação está incorporada no <xref:System.ComponentModel.TypeDescriptionProvider>.</xref:System.ComponentModel.TypeDescriptionProvider> </xref:System.ComponentModel.TypeDescriptor>"
  syntax:
    content: public static System.ComponentModel.TypeDescriptionProvider GetProvider (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "O <xref:System.Type>do componente de destino.</xref:System.Type>"
    return:
      type: System.ComponentModel.TypeDescriptionProvider
      description: "A <xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;> </xref> associados com o tipo especificado."
  overload: System.ComponentModel.TypeDescriptor.GetProvider*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetReflectionType(System.Object)
  id: GetReflectionType(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetReflectionType(Object)
  nameWithType: TypeDescriptor.GetReflectionType(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetReflectionType(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Devolve um <xref:System.Type>que podem ser utilizados para efetuar reflexão, um objeto especificado.</xref:System.Type>"
  remarks: "O <xref:System.ComponentModel.TypeDescriptor.GetReflectionType%2A>método é uma versão de nível baixo de <xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A>método.</xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A> </xref:System.ComponentModel.TypeDescriptor.GetReflectionType%2A> <xref:System.ComponentModel.TypeDescriptor.GetReflectionType%2A>Normalmente, é utilizada para efetuar reflexão padrão em relação a um objeto quando não descritor de tipo personalizado pode ser localizado para o mesmo.</xref:System.ComponentModel.TypeDescriptor.GetReflectionType%2A>"
  syntax:
    content: public static Type GetReflectionType (object instance);
    parameters:
    - id: instance
      type: System.Object
      description: "Uma instância do componente de destino."
    return:
      type: System.Type
      description: "A <xref:System.Type>para o objeto especificado.</xref:System.Type>"
  overload: System.ComponentModel.TypeDescriptor.GetReflectionType*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>instance</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetReflectionType(System.Type)
  id: GetReflectionType(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetReflectionType(Type)
  nameWithType: TypeDescriptor.GetReflectionType(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetReflectionType(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Devolve um <xref:System.Type>que podem ser utilizados para efetuar reflexão, um tipo de classe indicado.</xref:System.Type>"
  remarks: "O <xref:System.ComponentModel.TypeDescriptor.GetReflectionType%2A>método é uma versão de nível baixo de <xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A>método.</xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A> </xref:System.ComponentModel.TypeDescriptor.GetReflectionType%2A> <xref:System.ComponentModel.TypeDescriptor.GetReflectionType%2A>Normalmente, é utilizada para efetuar reflexão padrão em relação a uma classe quando não descritor de tipo personalizado pode ser localizado para o mesmo.</xref:System.ComponentModel.TypeDescriptor.GetReflectionType%2A>"
  syntax:
    content: public static Type GetReflectionType (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "O <xref:System.Type>do componente de destino.</xref:System.Type>"
    return:
      type: System.Type
      description: "Um <xref:System.Type>de classe especificado.</xref:System.Type>"
  overload: System.ComponentModel.TypeDescriptor.GetReflectionType*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.InterfaceType
  id: InterfaceType
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: InterfaceType
  nameWithType: TypeDescriptor.InterfaceType
  fullName: System.ComponentModel.TypeDescriptor.InterfaceType
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Obtém um tipo que representa um fornecedor de descrições de tipo para todos os tipos de interface."
  remarks: "Obtém de propriedade InterfaceType um <xref:System.Type>objeto pode passar para o <xref:System.ComponentModel.TypeDescriptor.AddProvider%2A>métodos para definir um fornecedor de descrições de tipo para tipos de interface.</xref:System.ComponentModel.TypeDescriptor.AddProvider%2A> </xref:System.Type>"
  syntax:
    content: public static Type InterfaceType { get; }
    return:
      type: System.Type
      description: "A <xref:System.Type>que representa um fornecedor de descrições de tipo personalizado para todos os tipos de interface.</xref:System.Type>"
  overload: System.ComponentModel.TypeDescriptor.InterfaceType*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.Refresh(System.Object)
  id: Refresh(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: Refresh(Object)
  nameWithType: TypeDescriptor.Refresh(Object)
  fullName: System.ComponentModel.TypeDescriptor.Refresh(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Limpa as propriedades e eventos para o componente especificado da cache."
  remarks: "Propriedades e os eventos são colocadas em cache por <xref:System.ComponentModel.TypeDescriptor>para a velocidade de.</xref:System.ComponentModel.TypeDescriptor> Normalmente, são constantes para a duração de um objeto. No entanto, os fornecedores de extensão e designers podem alterar o conjunto de propriedades de um objeto. Caso contrário, estas devem chamar este método para limpar os descritores de propriedade e o evento do objeto. Este método é utilizado apenas no momento da concepção. Não é utilizado durante o tempo de execução.       Este método também gera uma <xref:System.ComponentModel.TypeDescriptor.Refreshed>evento quando alterar as propriedades ou eventos de um componente.</xref:System.ComponentModel.TypeDescriptor.Refreshed> Este evento apenas é gerado se tiver ocorrido uma chamada anterior para o <xref:System.ComponentModel.TypeDescriptor.GetProperties%2A>ou <xref:System.ComponentModel.TypeDescriptor.GetEvents%2A>método que as informações colocadas em cache.</xref:System.ComponentModel.TypeDescriptor.GetEvents%2A> </xref:System.ComponentModel.TypeDescriptor.GetProperties%2A>"
  example:
  - For an example of using this method, see the <xref:System.ComponentModel.RefreshEventHandler> class.
  syntax:
    content: public static void Refresh (object component);
    parameters:
    - id: component
      type: System.Object
      description: "Um componente para o qual as propriedades ou eventos foram alterados."
  overload: System.ComponentModel.TypeDescriptor.Refresh*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Assembly)
  id: Refresh(System.Reflection.Assembly)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: Refresh(Assembly)
  nameWithType: TypeDescriptor.Refresh(Assembly)
  fullName: System.ComponentModel.TypeDescriptor.Refresh(Assembly)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Limpa os eventos e propriedades para a assemblagem da cache especificada."
  remarks: "Propriedades e os eventos são colocadas em cache por <xref:System.ComponentModel.TypeDescriptor>para a velocidade de.</xref:System.ComponentModel.TypeDescriptor> Normalmente, são constantes para a duração de um objeto. No entanto, os fornecedores de extensão e designers podem alterar o conjunto de propriedades de um objeto. Caso contrário, estes podem chamar este método para limpar os descritores de propriedade e o evento do objeto. Este método é utilizado apenas no momento da concepção. Não é utilizado durante o tempo de execução.       Antes de efetuar uma chamada para o <xref:System.ComponentModel.TypeDescriptor.Refresh%2A>método para limpar a cache, tem de chamar o <xref:System.ComponentModel.TypeDescriptor.GetProperties%2A>método para a assemblagem específico em cache as informações primeiro.</xref:System.ComponentModel.TypeDescriptor.GetProperties%2A> </xref:System.ComponentModel.TypeDescriptor.Refresh%2A>       Este método também gera uma <xref:System.ComponentModel.TypeDescriptor.Refreshed>eventos para o notificar todas as classes que pretendem ser notificado quando a propriedade de conjunto de alterações de componente.</xref:System.ComponentModel.TypeDescriptor.Refreshed>"
  syntax:
    content: public static void Refresh (System.Reflection.Assembly assembly);
    parameters:
    - id: assembly
      type: System.Reflection.Assembly
      description: "O <xref:System.Reflection.Assembly>que representa a assemblagem para atualizar.</xref:System.Reflection.Assembly> Cada <xref:System.Type>esta assemblagem serão atualizadas.</xref:System.Type>"
  overload: System.ComponentModel.TypeDescriptor.Refresh*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Module)
  id: Refresh(System.Reflection.Module)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: Refresh(Module)
  nameWithType: TypeDescriptor.Refresh(Module)
  fullName: System.ComponentModel.TypeDescriptor.Refresh(Module)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Limpa as propriedades e eventos para o módulo especificado da cache."
  remarks: "Propriedades e os eventos são colocadas em cache por <xref:System.ComponentModel.TypeDescriptor>para a velocidade de.</xref:System.ComponentModel.TypeDescriptor> Normalmente, são constantes para a duração de um objeto. No entanto, os fornecedores de extensão e designers podem alterar o conjunto de propriedades de um objeto. Caso contrário, estes podem chamar este método para limpar os descritores de propriedade e o evento do objeto. Este método é utilizado apenas no momento da concepção. Não é utilizado durante o tempo de execução.       Antes de efetuar uma chamada para o <xref:System.ComponentModel.TypeDescriptor.Refresh%2A>método para limpar a cache, tem de chamar o <xref:System.ComponentModel.TypeDescriptor.GetProperties%2A>método para o módulo específico em cache as informações primeiro.</xref:System.ComponentModel.TypeDescriptor.GetProperties%2A> </xref:System.ComponentModel.TypeDescriptor.Refresh%2A>       Este método também gera uma <xref:System.ComponentModel.TypeDescriptor.Refreshed>eventos para o notificar todas as classes que pretendem ser notificado quando a propriedade de conjunto de alterações de componente.</xref:System.ComponentModel.TypeDescriptor.Refreshed>"
  syntax:
    content: public static void Refresh (System.Reflection.Module module);
    parameters:
    - id: module
      type: System.Reflection.Module
      description: "O <xref:System.Reflection.Module>que representa o módulo para atualizar.</xref:System.Reflection.Module> Cada <xref:System.Type>neste módulo será atualizada.</xref:System.Type>"
  overload: System.ComponentModel.TypeDescriptor.Refresh*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.Refresh(System.Type)
  id: Refresh(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: Refresh(Type)
  nameWithType: TypeDescriptor.Refresh(Type)
  fullName: System.ComponentModel.TypeDescriptor.Refresh(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Limpa as propriedades e eventos para o tipo de componente da cache especificado."
  remarks: "Chame esta versão deste método apenas quando não tiver uma instância do objeto.       Propriedades e os eventos são colocadas em cache por <xref:System.ComponentModel.TypeDescriptor>para a velocidade de.</xref:System.ComponentModel.TypeDescriptor> Normalmente, são constantes para a duração de um objeto. No entanto, os fornecedores de extensão e designers podem alterar o conjunto de propriedades de um objeto. Caso contrário, estes podem chamar este método para limpar os descritores de propriedade e o evento do objeto. Este método é utilizado apenas no momento da concepção. Não é utilizado durante o tempo de execução.       Este método também gera uma <xref:System.ComponentModel.TypeDescriptor.Refreshed>evento quando alterar as propriedades ou eventos de um componente.</xref:System.ComponentModel.TypeDescriptor.Refreshed> Este evento apenas é gerado se tiver ocorrido uma chamada anterior para o <xref:System.ComponentModel.TypeDescriptor.GetProperties%2A>ou <xref:System.ComponentModel.TypeDescriptor.GetEvents%2A>método que as informações colocadas em cache.</xref:System.ComponentModel.TypeDescriptor.GetEvents%2A> </xref:System.ComponentModel.TypeDescriptor.GetProperties%2A>"
  syntax:
    content: public static void Refresh (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "O <xref:System.Type>do componente de destino.</xref:System.Type>"
  overload: System.ComponentModel.TypeDescriptor.Refresh*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.Refreshed
  id: Refreshed
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: Refreshed
  nameWithType: TypeDescriptor.Refreshed
  fullName: System.ComponentModel.TypeDescriptor.Refreshed
  type: Event
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Ocorre quando a cache de um componente está desmarcada."
  remarks: 'Para obter mais informações sobre como lidar com eventos, consulte [NIB: consumir eventos](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).'
  example:
  - For an example of using this event, see the <xref:System.ComponentModel.RefreshEventHandler> class.
  syntax:
    content: public static event System.ComponentModel.RefreshEventHandler Refreshed;
    return:
      type: System.ComponentModel.RefreshEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.RemoveAssociation(System.Object,System.Object)
  id: RemoveAssociation(System.Object,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: RemoveAssociation(Object,Object)
  nameWithType: TypeDescriptor.RemoveAssociation(Object,Object)
  fullName: System.ComponentModel.TypeDescriptor.RemoveAssociation(Object,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Remove uma associação entre dois objetos."
  remarks: "O método RemoveAssociation remove uma associação entre dois objetos formado pelo <xref:System.ComponentModel.TypeDescriptor.CreateAssociation%2A>método.</xref:System.ComponentModel.TypeDescriptor.CreateAssociation%2A>       A <xref:System.WeakReference>é utilizado para manter a associação entre o objeto principal e secundário; por conseguinte, este método não influenciar quando o objeto está finalizado ou recuperado através da recolha de lixo.</xref:System.WeakReference>"
  syntax:
    content: public static void RemoveAssociation (object primary, object secondary);
    parameters:
    - id: primary
      type: System.Object
      description: "O principal <xref:System.Object>.</xref:System.Object>"
    - id: secondary
      type: System.Object
      description: "O elemento secundário <xref:System.Object>.</xref:System.Object>"
  overload: System.ComponentModel.TypeDescriptor.RemoveAssociation*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Um ou ambos os parâmetros são <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.RemoveAssociations(System.Object)
  id: RemoveAssociations(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: RemoveAssociations(Object)
  nameWithType: TypeDescriptor.RemoveAssociations(Object)
  fullName: System.ComponentModel.TypeDescriptor.RemoveAssociations(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Remove todas as associações de um objeto principal."
  remarks: "O método RemoveAssociations remove todas as associações entre um objeto principal e todos os seus objetos secundários, criados por chamadas para o <xref:System.ComponentModel.TypeDescriptor.CreateAssociation%2A>método.</xref:System.ComponentModel.TypeDescriptor.CreateAssociation%2A>       A <xref:System.WeakReference>é utilizado para manter a associação entre o objeto principal e secundário; por conseguinte, este método não influenciar quando primário dos objetos secundários são finalizada ou recuperados através da recolha de lixo.</xref:System.WeakReference>"
  syntax:
    content: public static void RemoveAssociations (object primary);
    parameters:
    - id: primary
      type: System.Object
      description: "O principal <xref:System.Object>numa associação de uma.</xref:System.Object>"
  overload: System.ComponentModel.TypeDescriptor.RemoveAssociations*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>primary</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)
  id: RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: RemoveProvider(TypeDescriptionProvider,Object)
  nameWithType: TypeDescriptor.RemoveProvider(TypeDescriptionProvider,Object)
  fullName: System.ComponentModel.TypeDescriptor.RemoveProvider(TypeDescriptionProvider,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Remove um fornecedor de descrição do tipo anteriormente adicionado que está associado ao objeto especificado."
  remarks: "Este método Remove um fornecedor de descrições de tipo adicionado anteriormente com o <xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29>método.</xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29> A remoção de um fornecedor faz com que um <xref:System.ComponentModel.TypeDescriptor.Refreshed>evento gerado para o objeto associado.</xref:System.ComponentModel.TypeDescriptor.Refreshed>       Utilize o <xref:System.ComponentModel.TypeDescriptor.RemoveProviderTransparent%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29>método se tiver de chamar a partir do código parcialmente fidedigno.</xref:System.ComponentModel.TypeDescriptor.RemoveProviderTransparent%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29>"
  syntax:
    content: public static void RemoveProvider (System.ComponentModel.TypeDescriptionProvider provider, object instance);
    parameters:
    - id: provider
      type: System.ComponentModel.TypeDescriptionProvider
      description: "O <xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;> </xref> para remover."
    - id: instance
      type: System.Object
      description: "Uma instância do componente de destino."
  overload: System.ComponentModel.TypeDescriptor.RemoveProvider*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Um ou ambos os parâmetros são <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)
  id: RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: RemoveProvider(TypeDescriptionProvider,Type)
  nameWithType: TypeDescriptor.RemoveProvider(TypeDescriptionProvider,Type)
  fullName: System.ComponentModel.TypeDescriptor.RemoveProvider(TypeDescriptionProvider,Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Remove um fornecedor de descrições de tipo anteriormente adicionados que estão associado com o tipo especificado."
  remarks: "Este método Remove um fornecedor de descrições de tipo adicionado anteriormente com o <xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>método.</xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29> A remoção de um fornecedor faz com que um <xref:System.ComponentModel.TypeDescriptor.Refreshed>evento gerado para o tipo associado.</xref:System.ComponentModel.TypeDescriptor.Refreshed>       Utilize o <xref:System.ComponentModel.TypeDescriptor.RemoveProviderTransparent%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>método se tiver de chamar a partir do código parcialmente fidedigno.</xref:System.ComponentModel.TypeDescriptor.RemoveProviderTransparent%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>"
  syntax:
    content: public static void RemoveProvider (System.ComponentModel.TypeDescriptionProvider provider, Type type);
    parameters:
    - id: provider
      type: System.ComponentModel.TypeDescriptionProvider
      description: "O <xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;> </xref> para remover."
    - id: type
      type: System.Type
      description: "O <xref:System.Type>do componente de destino.</xref:System.Type>"
  overload: System.ComponentModel.TypeDescriptor.RemoveProvider*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Um ou ambos os parâmetros são <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)
  id: RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: RemoveProviderTransparent(TypeDescriptionProvider,Object)
  nameWithType: TypeDescriptor.RemoveProviderTransparent(TypeDescriptionProvider,Object)
  fullName: System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(TypeDescriptionProvider,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Remove um fornecedor de descrição do tipo anteriormente adicionado que está associado ao objeto especificado."
  remarks: "Este método Remove um fornecedor de descrições de tipo adicionado anteriormente com o <xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29>método.</xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29> A remoção de um fornecedor faz com que um <xref:System.ComponentModel.TypeDescriptor.Refreshed>evento gerado para o objeto associado.</xref:System.ComponentModel.TypeDescriptor.Refreshed>       Este método pode ser chamado a partir do código parcialmente fidedigno. Se <xref:System.Security.Permissions.TypeDescriptorPermissionFlags>está definido, o autor da chamada pode registar um fornecedor para a instância especificada se o respetivo tipo também é parcialmente fidedigno.</xref:System.Security.Permissions.TypeDescriptorPermissionFlags>       Utilize o <xref:System.ComponentModel.TypeDescriptor.RemoveProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29>método se não for necessário chamar a partir do código parcialmente fidedigno.</xref:System.ComponentModel.TypeDescriptor.RemoveProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29>"
  syntax:
    content: public static void RemoveProviderTransparent (System.ComponentModel.TypeDescriptionProvider provider, object instance);
    parameters:
    - id: provider
      type: System.ComponentModel.TypeDescriptionProvider
      description: "O <xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;> </xref> para remover."
    - id: instance
      type: System.Object
      description: "Uma instância do componente de destino."
  overload: System.ComponentModel.TypeDescriptor.RemoveProviderTransparent*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Um ou ambos os parâmetros são <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)
  id: RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: RemoveProviderTransparent(TypeDescriptionProvider,Type)
  nameWithType: TypeDescriptor.RemoveProviderTransparent(TypeDescriptionProvider,Type)
  fullName: System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(TypeDescriptionProvider,Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Remove um fornecedor de descrições de tipo anteriormente adicionados que estão associado com o tipo especificado."
  remarks: "Este método Remove um fornecedor de descrições de tipo adicionado anteriormente com o <xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>método.</xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29> A remoção de um fornecedor faz com que um <xref:System.ComponentModel.TypeDescriptor.Refreshed>evento gerado para o tipo associado.</xref:System.ComponentModel.TypeDescriptor.Refreshed>       Este método pode ser chamado a partir do código parcialmente fidedigno. Se <xref:System.Security.Permissions.TypeDescriptorPermissionFlags>está definido, o autor da chamada pode anular o registo de um fornecedor para o tipo especificado se também é parcialmente fidedigna.</xref:System.Security.Permissions.TypeDescriptorPermissionFlags>       Utilize o <xref:System.ComponentModel.TypeDescriptor.RemoveProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>método se não for necessário chamar a partir do código parcialmente fidedigno.</xref:System.ComponentModel.TypeDescriptor.RemoveProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>"
  syntax:
    content: public static void RemoveProviderTransparent (System.ComponentModel.TypeDescriptionProvider provider, Type type);
    parameters:
    - id: provider
      type: System.ComponentModel.TypeDescriptionProvider
      description: "O <xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;> </xref> para remover."
    - id: type
      type: System.Type
      description: "O <xref:System.Type>do componente de destino.</xref:System.Type>"
  overload: System.ComponentModel.TypeDescriptor.RemoveProviderTransparent*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Um ou ambos os parâmetros são <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.SortDescriptorArray(System.Collections.IList)
  id: SortDescriptorArray(System.Collections.IList)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: SortDescriptorArray(IList)
  nameWithType: TypeDescriptor.SortDescriptorArray(IList)
  fullName: System.ComponentModel.TypeDescriptor.SortDescriptorArray(IList)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Ordena descritores utilizando o nome do descritor do."
  syntax:
    content: public static void SortDescriptorArray (System.Collections.IList infos);
    parameters:
    - id: infos
      type: System.Collections.IList
      description: "Um <xref:System.Collections.IList>que contém os descritores de ordenar.</xref:System.Collections.IList>"
  overload: System.ComponentModel.TypeDescriptor.SortDescriptorArray*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>infos</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ComponentModel.TypeDescriptor.AddAttributes(System.Object,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: AddAttributes(Object,Attribute[])
  nameWithType: TypeDescriptor.AddAttributes(Object,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.AddAttributes(Object,Attribute[])
- uid: System.ComponentModel.TypeDescriptionProvider
  parent: System.ComponentModel
  isExternal: false
  name: TypeDescriptionProvider
  nameWithType: TypeDescriptionProvider
  fullName: System.ComponentModel.TypeDescriptionProvider
- uid: System.Attribute[]
  parent: System
  isExternal: true
  name: Attribute
  nameWithType: Attribute
  fullName: System.Attribute[]
  spec.csharp:
  - uid: System.Attribute
    name: Attribute
    nameWithType: Attribute
    fullName: Attribute[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ComponentModel.TypeDescriptor.AddAttributes(System.Type,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: AddAttributes(Type,Attribute[])
  nameWithType: TypeDescriptor.AddAttributes(Type,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.AddAttributes(Type,Attribute[])
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.ComponentModel.TypeDescriptor.AddEditorTable(System.Type,System.Collections.Hashtable)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: AddEditorTable(Type,Hashtable)
  nameWithType: TypeDescriptor.AddEditorTable(Type,Hashtable)
  fullName: System.ComponentModel.TypeDescriptor.AddEditorTable(Type,Hashtable)
- uid: System.Collections.Hashtable
  parent: System.Collections
  isExternal: false
  name: Hashtable
  nameWithType: Hashtable
  fullName: System.Collections.Hashtable
- uid: System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: AddProvider(TypeDescriptionProvider,Object)
  nameWithType: TypeDescriptor.AddProvider(TypeDescriptionProvider,Object)
  fullName: System.ComponentModel.TypeDescriptor.AddProvider(TypeDescriptionProvider,Object)
- uid: System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: AddProvider(TypeDescriptionProvider,Type)
  nameWithType: TypeDescriptor.AddProvider(TypeDescriptionProvider,Type)
  fullName: System.ComponentModel.TypeDescriptor.AddProvider(TypeDescriptionProvider,Type)
- uid: System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: AddProviderTransparent(TypeDescriptionProvider,Object)
  nameWithType: TypeDescriptor.AddProviderTransparent(TypeDescriptionProvider,Object)
  fullName: System.ComponentModel.TypeDescriptor.AddProviderTransparent(TypeDescriptionProvider,Object)
- uid: System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: AddProviderTransparent(TypeDescriptionProvider,Type)
  nameWithType: TypeDescriptor.AddProviderTransparent(TypeDescriptionProvider,Type)
  fullName: System.ComponentModel.TypeDescriptor.AddProviderTransparent(TypeDescriptionProvider,Type)
- uid: System.ComponentModel.TypeDescriptor.ComNativeDescriptorHandler
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: ComNativeDescriptorHandler
  nameWithType: TypeDescriptor.ComNativeDescriptorHandler
  fullName: System.ComponentModel.TypeDescriptor.ComNativeDescriptorHandler
- uid: System.ComponentModel.IComNativeDescriptorHandler
  parent: System.ComponentModel
  isExternal: false
  name: IComNativeDescriptorHandler
  nameWithType: IComNativeDescriptorHandler
  fullName: System.ComponentModel.IComNativeDescriptorHandler
- uid: System.ComponentModel.TypeDescriptor.ComObjectType
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: ComObjectType
  nameWithType: TypeDescriptor.ComObjectType
  fullName: System.ComponentModel.TypeDescriptor.ComObjectType
- uid: System.ComponentModel.TypeDescriptor.CreateAssociation(System.Object,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: CreateAssociation(Object,Object)
  nameWithType: TypeDescriptor.CreateAssociation(Object,Object)
  fullName: System.ComponentModel.TypeDescriptor.CreateAssociation(Object,Object)
- uid: System.ComponentModel.TypeDescriptor.CreateDesigner(System.ComponentModel.IComponent,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: CreateDesigner(IComponent,Type)
  nameWithType: TypeDescriptor.CreateDesigner(IComponent,Type)
  fullName: System.ComponentModel.TypeDescriptor.CreateDesigner(IComponent,Type)
- uid: System.ComponentModel.Design.IDesigner
  parent: System.ComponentModel.Design
  isExternal: false
  name: IDesigner
  nameWithType: IDesigner
  fullName: System.ComponentModel.Design.IDesigner
- uid: System.ComponentModel.IComponent
  parent: System.ComponentModel
  isExternal: false
  name: IComponent
  nameWithType: IComponent
  fullName: System.ComponentModel.IComponent
- uid: System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.ComponentModel.EventDescriptor,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: CreateEvent(Type,EventDescriptor,Attribute[])
  nameWithType: TypeDescriptor.CreateEvent(Type,EventDescriptor,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.CreateEvent(Type,EventDescriptor,Attribute[])
- uid: System.ComponentModel.EventDescriptor
  parent: System.ComponentModel
  isExternal: false
  name: EventDescriptor
  nameWithType: EventDescriptor
  fullName: System.ComponentModel.EventDescriptor
- uid: System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.String,System.Type,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: CreateEvent(Type,String,Type,Attribute[])
  nameWithType: TypeDescriptor.CreateEvent(Type,String,Type,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.CreateEvent(Type,String,Type,Attribute[])
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: CreateInstance(IServiceProvider,Type,Type[],Object[])
  nameWithType: TypeDescriptor.CreateInstance(IServiceProvider,Type,Type[],Object[])
  fullName: System.ComponentModel.TypeDescriptor.CreateInstance(IServiceProvider,Type,Type[],Object[])
- uid: System.IServiceProvider
  parent: System
  isExternal: true
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: System.IServiceProvider
- uid: System.Type[]
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type[]
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: Type[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.ComponentModel.PropertyDescriptor,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: CreateProperty(Type,PropertyDescriptor,Attribute[])
  nameWithType: TypeDescriptor.CreateProperty(Type,PropertyDescriptor,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.CreateProperty(Type,PropertyDescriptor,Attribute[])
- uid: System.ComponentModel.PropertyDescriptor
  parent: System.ComponentModel
  isExternal: false
  name: PropertyDescriptor
  nameWithType: PropertyDescriptor
  fullName: System.ComponentModel.PropertyDescriptor
- uid: System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.String,System.Type,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: CreateProperty(Type,String,Type,Attribute[])
  nameWithType: TypeDescriptor.CreateProperty(Type,String,Type,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.CreateProperty(Type,String,Type,Attribute[])
- uid: System.ComponentModel.TypeDescriptor.GetAssociation(System.Type,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetAssociation(Type,Object)
  nameWithType: TypeDescriptor.GetAssociation(Type,Object)
  fullName: System.ComponentModel.TypeDescriptor.GetAssociation(Type,Object)
- uid: System.ComponentModel.TypeDescriptor.GetAttributes(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetAttributes(Object)
  nameWithType: TypeDescriptor.GetAttributes(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetAttributes(Object)
- uid: System.ComponentModel.AttributeCollection
  parent: System.ComponentModel
  isExternal: false
  name: AttributeCollection
  nameWithType: AttributeCollection
  fullName: System.ComponentModel.AttributeCollection
- uid: System.ComponentModel.TypeDescriptor.GetAttributes(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetAttributes(Type)
  nameWithType: TypeDescriptor.GetAttributes(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetAttributes(Type)
- uid: System.ComponentModel.TypeDescriptor.GetAttributes(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetAttributes(Object,Boolean)
  nameWithType: TypeDescriptor.GetAttributes(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetAttributes(Object,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ComponentModel.TypeDescriptor.GetClassName(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetClassName(Object)
  nameWithType: TypeDescriptor.GetClassName(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetClassName(Object)
- uid: System.ComponentModel.TypeDescriptor.GetClassName(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetClassName(Type)
  nameWithType: TypeDescriptor.GetClassName(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetClassName(Type)
- uid: System.ComponentModel.TypeDescriptor.GetClassName(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetClassName(Object,Boolean)
  nameWithType: TypeDescriptor.GetClassName(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetClassName(Object,Boolean)
- uid: System.ComponentModel.TypeDescriptor.GetComponentName(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetComponentName(Object)
  nameWithType: TypeDescriptor.GetComponentName(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetComponentName(Object)
- uid: System.ComponentModel.TypeDescriptor.GetComponentName(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetComponentName(Object,Boolean)
  nameWithType: TypeDescriptor.GetComponentName(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetComponentName(Object,Boolean)
- uid: System.ComponentModel.TypeDescriptor.GetConverter(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetConverter(Object)
  nameWithType: TypeDescriptor.GetConverter(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetConverter(Object)
- uid: System.ComponentModel.TypeConverter
  parent: System.ComponentModel
  isExternal: false
  name: TypeConverter
  nameWithType: TypeConverter
  fullName: System.ComponentModel.TypeConverter
- uid: System.ComponentModel.TypeDescriptor.GetConverter(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetConverter(Type)
  nameWithType: TypeDescriptor.GetConverter(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetConverter(Type)
- uid: System.ComponentModel.TypeDescriptor.GetConverter(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetConverter(Object,Boolean)
  nameWithType: TypeDescriptor.GetConverter(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetConverter(Object,Boolean)
- uid: System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetDefaultEvent(Object)
  nameWithType: TypeDescriptor.GetDefaultEvent(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetDefaultEvent(Object)
- uid: System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetDefaultEvent(Type)
  nameWithType: TypeDescriptor.GetDefaultEvent(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetDefaultEvent(Type)
- uid: System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetDefaultEvent(Object,Boolean)
  nameWithType: TypeDescriptor.GetDefaultEvent(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetDefaultEvent(Object,Boolean)
- uid: System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetDefaultProperty(Object)
  nameWithType: TypeDescriptor.GetDefaultProperty(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetDefaultProperty(Object)
- uid: System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetDefaultProperty(Type)
  nameWithType: TypeDescriptor.GetDefaultProperty(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetDefaultProperty(Type)
- uid: System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetDefaultProperty(Object,Boolean)
  nameWithType: TypeDescriptor.GetDefaultProperty(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetDefaultProperty(Object,Boolean)
- uid: System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetEditor(Object,Type)
  nameWithType: TypeDescriptor.GetEditor(Object,Type)
  fullName: System.ComponentModel.TypeDescriptor.GetEditor(Object,Type)
- uid: System.ComponentModel.TypeDescriptor.GetEditor(System.Type,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetEditor(Type,Type)
  nameWithType: TypeDescriptor.GetEditor(Type,Type)
  fullName: System.ComponentModel.TypeDescriptor.GetEditor(Type,Type)
- uid: System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetEditor(Object,Type,Boolean)
  nameWithType: TypeDescriptor.GetEditor(Object,Type,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetEditor(Object,Type,Boolean)
- uid: System.ComponentModel.TypeDescriptor.GetEvents(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetEvents(Object)
  nameWithType: TypeDescriptor.GetEvents(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetEvents(Object)
- uid: System.ComponentModel.EventDescriptorCollection
  parent: System.ComponentModel
  isExternal: false
  name: EventDescriptorCollection
  nameWithType: EventDescriptorCollection
  fullName: System.ComponentModel.EventDescriptorCollection
- uid: System.ComponentModel.TypeDescriptor.GetEvents(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetEvents(Type)
  nameWithType: TypeDescriptor.GetEvents(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetEvents(Type)
- uid: System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetEvents(Object,Attribute[])
  nameWithType: TypeDescriptor.GetEvents(Object,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.GetEvents(Object,Attribute[])
- uid: System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetEvents(Object,Boolean)
  nameWithType: TypeDescriptor.GetEvents(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetEvents(Object,Boolean)
- uid: System.ComponentModel.TypeDescriptor.GetEvents(System.Type,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetEvents(Type,Attribute[])
  nameWithType: TypeDescriptor.GetEvents(Type,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.GetEvents(Type,Attribute[])
- uid: System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[],System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetEvents(Object,Attribute[],Boolean)
  nameWithType: TypeDescriptor.GetEvents(Object,Attribute[],Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetEvents(Object,Attribute[],Boolean)
- uid: System.ComponentModel.TypeDescriptor.GetFullComponentName(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetFullComponentName(Object)
  nameWithType: TypeDescriptor.GetFullComponentName(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetFullComponentName(Object)
- uid: System.ComponentModel.TypeDescriptor.GetProperties(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetProperties(Object)
  nameWithType: TypeDescriptor.GetProperties(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetProperties(Object)
- uid: System.ComponentModel.PropertyDescriptorCollection
  parent: System.ComponentModel
  isExternal: false
  name: PropertyDescriptorCollection
  nameWithType: PropertyDescriptorCollection
  fullName: System.ComponentModel.PropertyDescriptorCollection
- uid: System.ComponentModel.TypeDescriptor.GetProperties(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetProperties(Type)
  nameWithType: TypeDescriptor.GetProperties(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetProperties(Type)
- uid: System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetProperties(Object,Attribute[])
  nameWithType: TypeDescriptor.GetProperties(Object,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.GetProperties(Object,Attribute[])
- uid: System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetProperties(Object,Boolean)
  nameWithType: TypeDescriptor.GetProperties(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetProperties(Object,Boolean)
- uid: System.ComponentModel.TypeDescriptor.GetProperties(System.Type,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetProperties(Type,Attribute[])
  nameWithType: TypeDescriptor.GetProperties(Type,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.GetProperties(Type,Attribute[])
- uid: System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[],System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetProperties(Object,Attribute[],Boolean)
  nameWithType: TypeDescriptor.GetProperties(Object,Attribute[],Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetProperties(Object,Attribute[],Boolean)
- uid: System.ComponentModel.TypeDescriptor.GetProvider(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetProvider(Object)
  nameWithType: TypeDescriptor.GetProvider(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetProvider(Object)
- uid: System.ComponentModel.TypeDescriptor.GetProvider(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetProvider(Type)
  nameWithType: TypeDescriptor.GetProvider(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetProvider(Type)
- uid: System.ComponentModel.TypeDescriptor.GetReflectionType(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetReflectionType(Object)
  nameWithType: TypeDescriptor.GetReflectionType(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetReflectionType(Object)
- uid: System.ComponentModel.TypeDescriptor.GetReflectionType(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetReflectionType(Type)
  nameWithType: TypeDescriptor.GetReflectionType(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetReflectionType(Type)
- uid: System.ComponentModel.TypeDescriptor.InterfaceType
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: InterfaceType
  nameWithType: TypeDescriptor.InterfaceType
  fullName: System.ComponentModel.TypeDescriptor.InterfaceType
- uid: System.ComponentModel.TypeDescriptor.Refresh(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: Refresh(Object)
  nameWithType: TypeDescriptor.Refresh(Object)
  fullName: System.ComponentModel.TypeDescriptor.Refresh(Object)
- uid: System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Assembly)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: Refresh(Assembly)
  nameWithType: TypeDescriptor.Refresh(Assembly)
  fullName: System.ComponentModel.TypeDescriptor.Refresh(Assembly)
- uid: System.Reflection.Assembly
  parent: System.Reflection
  isExternal: true
  name: Assembly
  nameWithType: Assembly
  fullName: System.Reflection.Assembly
- uid: System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Module)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: Refresh(Module)
  nameWithType: TypeDescriptor.Refresh(Module)
  fullName: System.ComponentModel.TypeDescriptor.Refresh(Module)
- uid: System.Reflection.Module
  parent: System.Reflection
  isExternal: true
  name: Module
  nameWithType: Module
  fullName: System.Reflection.Module
- uid: System.ComponentModel.TypeDescriptor.Refresh(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: Refresh(Type)
  nameWithType: TypeDescriptor.Refresh(Type)
  fullName: System.ComponentModel.TypeDescriptor.Refresh(Type)
- uid: System.ComponentModel.TypeDescriptor.Refreshed
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: Refreshed
  nameWithType: TypeDescriptor.Refreshed
  fullName: System.ComponentModel.TypeDescriptor.Refreshed
- uid: System.ComponentModel.RefreshEventHandler
  parent: System.ComponentModel
  isExternal: false
  name: RefreshEventHandler
  nameWithType: RefreshEventHandler
  fullName: System.ComponentModel.RefreshEventHandler
- uid: System.ComponentModel.TypeDescriptor.RemoveAssociation(System.Object,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: RemoveAssociation(Object,Object)
  nameWithType: TypeDescriptor.RemoveAssociation(Object,Object)
  fullName: System.ComponentModel.TypeDescriptor.RemoveAssociation(Object,Object)
- uid: System.ComponentModel.TypeDescriptor.RemoveAssociations(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: RemoveAssociations(Object)
  nameWithType: TypeDescriptor.RemoveAssociations(Object)
  fullName: System.ComponentModel.TypeDescriptor.RemoveAssociations(Object)
- uid: System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: RemoveProvider(TypeDescriptionProvider,Object)
  nameWithType: TypeDescriptor.RemoveProvider(TypeDescriptionProvider,Object)
  fullName: System.ComponentModel.TypeDescriptor.RemoveProvider(TypeDescriptionProvider,Object)
- uid: System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: RemoveProvider(TypeDescriptionProvider,Type)
  nameWithType: TypeDescriptor.RemoveProvider(TypeDescriptionProvider,Type)
  fullName: System.ComponentModel.TypeDescriptor.RemoveProvider(TypeDescriptionProvider,Type)
- uid: System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: RemoveProviderTransparent(TypeDescriptionProvider,Object)
  nameWithType: TypeDescriptor.RemoveProviderTransparent(TypeDescriptionProvider,Object)
  fullName: System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(TypeDescriptionProvider,Object)
- uid: System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: RemoveProviderTransparent(TypeDescriptionProvider,Type)
  nameWithType: TypeDescriptor.RemoveProviderTransparent(TypeDescriptionProvider,Type)
  fullName: System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(TypeDescriptionProvider,Type)
- uid: System.ComponentModel.TypeDescriptor.SortDescriptorArray(System.Collections.IList)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: SortDescriptorArray(IList)
  nameWithType: TypeDescriptor.SortDescriptorArray(IList)
  fullName: System.ComponentModel.TypeDescriptor.SortDescriptorArray(IList)
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.ComponentModel.TypeDescriptor.AddAttributes*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: AddAttributes
  nameWithType: TypeDescriptor.AddAttributes
- uid: System.ComponentModel.TypeDescriptor.AddEditorTable*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: AddEditorTable
  nameWithType: TypeDescriptor.AddEditorTable
- uid: System.ComponentModel.TypeDescriptor.AddProvider*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: AddProvider
  nameWithType: TypeDescriptor.AddProvider
- uid: System.ComponentModel.TypeDescriptor.AddProviderTransparent*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: AddProviderTransparent
  nameWithType: TypeDescriptor.AddProviderTransparent
- uid: System.ComponentModel.TypeDescriptor.ComNativeDescriptorHandler*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: ComNativeDescriptorHandler
  nameWithType: TypeDescriptor.ComNativeDescriptorHandler
- uid: System.ComponentModel.TypeDescriptor.ComObjectType*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: ComObjectType
  nameWithType: TypeDescriptor.ComObjectType
- uid: System.ComponentModel.TypeDescriptor.CreateAssociation*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: CreateAssociation
  nameWithType: TypeDescriptor.CreateAssociation
- uid: System.ComponentModel.TypeDescriptor.CreateDesigner*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: CreateDesigner
  nameWithType: TypeDescriptor.CreateDesigner
- uid: System.ComponentModel.TypeDescriptor.CreateEvent*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: CreateEvent
  nameWithType: TypeDescriptor.CreateEvent
- uid: System.ComponentModel.TypeDescriptor.CreateInstance*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: CreateInstance
  nameWithType: TypeDescriptor.CreateInstance
- uid: System.ComponentModel.TypeDescriptor.CreateProperty*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: CreateProperty
  nameWithType: TypeDescriptor.CreateProperty
- uid: System.ComponentModel.TypeDescriptor.GetAssociation*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetAssociation
  nameWithType: TypeDescriptor.GetAssociation
- uid: System.ComponentModel.TypeDescriptor.GetAttributes*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetAttributes
  nameWithType: TypeDescriptor.GetAttributes
- uid: System.ComponentModel.TypeDescriptor.GetClassName*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetClassName
  nameWithType: TypeDescriptor.GetClassName
- uid: System.ComponentModel.TypeDescriptor.GetComponentName*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetComponentName
  nameWithType: TypeDescriptor.GetComponentName
- uid: System.ComponentModel.TypeDescriptor.GetConverter*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetConverter
  nameWithType: TypeDescriptor.GetConverter
- uid: System.ComponentModel.TypeDescriptor.GetDefaultEvent*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetDefaultEvent
  nameWithType: TypeDescriptor.GetDefaultEvent
- uid: System.ComponentModel.TypeDescriptor.GetDefaultProperty*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetDefaultProperty
  nameWithType: TypeDescriptor.GetDefaultProperty
- uid: System.ComponentModel.TypeDescriptor.GetEditor*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetEditor
  nameWithType: TypeDescriptor.GetEditor
- uid: System.ComponentModel.TypeDescriptor.GetEvents*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetEvents
  nameWithType: TypeDescriptor.GetEvents
- uid: System.ComponentModel.TypeDescriptor.GetFullComponentName*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetFullComponentName
  nameWithType: TypeDescriptor.GetFullComponentName
- uid: System.ComponentModel.TypeDescriptor.GetProperties*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetProperties
  nameWithType: TypeDescriptor.GetProperties
- uid: System.ComponentModel.TypeDescriptor.GetProvider*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetProvider
  nameWithType: TypeDescriptor.GetProvider
- uid: System.ComponentModel.TypeDescriptor.GetReflectionType*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetReflectionType
  nameWithType: TypeDescriptor.GetReflectionType
- uid: System.ComponentModel.TypeDescriptor.InterfaceType*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: InterfaceType
  nameWithType: TypeDescriptor.InterfaceType
- uid: System.ComponentModel.TypeDescriptor.Refresh*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: Refresh
  nameWithType: TypeDescriptor.Refresh
- uid: System.ComponentModel.TypeDescriptor.RemoveAssociation*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: RemoveAssociation
  nameWithType: TypeDescriptor.RemoveAssociation
- uid: System.ComponentModel.TypeDescriptor.RemoveAssociations*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: RemoveAssociations
  nameWithType: TypeDescriptor.RemoveAssociations
- uid: System.ComponentModel.TypeDescriptor.RemoveProvider*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: RemoveProvider
  nameWithType: TypeDescriptor.RemoveProvider
- uid: System.ComponentModel.TypeDescriptor.RemoveProviderTransparent*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: RemoveProviderTransparent
  nameWithType: TypeDescriptor.RemoveProviderTransparent
- uid: System.ComponentModel.TypeDescriptor.SortDescriptorArray*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: SortDescriptorArray
  nameWithType: TypeDescriptor.SortDescriptorArray
