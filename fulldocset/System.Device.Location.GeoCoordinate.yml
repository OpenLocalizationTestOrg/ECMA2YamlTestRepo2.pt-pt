### YamlMime:ManagedReference
items:
- uid: System.Device.Location.GeoCoordinate
  id: GeoCoordinate
  children:
  - System.Device.Location.GeoCoordinate.#ctor
  - System.Device.Location.GeoCoordinate.#ctor(System.Double,System.Double)
  - System.Device.Location.GeoCoordinate.#ctor(System.Double,System.Double,System.Double)
  - System.Device.Location.GeoCoordinate.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)
  - System.Device.Location.GeoCoordinate.Altitude
  - System.Device.Location.GeoCoordinate.Course
  - System.Device.Location.GeoCoordinate.Equals(System.Device.Location.GeoCoordinate)
  - System.Device.Location.GeoCoordinate.Equals(System.Object)
  - System.Device.Location.GeoCoordinate.GetDistanceTo(System.Device.Location.GeoCoordinate)
  - System.Device.Location.GeoCoordinate.GetHashCode
  - System.Device.Location.GeoCoordinate.HorizontalAccuracy
  - System.Device.Location.GeoCoordinate.IsUnknown
  - System.Device.Location.GeoCoordinate.Latitude
  - System.Device.Location.GeoCoordinate.Longitude
  - System.Device.Location.GeoCoordinate.op_Equality(System.Device.Location.GeoCoordinate,System.Device.Location.GeoCoordinate)
  - System.Device.Location.GeoCoordinate.op_Inequality(System.Device.Location.GeoCoordinate,System.Device.Location.GeoCoordinate)
  - System.Device.Location.GeoCoordinate.Speed
  - System.Device.Location.GeoCoordinate.ToString
  - System.Device.Location.GeoCoordinate.Unknown
  - System.Device.Location.GeoCoordinate.VerticalAccuracy
  langs:
  - csharp
  name: GeoCoordinate
  nameWithType: GeoCoordinate
  fullName: System.Device.Location.GeoCoordinate
  type: Class
  summary: "Represents a geographical location that is determined by latitude and longitude coordinates. May also include altitude, accuracy, speed, and course information."
  syntax:
    content: 'public class GeoCoordinate : IEquatable<System.Device.Location.GeoCoordinate>'
  inheritance:
  - System.Object
  implements:
  - System.IEquatable<System.Device.Location.GeoCoordinate>
  inheritedMembers: []
  platform:
  - net462
- uid: System.Device.Location.GeoCoordinate.#ctor
  id: '#ctor'
  parent: System.Device.Location.GeoCoordinate
  langs:
  - csharp
  name: GeoCoordinate()
  nameWithType: GeoCoordinate.GeoCoordinate()
  fullName: System.Device.Location.GeoCoordinate.GeoCoordinate()
  type: Constructor
  assemblies:
  - System.Device
  namespace: System.Device.Location
  summary: "Initializes a new instance of <xref href=&quot;System.Device.Location.GeoCoordinate&quot;></xref> that has no data fields set."
  remarks: "All data fields are set to <xref:System.Double.NaN>.  The new instance of <xref:System.Device.Location.GeoCoordinate> is equivalent to <xref:System.Device.Location.GeoCoordinate.Unknown>.       This constructor should be used for serialization."
  syntax:
    content: public GeoCoordinate ();
    parameters: []
  overload: System.Device.Location.GeoCoordinate.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Device.Location.GeoCoordinate.#ctor(System.Double,System.Double)
  id: '#ctor(System.Double,System.Double)'
  parent: System.Device.Location.GeoCoordinate
  langs:
  - csharp
  name: GeoCoordinate(Double,Double)
  nameWithType: GeoCoordinate.GeoCoordinate(Double,Double)
  fullName: System.Device.Location.GeoCoordinate.GeoCoordinate(Double,Double)
  type: Constructor
  assemblies:
  - System.Device
  namespace: System.Device.Location
  summary: "Initializes a new instance of the <xref href=&quot;System.Device.Location.GeoCoordinate&quot;></xref> class from latitude and longitude data."
  remarks: "The latitude and longitude values must correspond to an actual location on the globe."
  syntax:
    content: public GeoCoordinate (double latitude, double longitude);
    parameters:
    - id: latitude
      type: System.Double
      description: "The latitude of the location. May range from -90.0 to 90.0."
    - id: longitude
      type: System.Double
      description: "The longitude of the location. May range from -180.0 to 180.0."
  overload: System.Device.Location.GeoCoordinate.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Latitude or longitude is out of range."
  platform:
  - net462
- uid: System.Device.Location.GeoCoordinate.#ctor(System.Double,System.Double,System.Double)
  id: '#ctor(System.Double,System.Double,System.Double)'
  parent: System.Device.Location.GeoCoordinate
  langs:
  - csharp
  name: GeoCoordinate(Double,Double,Double)
  nameWithType: GeoCoordinate.GeoCoordinate(Double,Double,Double)
  fullName: System.Device.Location.GeoCoordinate.GeoCoordinate(Double,Double,Double)
  type: Constructor
  assemblies:
  - System.Device
  namespace: System.Device.Location
  summary: "Initializes a new instance of the <xref href=&quot;System.Device.Location.GeoCoordinate&quot;></xref> class from latitude, longitude, and altitude data."
  remarks: "The latitude and longitude values must correspond to an actual location on the globe."
  syntax:
    content: public GeoCoordinate (double latitude, double longitude, double altitude);
    parameters:
    - id: latitude
      type: System.Double
      description: "Latitude. May range from -90.0 to 90.0."
    - id: longitude
      type: System.Double
      description: "Longitude. May range from -180.0 to 180.0"
    - id: altitude
      type: System.Double
      description: "The altitude in meters. May be negative, 0, positive, or <xref:System.Double>, if unknown."
  overload: System.Device.Location.GeoCoordinate.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>latitude</code>, <code>longitude</code>, or <code>altitude</code> is out of range."
  platform:
  - net462
- uid: System.Device.Location.GeoCoordinate.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)
  id: '#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)'
  parent: System.Device.Location.GeoCoordinate
  langs:
  - csharp
  name: GeoCoordinate(Double,Double,Double,Double,Double,Double,Double)
  nameWithType: GeoCoordinate.GeoCoordinate(Double,Double,Double,Double,Double,Double,Double)
  fullName: System.Device.Location.GeoCoordinate.GeoCoordinate(Double,Double,Double,Double,Double,Double,Double)
  type: Constructor
  assemblies:
  - System.Device
  namespace: System.Device.Location
  summary: "Initializes a new instance of the <xref href=&quot;System.Device.Location.GeoCoordinate&quot;></xref> class from latitude, longitude, altitude, horizontal accuracy, vertical accuracy, speed, and course."
  syntax:
    content: public GeoCoordinate (double latitude, double longitude, double altitude, double horizontalAccuracy, double verticalAccuracy, double speed, double course);
    parameters:
    - id: latitude
      type: System.Double
      description: "The latitude of the location. May range from -90.0 to 90.0."
    - id: longitude
      type: System.Double
      description: "The longitude of the location. May range from -180.0 to 180.0."
    - id: altitude
      type: System.Double
      description: "The altitude in meters. May be negative, 0, positive, or <xref:System.Double>, if unknown."
    - id: horizontalAccuracy
      type: System.Double
      description: "The accuracy of the latitude and longitude coordinates, in meters. Must be greater than or equal to 0. If a value of 0 is supplied to this constructor, the <xref:System.Device.Location.GeoCoordinate.HorizontalAccuracy*> property will be set to <xref:System.Double.NaN>."
    - id: verticalAccuracy
      type: System.Double
      description: "The accuracy of the altitude, in meters. Must be greater than or equal to 0. If a value of 0 is supplied to this constructor, the <xref:System.Device.Location.GeoCoordinate.VerticalAccuracy*> property will be set to <xref:System.Double.NaN>."
    - id: speed
      type: System.Double
      description: "The speed measured in meters per second. May be negative, 0, positive, or <xref:System.Double>, if unknown.  A negative speed can indicate moving in reverse."
    - id: course
      type: System.Double
      description: "The direction of travel, rather than orientation. This parameter is measured in degrees relative to true north. Must range from 0 to 360.0, or be <xref:System.Double>."
  overload: System.Device.Location.GeoCoordinate.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>latitude</code>, <code>longitude</code>, <code>horizontalAccuracy</code>, <code>verticalAccuracy,</code> or <code>course</code> is out of range."
  platform:
  - net462
- uid: System.Device.Location.GeoCoordinate.Altitude
  id: Altitude
  parent: System.Device.Location.GeoCoordinate
  langs:
  - csharp
  name: Altitude
  nameWithType: GeoCoordinate.Altitude
  fullName: System.Device.Location.GeoCoordinate.Altitude
  type: Property
  assemblies:
  - System.Device
  namespace: System.Device.Location
  summary: "Gets the altitude of the <xref href=&quot;System.Device.Location.GeoCoordinate&quot;></xref>, in meters."
  remarks: "The altitude is given relative to sea level."
  syntax:
    content: public double Altitude { get; set; }
    return:
      type: System.Double
      description: "The altitude, in meters."
  overload: System.Device.Location.GeoCoordinate.Altitude*
  exceptions: []
  platform:
  - net462
- uid: System.Device.Location.GeoCoordinate.Course
  id: Course
  parent: System.Device.Location.GeoCoordinate
  langs:
  - csharp
  name: Course
  nameWithType: GeoCoordinate.Course
  fullName: System.Device.Location.GeoCoordinate.Course
  type: Property
  assemblies:
  - System.Device
  namespace: System.Device.Location
  summary: "Gets or sets the heading in degrees, relative to true north."
  remarks: "The valid range includes values from 0.0 to 360.0, and `Double.NaN` if the heading is not defined."
  example:
  - "The following example prints the Course and <xref:System.Device.Location.GeoCoordinate.Speed%2A> properties of the current location's <xref:System.Device.Location.GeoCoordinate>.  \n  \n [!code-cs[System.Device.Location.CourseAndSpeed#2](~/add/codesnippet/csharp/courseandspeed/courseandspeed.cs#2)]\n [!code-vb[System.Device.Location.CourseAndSpeed#2](~/add/codesnippet/visualbasic/courseandspeed/courseandspeed.vb#2)]"
  syntax:
    content: public double Course { get; set; }
    return:
      type: System.Double
      description: "The heading in degrees, relative to true north."
  overload: System.Device.Location.GeoCoordinate.Course*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Course is set outside the valid range."
  platform:
  - net462
- uid: System.Device.Location.GeoCoordinate.Equals(System.Device.Location.GeoCoordinate)
  id: Equals(System.Device.Location.GeoCoordinate)
  parent: System.Device.Location.GeoCoordinate
  langs:
  - csharp
  name: Equals(GeoCoordinate)
  nameWithType: GeoCoordinate.Equals(GeoCoordinate)
  fullName: System.Device.Location.GeoCoordinate.Equals(GeoCoordinate)
  type: Method
  assemblies:
  - System.Device
  namespace: System.Device.Location
  summary: "Determines if the <xref href=&quot;System.Device.Location.GeoCoordinate&quot;></xref> object is equivalent to the parameter, based solely on latitude and longitude."
  remarks: "Equivalent <xref:System.Device.Location.GeoCoordinate> objects have the same <xref:System.Device.Location.GeoCoordinate.Latitude%2A> and <xref:System.Device.Location.GeoCoordinate.Longitude%2A> properties. The <xref:System.Device.Location.GeoCoordinate.Altitude%2A>, <xref:System.Device.Location.GeoCoordinate.HorizontalAccuracy%2A>, and <xref:System.Device.Location.GeoCoordinate.VerticalAccuracy%2A> properties are not used to determine equivalency."
  syntax:
    content: public bool Equals (System.Device.Location.GeoCoordinate other);
    parameters:
    - id: other
      type: System.Device.Location.GeoCoordinate
      description: "The <xref href=&quot;System.Device.Location.GeoCoordinate&quot;></xref> object to compare to the calling object."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the <xref href=&quot;System.Device.Location.GeoCoordinate&quot;></xref> objects are equal; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Device.Location.GeoCoordinate.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Device.Location.GeoCoordinate.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Device.Location.GeoCoordinate
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: GeoCoordinate.Equals(Object)
  fullName: System.Device.Location.GeoCoordinate.Equals(Object)
  type: Method
  assemblies:
  - System.Device
  namespace: System.Device.Location
  summary: "Determines if a specified <xref href=&quot;System.Device.Location.GeoCoordinate&quot;></xref> is equal to the current <xref href=&quot;System.Device.Location.GeoCoordinate&quot;></xref>, based solely on latitude and longitude."
  remarks: "Equivalent <xref:System.Device.Location.GeoCoordinate> objects have the same <xref:System.Device.Location.GeoCoordinate.Latitude%2A> and <xref:System.Device.Location.GeoCoordinate.Longitude%2A> properties. The <xref:System.Device.Location.GeoCoordinate.Altitude%2A>, <xref:System.Device.Location.GeoCoordinate.HorizontalAccuracy%2A>, and <xref:System.Device.Location.GeoCoordinate.VerticalAccuracy%2A> properties are not used to determine equivalency."
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "The object to compare the <xref href=&quot;System.Device.Location.GeoCoordinate&quot;></xref> to."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>, if the <xref href=&quot;System.Device.Location.GeoCoordinate&quot;></xref> objects are equal; otherwise,<xref uid=&quot;langword_csharp_ false&quot; name=&quot; false&quot; href=&quot;&quot;></xref>."
  overload: System.Device.Location.GeoCoordinate.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Device.Location.GeoCoordinate.GetDistanceTo(System.Device.Location.GeoCoordinate)
  id: GetDistanceTo(System.Device.Location.GeoCoordinate)
  parent: System.Device.Location.GeoCoordinate
  langs:
  - csharp
  name: GetDistanceTo(GeoCoordinate)
  nameWithType: GeoCoordinate.GetDistanceTo(GeoCoordinate)
  fullName: System.Device.Location.GeoCoordinate.GetDistanceTo(GeoCoordinate)
  type: Method
  assemblies:
  - System.Device
  namespace: System.Device.Location
  summary: "Returns the distance between the latitude and longitude coordinates that are specified by this <xref href=&quot;System.Device.Location.GeoCoordinate&quot;></xref> and another specified <xref href=&quot;System.Device.Location.GeoCoordinate&quot;></xref>."
  remarks: "The Haversine formula is used to calculate the distance.  The Haversine formula accounts for the curvature of the earth, but assumes a spherical earth rather than an ellipsoid. For long distances, the Haversine formula introduces an error of less than 0.1 percent.       Altitude is not used to calculate the distance."
  syntax:
    content: public double GetDistanceTo (System.Device.Location.GeoCoordinate other);
    parameters:
    - id: other
      type: System.Device.Location.GeoCoordinate
      description: "The <xref href=&quot;System.Device.Location.GeoCoordinate&quot;></xref> for the location to calculate the distance to."
    return:
      type: System.Double
      description: "The distance between the two coordinates, in meters."
  overload: System.Device.Location.GeoCoordinate.GetDistanceTo*
  exceptions: []
  platform:
  - net462
- uid: System.Device.Location.GeoCoordinate.GetHashCode
  id: GetHashCode
  parent: System.Device.Location.GeoCoordinate
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: GeoCoordinate.GetHashCode()
  fullName: System.Device.Location.GeoCoordinate.GetHashCode()
  type: Method
  assemblies:
  - System.Device
  namespace: System.Device.Location
  summary: "Serves as a hash function for the <xref href=&quot;System.Device.Location.GeoCoordinate&quot;></xref>."
  remarks: "<xref:System.Device.Location.GeoCoordinate> objects that are equivalent have the same hash code. Equivalent <xref:System.Device.Location.GeoCoordinate> objects have the same <xref:System.Device.Location.GeoCoordinate.Latitude%2A> and <xref:System.Device.Location.GeoCoordinate.Longitude%2A> properties. The <xref:System.Device.Location.GeoCoordinate.Altitude%2A>, <xref:System.Device.Location.GeoCoordinate.HorizontalAccuracy%2A>, and <xref:System.Device.Location.GeoCoordinate.VerticalAccuracy%2A> properties are not used to determine equivalency."
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "A hash code for the current <xref href=&quot;System.Device.Location.GeoCoordinate&quot;></xref>."
  overload: System.Device.Location.GeoCoordinate.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Device.Location.GeoCoordinate.HorizontalAccuracy
  id: HorizontalAccuracy
  parent: System.Device.Location.GeoCoordinate
  langs:
  - csharp
  name: HorizontalAccuracy
  nameWithType: GeoCoordinate.HorizontalAccuracy
  fullName: System.Device.Location.GeoCoordinate.HorizontalAccuracy
  type: Property
  assemblies:
  - System.Device
  namespace: System.Device.Location
  summary: "Gets or sets the accuracy of the latitude and longitude that is given by the <xref href=&quot;System.Device.Location.GeoCoordinate&quot;></xref>, in meters."
  remarks: "The accuracy can be considered the radius of certainty of the latitude and longitude data.  A circular area that is formed with the accuracy as the radius and the latitude and longitude coordinates as the center contains the actual location."
  syntax:
    content: public double HorizontalAccuracy { get; set; }
    return:
      type: System.Double
      description: "The accuracy of the latitude and longitude, in meters."
  overload: System.Device.Location.GeoCoordinate.HorizontalAccuracy*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "HorizontalAccuracy is set outside the valid range."
  platform:
  - net462
- uid: System.Device.Location.GeoCoordinate.IsUnknown
  id: IsUnknown
  parent: System.Device.Location.GeoCoordinate
  langs:
  - csharp
  name: IsUnknown
  nameWithType: GeoCoordinate.IsUnknown
  fullName: System.Device.Location.GeoCoordinate.IsUnknown
  type: Property
  assemblies:
  - System.Device
  namespace: System.Device.Location
  summary: "Gets a value that indicates whether the <xref href=&quot;System.Device.Location.GeoCoordinate&quot;></xref> does not contain latitude or longitude data."
  remarks: "A <xref:System.Device.Location.GeoCoordinate> that does not contain latitude or longitude data is equal to <xref:System.Device.Location.GeoCoordinate.Unknown>."
  example:
  - "The following code example verifies whether the <xref:System.Device.Location.GeoCoordinate> that corresponds to a location is <xref:System.Device.Location.GeoCoordinate.Unknown> before printing out its latitude and longitude.  \n  \n [!code-cs[System.Device.Location.GetLocationDataSyncHandleUnknown#1](~/add/codesnippet/csharp/getlocationdatasynchandleunknown/getlocationdatasynchandleunknown.cs#1)]\n [!code-vb[System.Device.Location.GetLocationDataSyncHandleUnknown#1](~/add/codesnippet/visualbasic/System.Device.Location.GetLocationDataSyncHandleUnknown/GetLocationDataSyncHandleUnknown.vb#1)]"
  syntax:
    content: public bool IsUnknown { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the <xref href=&quot;System.Device.Location.GeoCoordinate&quot;></xref> does not contain latitude or longitude data; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Device.Location.GeoCoordinate.IsUnknown*
  exceptions: []
  platform:
  - net462
- uid: System.Device.Location.GeoCoordinate.Latitude
  id: Latitude
  parent: System.Device.Location.GeoCoordinate
  langs:
  - csharp
  name: Latitude
  nameWithType: GeoCoordinate.Latitude
  fullName: System.Device.Location.GeoCoordinate.Latitude
  type: Property
  assemblies:
  - System.Device
  namespace: System.Device.Location
  summary: "Gets or sets the latitude of the <xref href=&quot;System.Device.Location.GeoCoordinate&quot;></xref>."
  remarks: "Latitude can range from -90.0 to 90.0. Latitude is measured in degrees north or south from the equator. Positive values are north of the equator and negative values are south of the equator."
  example:
  - "The following example prints the latitude and longitude values that are obtained from a <xref:System.Device.Location.GeoCoordinate>.  \n  \n [!code-vb[System.Device.Location.LocationEvent1#1](~/add/codesnippet/visualbasic/locationevent/locationevent.vb#1)]\n [!code-cs[System.Device.Location.LocationEvent1#1](~/add/codesnippet/csharp/locationevent/locationevent.cs#1)]"
  syntax:
    content: public double Latitude { get; set; }
    return:
      type: System.Double
      description: "Latitude of the location."
  overload: System.Device.Location.GeoCoordinate.Latitude*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Latitude is set outside the valid range."
  platform:
  - net462
- uid: System.Device.Location.GeoCoordinate.Longitude
  id: Longitude
  parent: System.Device.Location.GeoCoordinate
  langs:
  - csharp
  name: Longitude
  nameWithType: GeoCoordinate.Longitude
  fullName: System.Device.Location.GeoCoordinate.Longitude
  type: Property
  assemblies:
  - System.Device
  namespace: System.Device.Location
  summary: "Gets or sets the longitude of the <xref href=&quot;System.Device.Location.GeoCoordinate&quot;></xref>."
  remarks: "The longitude can range from -180.0 to 180.0. Longitude is measured in degrees east or west of the prime meridian. Negative values are west of the prime meridian, and positive values are east of the prime meridian."
  example:
  - "The following example prints the latitude and longitude values that are obtained from a <xref:System.Device.Location.GeoCoordinate>.  \n  \n [!code-vb[System.Device.Location.LocationEvent1#1](~/add/codesnippet/visualbasic/locationevent/locationevent.vb#1)]\n [!code-cs[System.Device.Location.LocationEvent1#1](~/add/codesnippet/csharp/locationevent/locationevent.cs#1)]"
  syntax:
    content: public double Longitude { get; set; }
    return:
      type: System.Double
      description: "The longitude."
  overload: System.Device.Location.GeoCoordinate.Longitude*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Longitude is set outside the valid range."
  platform:
  - net462
- uid: System.Device.Location.GeoCoordinate.op_Equality(System.Device.Location.GeoCoordinate,System.Device.Location.GeoCoordinate)
  id: op_Equality(System.Device.Location.GeoCoordinate,System.Device.Location.GeoCoordinate)
  parent: System.Device.Location.GeoCoordinate
  langs:
  - csharp
  name: op_Equality(GeoCoordinate,GeoCoordinate)
  nameWithType: GeoCoordinate.op_Equality(GeoCoordinate,GeoCoordinate)
  fullName: System.Device.Location.GeoCoordinate.op_Equality(GeoCoordinate,GeoCoordinate)
  type: Operator
  assemblies:
  - System.Device
  namespace: System.Device.Location
  summary: "Determines whether two <xref href=&quot;System.Device.Location.GeoCoordinate&quot;></xref> objects refer to the same location."
  remarks: "Equivalent <xref:System.Device.Location.GeoCoordinate> objects have the same <xref:System.Device.Location.GeoCoordinate.Latitude%2A> and <xref:System.Device.Location.GeoCoordinate.Longitude%2A> properties. The <xref:System.Device.Location.GeoCoordinate.Altitude%2A>, <xref:System.Device.Location.GeoCoordinate.HorizontalAccuracy%2A>, and <xref:System.Device.Location.GeoCoordinate.VerticalAccuracy%2A> properties are not used to determine equivalency."
  syntax:
    content: public static bool op_Equality (System.Device.Location.GeoCoordinate left, System.Device.Location.GeoCoordinate right);
    parameters:
    - id: left
      type: System.Device.Location.GeoCoordinate
      description: "The first <xref href=&quot;System.Device.Location.GeoCoordinate&quot;></xref> to compare."
    - id: right
      type: System.Device.Location.GeoCoordinate
      description: "The second <xref href=&quot;System.Device.Location.GeoCoordinate&quot;></xref> to compare."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>, if the <xref href=&quot;System.Device.Location.GeoCoordinate&quot;></xref> objects are determined to be equivalent; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Device.Location.GeoCoordinate.op_Equality*
  exceptions: []
  platform:
  - net462
- uid: System.Device.Location.GeoCoordinate.op_Inequality(System.Device.Location.GeoCoordinate,System.Device.Location.GeoCoordinate)
  id: op_Inequality(System.Device.Location.GeoCoordinate,System.Device.Location.GeoCoordinate)
  parent: System.Device.Location.GeoCoordinate
  langs:
  - csharp
  name: op_Inequality(GeoCoordinate,GeoCoordinate)
  nameWithType: GeoCoordinate.op_Inequality(GeoCoordinate,GeoCoordinate)
  fullName: System.Device.Location.GeoCoordinate.op_Inequality(GeoCoordinate,GeoCoordinate)
  type: Operator
  assemblies:
  - System.Device
  namespace: System.Device.Location
  summary: "Determines whether two <xref href=&quot;System.Device.Location.GeoCoordinate&quot;></xref> objects correspond to different locations."
  remarks: "Equivalent <xref:System.Device.Location.GeoCoordinate> objects have the same <xref:System.Device.Location.GeoCoordinate.Latitude%2A> and <xref:System.Device.Location.GeoCoordinate.Longitude%2A> properties. The <xref:System.Device.Location.GeoCoordinate.Altitude%2A>, <xref:System.Device.Location.GeoCoordinate.HorizontalAccuracy%2A>, and <xref:System.Device.Location.GeoCoordinate.VerticalAccuracy%2A> properties are not used to determine equivalency."
  syntax:
    content: public static bool op_Inequality (System.Device.Location.GeoCoordinate left, System.Device.Location.GeoCoordinate right);
    parameters:
    - id: left
      type: System.Device.Location.GeoCoordinate
      description: "The first <xref href=&quot;System.Device.Location.GeoCoordinate&quot;></xref> to compare."
    - id: right
      type: System.Device.Location.GeoCoordinate
      description: "The second <xref href=&quot;System.Device.Location.GeoCoordinate&quot;></xref> to compare."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>, if the <xref href=&quot;System.Device.Location.GeoCoordinate&quot;></xref> objects are determined to be different; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Device.Location.GeoCoordinate.op_Inequality*
  exceptions: []
  platform:
  - net462
- uid: System.Device.Location.GeoCoordinate.Speed
  id: Speed
  parent: System.Device.Location.GeoCoordinate
  langs:
  - csharp
  name: Speed
  nameWithType: GeoCoordinate.Speed
  fullName: System.Device.Location.GeoCoordinate.Speed
  type: Property
  assemblies:
  - System.Device
  namespace: System.Device.Location
  summary: "Gets or sets the speed in meters per second."
  remarks: ''
  example:
  - "The following example prints the <xref:System.Device.Location.GeoCoordinate.Course%2A> and Speed properties of the current location's <xref:System.Device.Location.GeoCoordinate>.  \n  \n [!code-cs[System.Device.Location.CourseAndSpeed#2](~/add/codesnippet/csharp/courseandspeed/courseandspeed.cs#2)]\n [!code-vb[System.Device.Location.CourseAndSpeed#2](~/add/codesnippet/visualbasic/courseandspeed/courseandspeed.vb#2)]"
  syntax:
    content: public double Speed { get; set; }
    return:
      type: System.Double
      description: "The speed in meters per second. The speed must be greater than or equal to zero, or <xref:System.Double>."
  overload: System.Device.Location.GeoCoordinate.Speed*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: System.ArgumentOutOfRangeException
    description: "Speed is set outside the valid range."
  platform:
  - net462
- uid: System.Device.Location.GeoCoordinate.ToString
  id: ToString
  parent: System.Device.Location.GeoCoordinate
  langs:
  - csharp
  name: ToString()
  nameWithType: GeoCoordinate.ToString()
  fullName: System.Device.Location.GeoCoordinate.ToString()
  type: Method
  assemblies:
  - System.Device
  namespace: System.Device.Location
  summary: "Returns a string that contains the latitude and longitude."
  remarks: "The string representation returned by this method is intended only for debugging use. This method does not return any locale-specific formatting for latitude and longitude."
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "A string that contains the latitude and longitude, separated by a comma."
  overload: System.Device.Location.GeoCoordinate.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Device.Location.GeoCoordinate.Unknown
  id: Unknown
  parent: System.Device.Location.GeoCoordinate
  langs:
  - csharp
  name: Unknown
  nameWithType: GeoCoordinate.Unknown
  fullName: System.Device.Location.GeoCoordinate.Unknown
  type: Field
  assemblies:
  - System.Device
  namespace: System.Device.Location
  summary: "Represents a <xref href=&quot;System.Device.Location.GeoCoordinate&quot;></xref> object that has unknown latitude and longitude fields."
  remarks: "The <xref:System.Device.Location.GeoCoordinate.IsUnknown%2A> property can be used to verify whether a <xref:System.Device.Location.GeoCoordinate> contains no data."
  example:
  - "The following code example verifies whether the <xref:System.Device.Location.GeoCoordinate> that corresponds to a location is Unknown before printingout its latitude and longitude.  \n  \n [!code-cs[System.Device.Location.GetLocationDataSyncHandleUnknown#1](~/add/codesnippet/csharp/getlocationdatasynchandleunknown/getlocationdatasynchandleunknown.cs#1)]\n [!code-vb[System.Device.Location.GetLocationDataSyncHandleUnknown#1](~/add/codesnippet/visualbasic/System.Device.Location.GetLocationDataSyncHandleUnknown/GetLocationDataSyncHandleUnknown.vb#1)]"
  syntax:
    content: public static readonly System.Device.Location.GeoCoordinate Unknown;
    return:
      type: System.Device.Location.GeoCoordinate
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Device.Location.GeoCoordinate.VerticalAccuracy
  id: VerticalAccuracy
  parent: System.Device.Location.GeoCoordinate
  langs:
  - csharp
  name: VerticalAccuracy
  nameWithType: GeoCoordinate.VerticalAccuracy
  fullName: System.Device.Location.GeoCoordinate.VerticalAccuracy
  type: Property
  assemblies:
  - System.Device
  namespace: System.Device.Location
  summary: "Gets or sets the accuracy of the altitude given by the <xref href=&quot;System.Device.Location.GeoCoordinate&quot;></xref>, in meters."
  syntax:
    content: public double VerticalAccuracy { get; set; }
    return:
      type: System.Double
      description: "The accuracy of the altitude, in meters."
  overload: System.Device.Location.GeoCoordinate.VerticalAccuracy*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "VerticalAccuracy is set outside the valid range."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Device.Location.GeoCoordinate.#ctor
  parent: System.Device.Location.GeoCoordinate
  isExternal: false
  name: GeoCoordinate()
  nameWithType: GeoCoordinate.GeoCoordinate()
  fullName: System.Device.Location.GeoCoordinate.GeoCoordinate()
- uid: System.Device.Location.GeoCoordinate.#ctor(System.Double,System.Double)
  parent: System.Device.Location.GeoCoordinate
  isExternal: false
  name: GeoCoordinate(Double,Double)
  nameWithType: GeoCoordinate.GeoCoordinate(Double,Double)
  fullName: System.Device.Location.GeoCoordinate.GeoCoordinate(Double,Double)
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Device.Location.GeoCoordinate.#ctor(System.Double,System.Double,System.Double)
  parent: System.Device.Location.GeoCoordinate
  isExternal: false
  name: GeoCoordinate(Double,Double,Double)
  nameWithType: GeoCoordinate.GeoCoordinate(Double,Double,Double)
  fullName: System.Device.Location.GeoCoordinate.GeoCoordinate(Double,Double,Double)
- uid: System.Device.Location.GeoCoordinate.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)
  parent: System.Device.Location.GeoCoordinate
  isExternal: false
  name: GeoCoordinate(Double,Double,Double,Double,Double,Double,Double)
  nameWithType: GeoCoordinate.GeoCoordinate(Double,Double,Double,Double,Double,Double,Double)
  fullName: System.Device.Location.GeoCoordinate.GeoCoordinate(Double,Double,Double,Double,Double,Double,Double)
- uid: System.Device.Location.GeoCoordinate.Altitude
  parent: System.Device.Location.GeoCoordinate
  isExternal: false
  name: Altitude
  nameWithType: GeoCoordinate.Altitude
  fullName: System.Device.Location.GeoCoordinate.Altitude
- uid: System.Device.Location.GeoCoordinate.Course
  parent: System.Device.Location.GeoCoordinate
  isExternal: false
  name: Course
  nameWithType: GeoCoordinate.Course
  fullName: System.Device.Location.GeoCoordinate.Course
- uid: System.Device.Location.GeoCoordinate.Equals(System.Device.Location.GeoCoordinate)
  parent: System.Device.Location.GeoCoordinate
  isExternal: false
  name: Equals(GeoCoordinate)
  nameWithType: GeoCoordinate.Equals(GeoCoordinate)
  fullName: System.Device.Location.GeoCoordinate.Equals(GeoCoordinate)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Device.Location.GeoCoordinate
  parent: System.Device.Location
  isExternal: false
  name: GeoCoordinate
  nameWithType: GeoCoordinate
  fullName: System.Device.Location.GeoCoordinate
- uid: System.Device.Location.GeoCoordinate.Equals(System.Object)
  parent: System.Device.Location.GeoCoordinate
  isExternal: false
  name: Equals(Object)
  nameWithType: GeoCoordinate.Equals(Object)
  fullName: System.Device.Location.GeoCoordinate.Equals(Object)
- uid: System.Device.Location.GeoCoordinate.GetDistanceTo(System.Device.Location.GeoCoordinate)
  parent: System.Device.Location.GeoCoordinate
  isExternal: false
  name: GetDistanceTo(GeoCoordinate)
  nameWithType: GeoCoordinate.GetDistanceTo(GeoCoordinate)
  fullName: System.Device.Location.GeoCoordinate.GetDistanceTo(GeoCoordinate)
- uid: System.Device.Location.GeoCoordinate.GetHashCode
  parent: System.Device.Location.GeoCoordinate
  isExternal: false
  name: GetHashCode()
  nameWithType: GeoCoordinate.GetHashCode()
  fullName: System.Device.Location.GeoCoordinate.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Device.Location.GeoCoordinate.HorizontalAccuracy
  parent: System.Device.Location.GeoCoordinate
  isExternal: false
  name: HorizontalAccuracy
  nameWithType: GeoCoordinate.HorizontalAccuracy
  fullName: System.Device.Location.GeoCoordinate.HorizontalAccuracy
- uid: System.Device.Location.GeoCoordinate.IsUnknown
  parent: System.Device.Location.GeoCoordinate
  isExternal: false
  name: IsUnknown
  nameWithType: GeoCoordinate.IsUnknown
  fullName: System.Device.Location.GeoCoordinate.IsUnknown
- uid: System.Device.Location.GeoCoordinate.Latitude
  parent: System.Device.Location.GeoCoordinate
  isExternal: false
  name: Latitude
  nameWithType: GeoCoordinate.Latitude
  fullName: System.Device.Location.GeoCoordinate.Latitude
- uid: System.Device.Location.GeoCoordinate.Longitude
  parent: System.Device.Location.GeoCoordinate
  isExternal: false
  name: Longitude
  nameWithType: GeoCoordinate.Longitude
  fullName: System.Device.Location.GeoCoordinate.Longitude
- uid: System.Device.Location.GeoCoordinate.op_Equality(System.Device.Location.GeoCoordinate,System.Device.Location.GeoCoordinate)
  parent: System.Device.Location.GeoCoordinate
  isExternal: false
  name: op_Equality(GeoCoordinate,GeoCoordinate)
  nameWithType: GeoCoordinate.op_Equality(GeoCoordinate,GeoCoordinate)
  fullName: System.Device.Location.GeoCoordinate.op_Equality(GeoCoordinate,GeoCoordinate)
- uid: System.Device.Location.GeoCoordinate.op_Inequality(System.Device.Location.GeoCoordinate,System.Device.Location.GeoCoordinate)
  parent: System.Device.Location.GeoCoordinate
  isExternal: false
  name: op_Inequality(GeoCoordinate,GeoCoordinate)
  nameWithType: GeoCoordinate.op_Inequality(GeoCoordinate,GeoCoordinate)
  fullName: System.Device.Location.GeoCoordinate.op_Inequality(GeoCoordinate,GeoCoordinate)
- uid: System.Device.Location.GeoCoordinate.Speed
  parent: System.Device.Location.GeoCoordinate
  isExternal: false
  name: Speed
  nameWithType: GeoCoordinate.Speed
  fullName: System.Device.Location.GeoCoordinate.Speed
- uid: System.Device.Location.GeoCoordinate.ToString
  parent: System.Device.Location.GeoCoordinate
  isExternal: false
  name: ToString()
  nameWithType: GeoCoordinate.ToString()
  fullName: System.Device.Location.GeoCoordinate.ToString()
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Device.Location.GeoCoordinate.Unknown
  parent: System.Device.Location.GeoCoordinate
  isExternal: false
  name: Unknown
  nameWithType: GeoCoordinate.Unknown
  fullName: System.Device.Location.GeoCoordinate.Unknown
- uid: System.Device.Location.GeoCoordinate.VerticalAccuracy
  parent: System.Device.Location.GeoCoordinate
  isExternal: false
  name: VerticalAccuracy
  nameWithType: GeoCoordinate.VerticalAccuracy
  fullName: System.Device.Location.GeoCoordinate.VerticalAccuracy
- uid: System.Device.Location.GeoCoordinate.#ctor*
  parent: System.Device.Location.GeoCoordinate
  isExternal: false
  name: GeoCoordinate
  nameWithType: GeoCoordinate.GeoCoordinate
- uid: System.Device.Location.GeoCoordinate.Altitude*
  parent: System.Device.Location.GeoCoordinate
  isExternal: false
  name: Altitude
  nameWithType: GeoCoordinate.Altitude
- uid: System.Device.Location.GeoCoordinate.Course*
  parent: System.Device.Location.GeoCoordinate
  isExternal: false
  name: Course
  nameWithType: GeoCoordinate.Course
- uid: System.Device.Location.GeoCoordinate.Equals*
  parent: System.Device.Location.GeoCoordinate
  isExternal: false
  name: Equals
  nameWithType: GeoCoordinate.Equals
- uid: System.Device.Location.GeoCoordinate.GetDistanceTo*
  parent: System.Device.Location.GeoCoordinate
  isExternal: false
  name: GetDistanceTo
  nameWithType: GeoCoordinate.GetDistanceTo
- uid: System.Device.Location.GeoCoordinate.GetHashCode*
  parent: System.Device.Location.GeoCoordinate
  isExternal: false
  name: GetHashCode
  nameWithType: GeoCoordinate.GetHashCode
- uid: System.Device.Location.GeoCoordinate.HorizontalAccuracy*
  parent: System.Device.Location.GeoCoordinate
  isExternal: false
  name: HorizontalAccuracy
  nameWithType: GeoCoordinate.HorizontalAccuracy
- uid: System.Device.Location.GeoCoordinate.IsUnknown*
  parent: System.Device.Location.GeoCoordinate
  isExternal: false
  name: IsUnknown
  nameWithType: GeoCoordinate.IsUnknown
- uid: System.Device.Location.GeoCoordinate.Latitude*
  parent: System.Device.Location.GeoCoordinate
  isExternal: false
  name: Latitude
  nameWithType: GeoCoordinate.Latitude
- uid: System.Device.Location.GeoCoordinate.Longitude*
  parent: System.Device.Location.GeoCoordinate
  isExternal: false
  name: Longitude
  nameWithType: GeoCoordinate.Longitude
- uid: System.Device.Location.GeoCoordinate.op_Equality*
  parent: System.Device.Location.GeoCoordinate
  isExternal: false
  name: op_Equality
  nameWithType: GeoCoordinate.op_Equality
- uid: System.Device.Location.GeoCoordinate.op_Inequality*
  parent: System.Device.Location.GeoCoordinate
  isExternal: false
  name: op_Inequality
  nameWithType: GeoCoordinate.op_Inequality
- uid: System.Device.Location.GeoCoordinate.Speed*
  parent: System.Device.Location.GeoCoordinate
  isExternal: false
  name: Speed
  nameWithType: GeoCoordinate.Speed
- uid: System.Device.Location.GeoCoordinate.ToString*
  parent: System.Device.Location.GeoCoordinate
  isExternal: false
  name: ToString
  nameWithType: GeoCoordinate.ToString
- uid: System.Device.Location.GeoCoordinate.VerticalAccuracy*
  parent: System.Device.Location.GeoCoordinate
  isExternal: false
  name: VerticalAccuracy
  nameWithType: GeoCoordinate.VerticalAccuracy
