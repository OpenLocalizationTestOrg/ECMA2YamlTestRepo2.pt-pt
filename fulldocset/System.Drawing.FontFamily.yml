### YamlMime:ManagedReference
items:
- uid: System.Drawing.FontFamily
  id: FontFamily
  children:
  - System.Drawing.FontFamily.#ctor(System.Drawing.Text.GenericFontFamilies)
  - System.Drawing.FontFamily.#ctor(System.String)
  - System.Drawing.FontFamily.#ctor(System.String,System.Drawing.Text.FontCollection)
  - System.Drawing.FontFamily.Dispose
  - System.Drawing.FontFamily.Equals(System.Object)
  - System.Drawing.FontFamily.Families
  - System.Drawing.FontFamily.Finalize
  - System.Drawing.FontFamily.GenericMonospace
  - System.Drawing.FontFamily.GenericSansSerif
  - System.Drawing.FontFamily.GenericSerif
  - System.Drawing.FontFamily.GetCellAscent(System.Drawing.FontStyle)
  - System.Drawing.FontFamily.GetCellDescent(System.Drawing.FontStyle)
  - System.Drawing.FontFamily.GetEmHeight(System.Drawing.FontStyle)
  - System.Drawing.FontFamily.GetFamilies(System.Drawing.Graphics)
  - System.Drawing.FontFamily.GetHashCode
  - System.Drawing.FontFamily.GetLineSpacing(System.Drawing.FontStyle)
  - System.Drawing.FontFamily.GetName(System.Int32)
  - System.Drawing.FontFamily.IsStyleAvailable(System.Drawing.FontStyle)
  - System.Drawing.FontFamily.Name
  - System.Drawing.FontFamily.ToString
  langs:
  - csharp
  name: FontFamily
  nameWithType: FontFamily
  fullName: System.Drawing.FontFamily
  type: Class
  summary: "Define um grupo de ter um design semelhante básico e algumas variações estilos de faces de tipo. Esta classe não pode ser herdada."
  remarks: ''
  example:
  - "The following code example shows all the font families in the <xref:System.Drawing.FontFamily.Families%2A> property of the FontFamily class. This example is designed to be used with a Windows Form. To run this example, add a <xref:System.Windows.Forms.ListBox> named `listBox1` to a form and call the `PopulateListBoxWithFonts` method from the form's constructor.  \n  \n [!code-cs[System.Drawing.MiscExamples#1](~/add/codesnippet/csharp/t-system.drawing.fontfam_1.cs)]\n [!code-cpp[System.Drawing.MiscExamples#1](~/add/codesnippet/cpp/t-system.drawing.fontfam_1.cpp)]\n [!code-vb[System.Drawing.MiscExamples#1](~/add/codesnippet/visualbasic/t-system.drawing.fontfam_1.vb)]"
  syntax:
    content: 'public sealed class FontFamily : MarshalByRefObject, IDisposable'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Drawing.FontFamily.#ctor(System.Drawing.Text.GenericFontFamilies)
  id: '#ctor(System.Drawing.Text.GenericFontFamilies)'
  parent: System.Drawing.FontFamily
  langs:
  - csharp
  name: FontFamily(GenericFontFamilies)
  nameWithType: FontFamily.FontFamily(GenericFontFamilies)
  fullName: System.Drawing.FontFamily.FontFamily(GenericFontFamilies)
  type: Constructor
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "Inicializa uma nova <xref href=&quot;System.Drawing.FontFamily&quot;> </xref> da família de tipo de letra genérico especificado."
  syntax:
    content: public FontFamily (System.Drawing.Text.GenericFontFamilies genericFamily);
    parameters:
    - id: genericFamily
      type: System.Drawing.Text.GenericFontFamilies
      description: "O <xref href=&quot;System.Drawing.Text.GenericFontFamilies&quot;> </xref> partir do qual criar o novo <xref href=&quot;System.Drawing.FontFamily&quot;> </xref>."
  overload: System.Drawing.FontFamily.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.FontFamily.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Drawing.FontFamily
  langs:
  - csharp
  name: FontFamily(String)
  nameWithType: FontFamily.FontFamily(String)
  fullName: System.Drawing.FontFamily.FontFamily(String)
  type: Constructor
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "Inicializa uma nova <xref href=&quot;System.Drawing.FontFamily&quot;> </xref> com o nome especificado."
  remarks: "Passar uma cadeia vazia (&quot;&quot;) para o `name` parâmetro faz com que uma excepção."
  syntax:
    content: public FontFamily (string name);
    parameters:
    - id: name
      type: System.String
      description: "O nome do novo <xref href=&quot;System.Drawing.FontFamily&quot;> </xref>."
  overload: System.Drawing.FontFamily.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>name</code>é uma cadeia vazia (&quot;&quot;).       - ou - <code>name</code> Especifica um tipo de letra que não está instalado no computador que executa a aplicação.       - ou - <code>name</code> Especifica um tipo de letra que não é um tipo de letra TrueType."
  platform:
  - net462
- uid: System.Drawing.FontFamily.#ctor(System.String,System.Drawing.Text.FontCollection)
  id: '#ctor(System.String,System.Drawing.Text.FontCollection)'
  parent: System.Drawing.FontFamily
  langs:
  - csharp
  name: FontFamily(String,FontCollection)
  nameWithType: FontFamily.FontFamily(String,FontCollection)
  fullName: System.Drawing.FontFamily.FontFamily(String,FontCollection)
  type: Constructor
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "Inicializa uma nova <xref href=&quot;System.Drawing.FontFamily&quot;> </xref> especificado no <xref href=&quot;System.Drawing.Text.FontCollection&quot;> </xref> com o nome especificado."
  syntax:
    content: public FontFamily (string name, System.Drawing.Text.FontCollection fontCollection);
    parameters:
    - id: name
      type: System.String
      description: "A <xref:System.String>que representa o nome do novo <xref href=&quot;System.Drawing.FontFamily&quot;> </xref>.</xref:System.String>"
    - id: fontCollection
      type: System.Drawing.Text.FontCollection
      description: "O <xref href=&quot;System.Drawing.Text.FontCollection&quot;> </xref> que contém esta <xref href=&quot;System.Drawing.FontFamily&quot;> </xref>."
  overload: System.Drawing.FontFamily.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>name</code>é uma cadeia vazia (&quot;&quot;).       - ou - <code>name</code> Especifica um tipo de letra que não está instalado no computador que executa a aplicação.       - ou - <code>name</code> Especifica um tipo de letra que não é um tipo de letra TrueType."
  platform:
  - net462
- uid: System.Drawing.FontFamily.Dispose
  id: Dispose
  parent: System.Drawing.FontFamily
  langs:
  - csharp
  name: Dispose()
  nameWithType: FontFamily.Dispose()
  fullName: System.Drawing.FontFamily.Dispose()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "Versões de todos os recursos utilizados por este <xref href=&quot;System.Drawing.FontFamily&quot;> </xref>."
  remarks: "Chamar Dispose permite que os recursos utilizados por este <xref:System.Drawing.FontFamily>para possível reatribuir porque para outros fins.</xref:System.Drawing.FontFamily>       É possível chamar Dispose quando tiver terminado de utilizando <xref:System.Drawing.FontFamily>.</xref:System.Drawing.FontFamily> O método de Dispose deixa o <xref:System.Drawing.FontFamily>num Estado não utilizável.</xref:System.Drawing.FontFamily> Depois de chamar Dispose, tem de libertar todas as referências para o <xref:System.Drawing.FontFamily>para que o recoletor de lixo pode reclame a memória que a <xref:System.Drawing.FontFamily>foi occupying.</xref:System.Drawing.FontFamily> </xref:System.Drawing.FontFamily> Para obter mais informações, consulte [recursos não geridos limpeza](~/add/includes/ajax-current-ext-md.md) e [implementar um método eliminar](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Sempre chamada eliminar antes de libertar a última referência <xref:System.Drawing.FontFamily>.</xref:System.Drawing.FontFamily> Caso contrário, os recursos que está a utilizar não irão ser libertados até que as chamadas de recoletor de lixo a <xref:System.Drawing.FontFamily>do objeto `Finalize` método.</xref:System.Drawing.FontFamily>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Drawing.FontFamily.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.FontFamily.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Drawing.FontFamily
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: FontFamily.Equals(Object)
  fullName: System.Drawing.FontFamily.Equals(Object)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "Indica se o objeto especificado é um <xref href=&quot;System.Drawing.FontFamily&quot;> </xref> e é idêntica a esta <xref href=&quot;System.Drawing.FontFamily&quot;> </xref>."
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates two <xref:System.Drawing.Font> objects.  \n  \n-   Tests whether they are equivalent.  \n  \n-   Displays the result of the test in a message box.  \n  \n [!code-cpp[System.Drawing.ClassicFontFamilyExamples#1](~/add/codesnippet/cpp/m-system.drawing.fontfam_0_1.cpp)]\n [!code-cs[System.Drawing.ClassicFontFamilyExamples#1](~/add/codesnippet/csharp/m-system.drawing.fontfam_0_1.cs)]\n [!code-vb[System.Drawing.ClassicFontFamilyExamples#1](~/add/codesnippet/visualbasic/m-system.drawing.fontfam_0_1.vb)]"
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "O objeto de teste."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if <code>obj</code> is a <xref href=&quot;System.Drawing.FontFamily&quot;></xref> and is identical to this <xref href=&quot;System.Drawing.FontFamily&quot;></xref>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Drawing.FontFamily.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.FontFamily.Families
  id: Families
  parent: System.Drawing.FontFamily
  langs:
  - csharp
  name: Families
  nameWithType: FontFamily.Families
  fullName: System.Drawing.FontFamily.Families
  type: Property
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "Devolve uma matriz que contém todos os <xref href=&quot;System.Drawing.FontFamily&quot;> </xref> objetos associados ao contexto de gráficos atual."
  remarks: ''
  example:
  - "The following code example shows all the font families in the Families property of the <xref:System.Drawing.FontFamily> class. This example is designed to be used with a Windows Form. To run this example, add a <xref:System.Windows.Forms.ListBox> named `listBox1` to a form and call the `PopulateListBoxWithFonts` method from the form's constructor.  \n  \n [!code-cs[System.Drawing.MiscExamples#1](~/add/codesnippet/csharp/p-system.drawing.fontfam_0_1.cs)]\n [!code-cpp[System.Drawing.MiscExamples#1](~/add/codesnippet/cpp/p-system.drawing.fontfam_0_1.cpp)]\n [!code-vb[System.Drawing.MiscExamples#1](~/add/codesnippet/visualbasic/p-system.drawing.fontfam_0_1.vb)]"
  syntax:
    content: public static System.Drawing.FontFamily[] Families { get; }
    return:
      type: System.Drawing.FontFamily[]
      description: "Uma matriz de <xref href=&quot;System.Drawing.FontFamily&quot;> </xref> objetos associados ao contexto de gráficos atual."
  overload: System.Drawing.FontFamily.Families*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.FontFamily.Finalize
  id: Finalize
  parent: System.Drawing.FontFamily
  langs:
  - csharp
  name: Finalize()
  nameWithType: FontFamily.Finalize()
  fullName: System.Drawing.FontFamily.Finalize()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "Permite que um objeto para tentar libertar recursos e efetuar outras operações de limpeza antes de que reclamada a através da recolha de lixo."
  syntax:
    content: ~FontFamily ();
    parameters: []
  overload: System.Drawing.FontFamily.Finalize*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.FontFamily.GenericMonospace
  id: GenericMonospace
  parent: System.Drawing.FontFamily
  langs:
  - csharp
  name: GenericMonospace
  nameWithType: FontFamily.GenericMonospace
  fullName: System.Drawing.FontFamily.GenericMonospace
  type: Property
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "Obtém um monospace genérico <xref href=&quot;System.Drawing.FontFamily&quot;> </xref>."
  syntax:
    content: public static System.Drawing.FontFamily GenericMonospace { get; }
    return:
      type: System.Drawing.FontFamily
      description: "A <xref href=&quot;System.Drawing.FontFamily&quot;> </xref> que representa um tipo de letra monospace genérico."
  overload: System.Drawing.FontFamily.GenericMonospace*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.FontFamily.GenericSansSerif
  id: GenericSansSerif
  parent: System.Drawing.FontFamily
  langs:
  - csharp
  name: GenericSansSerif
  nameWithType: FontFamily.GenericSansSerif
  fullName: System.Drawing.FontFamily.GenericSansSerif
  type: Property
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "Obtém um serif sans genérico <xref href=&quot;System.Drawing.FontFamily&quot;> </xref> objeto."
  syntax:
    content: public static System.Drawing.FontFamily GenericSansSerif { get; }
    return:
      type: System.Drawing.FontFamily
      description: "A <xref href=&quot;System.Drawing.FontFamily&quot;> </xref> objeto que representa um tipo de letra genérico sans serif."
  overload: System.Drawing.FontFamily.GenericSansSerif*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.FontFamily.GenericSerif
  id: GenericSerif
  parent: System.Drawing.FontFamily
  langs:
  - csharp
  name: GenericSerif
  nameWithType: FontFamily.GenericSerif
  fullName: System.Drawing.FontFamily.GenericSerif
  type: Property
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "Obtém um serif genérico <xref href=&quot;System.Drawing.FontFamily&quot;> </xref>."
  syntax:
    content: public static System.Drawing.FontFamily GenericSerif { get; }
    return:
      type: System.Drawing.FontFamily
      description: "A <xref href=&quot;System.Drawing.FontFamily&quot;> </xref> que representa um tipo de letra serif genérico."
  overload: System.Drawing.FontFamily.GenericSerif*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.FontFamily.GetCellAscent(System.Drawing.FontStyle)
  id: GetCellAscent(System.Drawing.FontStyle)
  parent: System.Drawing.FontFamily
  langs:
  - csharp
  name: GetCellAscent(FontStyle)
  nameWithType: FontFamily.GetCellAscent(FontStyle)
  fullName: System.Drawing.FontFamily.GetCellAscent(FontStyle)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "Devolve o ascent célula, em unidades de design, do <xref href=&quot;System.Drawing.FontFamily&quot;> </xref> do estilo especificado."
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a <xref:System.Drawing.FontFamily>.  \n  \n-   Gets the cell ascent for that font family.  \n  \n-   Draws the value of the cell ascent to the screen as text.  \n  \n [!code-cpp[System.Drawing.ClassicFontFamilyExamples#2](~/add/codesnippet/cpp/m-system.drawing.fontfam_7_1.cpp)]\n [!code-cs[System.Drawing.ClassicFontFamilyExamples#2](~/add/codesnippet/csharp/m-system.drawing.fontfam_7_1.cs)]\n [!code-vb[System.Drawing.ClassicFontFamilyExamples#2](~/add/codesnippet/visualbasic/m-system.drawing.fontfam_7_1.vb)]"
  syntax:
    content: public int GetCellAscent (System.Drawing.FontStyle style);
    parameters:
    - id: style
      type: System.Drawing.FontStyle
      description: "A <xref href=&quot;System.Drawing.FontStyle&quot;> </xref> que contém informações de estilo para o tipo de letra."
    return:
      type: System.Int32
      description: "O ascent de célula para este <xref href=&quot;System.Drawing.FontFamily&quot;> </xref> que utiliza especificado <xref href=&quot;System.Drawing.FontStyle&quot;> </xref>."
  overload: System.Drawing.FontFamily.GetCellAscent*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.FontFamily.GetCellDescent(System.Drawing.FontStyle)
  id: GetCellDescent(System.Drawing.FontStyle)
  parent: System.Drawing.FontFamily
  langs:
  - csharp
  name: GetCellDescent(FontStyle)
  nameWithType: FontFamily.GetCellDescent(FontStyle)
  fullName: System.Drawing.FontFamily.GetCellDescent(FontStyle)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "Devolve o descendente de célula, em unidades de design, do <xref href=&quot;System.Drawing.FontFamily&quot;> </xref> do estilo especificado."
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a <xref:System.Drawing.FontFamily>.  \n  \n-   Gets the cell descent for that font family.  \n  \n-   Draws the value of the cell descent to the screen as text.  \n  \n [!code-cpp[System.Drawing.ClassicFontFamilyExamples#3](~/add/codesnippet/cpp/m-system.drawing.fontfam_5_1.cpp)]\n [!code-cs[System.Drawing.ClassicFontFamilyExamples#3](~/add/codesnippet/csharp/m-system.drawing.fontfam_5_1.cs)]\n [!code-vb[System.Drawing.ClassicFontFamilyExamples#3](~/add/codesnippet/visualbasic/m-system.drawing.fontfam_5_1.vb)]"
  syntax:
    content: public int GetCellDescent (System.Drawing.FontStyle style);
    parameters:
    - id: style
      type: System.Drawing.FontStyle
      description: "A <xref href=&quot;System.Drawing.FontStyle&quot;> </xref> que contém informações de estilo para o tipo de letra."
    return:
      type: System.Int32
      description: "A métrica de descendente de célula para este <xref href=&quot;System.Drawing.FontFamily&quot;> </xref> que utiliza especificado <xref href=&quot;System.Drawing.FontStyle&quot;> </xref>."
  overload: System.Drawing.FontFamily.GetCellDescent*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.FontFamily.GetEmHeight(System.Drawing.FontStyle)
  id: GetEmHeight(System.Drawing.FontStyle)
  parent: System.Drawing.FontFamily
  langs:
  - csharp
  name: GetEmHeight(FontStyle)
  nameWithType: FontFamily.GetEmHeight(FontStyle)
  fullName: System.Drawing.FontFamily.GetEmHeight(FontStyle)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "Obtém a altura, em unidades de estrutura de tipo de letra, do quadrado IT para o estilo especificado."
  remarks: '*Em square* is a typography term that refers to the rectangle occupied by the font''s widest letter, traditionally the letter M.'
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a <xref:System.Drawing.FontFamily>.  \n  \n-   Gets the em square height for that font family.  \n  \n-   Draws the value of the em height to the screen as text.  \n  \n [!code-cpp[System.Drawing.ClassicFontFamilyExamples#4](~/add/codesnippet/cpp/m-system.drawing.fontfam_3_1.cpp)]\n [!code-cs[System.Drawing.ClassicFontFamilyExamples#4](~/add/codesnippet/csharp/m-system.drawing.fontfam_3_1.cs)]\n [!code-vb[System.Drawing.ClassicFontFamilyExamples#4](~/add/codesnippet/visualbasic/m-system.drawing.fontfam_3_1.vb)]"
  syntax:
    content: public int GetEmHeight (System.Drawing.FontStyle style);
    parameters:
    - id: style
      type: System.Drawing.FontStyle
      description: "O <xref href=&quot;System.Drawing.FontStyle&quot;> </xref> para o qual obter a altura de IT."
    return:
      type: System.Int32
      description: "A altura do quadrado it."
  overload: System.Drawing.FontFamily.GetEmHeight*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.FontFamily.GetFamilies(System.Drawing.Graphics)
  id: GetFamilies(System.Drawing.Graphics)
  parent: System.Drawing.FontFamily
  langs:
  - csharp
  name: GetFamilies(Graphics)
  nameWithType: FontFamily.GetFamilies(Graphics)
  fullName: System.Drawing.FontFamily.GetFamilies(Graphics)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "Devolve uma matriz que contém todos os <xref href=&quot;System.Drawing.FontFamily&quot;> </xref> objetos disponíveis para o contexto de gráficos especificado."
  syntax:
    content: public static System.Drawing.FontFamily[] GetFamilies (System.Drawing.Graphics graphics);
    parameters:
    - id: graphics
      type: System.Drawing.Graphics
      description: "O <xref href=&quot;System.Drawing.Graphics&quot;> </xref> objeto a partir do qual devolver <xref href=&quot;System.Drawing.FontFamily&quot;> </xref> objetos."
    return:
      type: System.Drawing.FontFamily[]
      description: "Uma matriz de <xref href=&quot;System.Drawing.FontFamily&quot;> </xref> objetos disponíveis para especificado <xref href=&quot;System.Drawing.Graphics&quot;> </xref> objeto."
  overload: System.Drawing.FontFamily.GetFamilies*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>graphics </code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Drawing.FontFamily.GetHashCode
  id: GetHashCode
  parent: System.Drawing.FontFamily
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: FontFamily.GetHashCode()
  fullName: System.Drawing.FontFamily.GetHashCode()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "Obtém um código hash para este <xref href=&quot;System.Drawing.FontFamily&quot;> </xref>."
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a <xref:System.Drawing.FontFamily>.  \n  \n-   Gets the hash code for the font family.  \n  \n-   Draws the value of the hash code to the screen as text.  \n  \n [!code-cpp[System.Drawing.ClassicFontFamilyExamples#6](~/add/codesnippet/cpp/m-system.drawing.fontfam_8_1.cpp)]\n [!code-cs[System.Drawing.ClassicFontFamilyExamples#6](~/add/codesnippet/csharp/m-system.drawing.fontfam_8_1.cs)]\n [!code-vb[System.Drawing.ClassicFontFamilyExamples#6](~/add/codesnippet/visualbasic/m-system.drawing.fontfam_8_1.vb)]"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "O código hash <xref href=&quot;System.Drawing.FontFamily&quot;> </xref>."
  overload: System.Drawing.FontFamily.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.FontFamily.GetLineSpacing(System.Drawing.FontStyle)
  id: GetLineSpacing(System.Drawing.FontStyle)
  parent: System.Drawing.FontFamily
  langs:
  - csharp
  name: GetLineSpacing(FontStyle)
  nameWithType: FontFamily.GetLineSpacing(FontStyle)
  fullName: System.Drawing.FontFamily.GetLineSpacing(FontStyle)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "Devolve o espaçamento de linha em unidades de design, do <xref href=&quot;System.Drawing.FontFamily&quot;> </xref> do estilo especificado. O espaçamento de linha é a distância vertical entre as linhas de base de duas linhas consecutivas de texto."
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a <xref:System.Drawing.FontFamily>.  \n  \n-   Gets the line spacing for the font family.  \n  \n-   Draws the value of the line spacing to the screen as text.  \n  \n [!code-cpp[System.Drawing.ClassicFontFamilyExamples#7](~/add/codesnippet/cpp/m-system.drawing.fontfam_2_1.cpp)]\n [!code-cs[System.Drawing.ClassicFontFamilyExamples#7](~/add/codesnippet/csharp/m-system.drawing.fontfam_2_1.cs)]\n [!code-vb[System.Drawing.ClassicFontFamilyExamples#7](~/add/codesnippet/visualbasic/m-system.drawing.fontfam_2_1.vb)]"
  syntax:
    content: public int GetLineSpacing (System.Drawing.FontStyle style);
    parameters:
    - id: style
      type: System.Drawing.FontStyle
      description: "O <xref href=&quot;System.Drawing.FontStyle&quot;> </xref> a aplicar."
    return:
      type: System.Int32
      description: "A distância entre duas linhas consecutivas de texto."
  overload: System.Drawing.FontFamily.GetLineSpacing*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.FontFamily.GetName(System.Int32)
  id: GetName(System.Int32)
  parent: System.Drawing.FontFamily
  langs:
  - csharp
  name: GetName(Int32)
  nameWithType: FontFamily.GetName(Int32)
  fullName: System.Drawing.FontFamily.GetName(Int32)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "Devolve o nome, o idioma especificado, isto <xref href=&quot;System.Drawing.FontFamily&quot;> </xref>."
  remarks: "Para indicar o idioma neutro, deve especificar 0 para o `language` parâmetro. Para obter uma listagem dos idiomas disponíveis e sublanguages, consulte o ficheiro de cabeçalho Winnt.h. Se tiver [!INCLUDE[vsprvs](~/add/includes/vsprvs-md.md)] instalado, este ficheiro de cabeçalho pode normalmente ser encontrado relativa a [!INCLUDE[vsprvs](~/add/includes/vsprvs-md.md)] diretório de instalação em \\\\\\VC\\PlatformSDK\\Include."
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a <xref:System.Drawing.FontFamily>.  \n  \n-   Gets the name of the font family.  \n  \n-   Draws the name of the font family to the screen as text.  \n  \n [!code-cpp[System.Drawing.ClassicFontFamilyExamples#8](~/add/codesnippet/cpp/m-system.drawing.fontfam_4_1.cpp)]\n [!code-cs[System.Drawing.ClassicFontFamilyExamples#8](~/add/codesnippet/csharp/m-system.drawing.fontfam_4_1.cs)]\n [!code-vb[System.Drawing.ClassicFontFamilyExamples#8](~/add/codesnippet/visualbasic/m-system.drawing.fontfam_4_1.vb)]"
  syntax:
    content: public string GetName (int language);
    parameters:
    - id: language
      type: System.Int32
      description: "O idioma em que o nome é devolvido."
    return:
      type: System.String
      description: "A <xref:System.String>que representa o nome, o idioma especificado, isto <xref href=&quot;System.Drawing.FontFamily&quot;> </xref>.</xref:System.String>"
  overload: System.Drawing.FontFamily.GetName*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.FontFamily.IsStyleAvailable(System.Drawing.FontStyle)
  id: IsStyleAvailable(System.Drawing.FontStyle)
  parent: System.Drawing.FontFamily
  langs:
  - csharp
  name: IsStyleAvailable(FontStyle)
  nameWithType: FontFamily.IsStyleAvailable(FontStyle)
  fullName: System.Drawing.FontFamily.IsStyleAvailable(FontStyle)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "Indica se especificado <xref href=&quot;System.Drawing.FontStyle&quot;> </xref> enumeração está disponível."
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a <xref:System.Drawing.FontFamily>.  \n  \n-   Tests whether the font family is available in an italic font.  \n  \n-   If it is, draws text to the screen.  \n  \n [!code-cpp[System.Drawing.ClassicFontFamilyExamples#9](~/add/codesnippet/cpp/m-system.drawing.fontfam_6_1.cpp)]\n [!code-cs[System.Drawing.ClassicFontFamilyExamples#9](~/add/codesnippet/csharp/m-system.drawing.fontfam_6_1.cs)]\n [!code-vb[System.Drawing.ClassicFontFamilyExamples#9](~/add/codesnippet/visualbasic/m-system.drawing.fontfam_6_1.vb)]"
  syntax:
    content: public bool IsStyleAvailable (System.Drawing.FontStyle style);
    parameters:
    - id: style
      type: System.Drawing.FontStyle
      description: "O <xref href=&quot;System.Drawing.FontStyle&quot;> </xref> para testar."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se especificado <xref href=&quot;System.Drawing.FontStyle&quot;> </xref> está disponível; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Drawing.FontFamily.IsStyleAvailable*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.FontFamily.Name
  id: Name
  parent: System.Drawing.FontFamily
  langs:
  - csharp
  name: Name
  nameWithType: FontFamily.Name
  fullName: System.Drawing.FontFamily.Name
  type: Property
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "Obtém o nome deste <xref href=&quot;System.Drawing.FontFamily&quot;> </xref>."
  remarks: ''
  example:
  - "The following code example shows all the font families in the <xref:System.Drawing.FontFamily.Families%2A> property of the <xref:System.Drawing.FontFamily> class. This example is designed to be used with a Windows Form. To run this example, add a <xref:System.Windows.Forms.ListBox> named `listBox1` to a form, and call the `PopulateListBoxWithFonts` method from the form's constructor.  \n  \n [!code-cs[System.Drawing.MiscExamples#1](~/add/codesnippet/csharp/p-system.drawing.fontfam_1_1.cs)]\n [!code-cpp[System.Drawing.MiscExamples#1](~/add/codesnippet/cpp/p-system.drawing.fontfam_1_1.cpp)]\n [!code-vb[System.Drawing.MiscExamples#1](~/add/codesnippet/visualbasic/p-system.drawing.fontfam_1_1.vb)]"
  syntax:
    content: public string Name { get; }
    return:
      type: System.String
      description: "A <xref:System.String>que representa o nome deste <xref href=&quot;System.Drawing.FontFamily&quot;> </xref>.</xref:System.String>"
  overload: System.Drawing.FontFamily.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.FontFamily.ToString
  id: ToString
  parent: System.Drawing.FontFamily
  langs:
  - csharp
  name: ToString()
  nameWithType: FontFamily.ToString()
  fullName: System.Drawing.FontFamily.ToString()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "Converte esta <xref href=&quot;System.Drawing.FontFamily&quot;> </xref> para uma representação de cadeia legível por humanos."
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code creates a <xref:System.Drawing.FontFamily> and draws a string representation of the font family to the screen.  \n  \n [!code-cpp[System.Drawing.ClassicFontFamilyExamples#10](~/add/codesnippet/cpp/m-system.drawing.fontfam_1_1.cpp)]\n [!code-cs[System.Drawing.ClassicFontFamilyExamples#10](~/add/codesnippet/csharp/m-system.drawing.fontfam_1_1.cs)]\n [!code-vb[System.Drawing.ClassicFontFamilyExamples#10](~/add/codesnippet/visualbasic/m-system.drawing.fontfam_1_1.vb)]"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "A cadeia que representa esta <xref href=&quot;System.Drawing.FontFamily&quot;> </xref>."
  overload: System.Drawing.FontFamily.ToString*
  exceptions: []
  platform:
  - net462
references:
- uid: System.MarshalByRefObject
  isExternal: false
  name: System.MarshalByRefObject
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Drawing.FontFamily.#ctor(System.Drawing.Text.GenericFontFamilies)
  parent: System.Drawing.FontFamily
  isExternal: false
  name: FontFamily(GenericFontFamilies)
  nameWithType: FontFamily.FontFamily(GenericFontFamilies)
  fullName: System.Drawing.FontFamily.FontFamily(GenericFontFamilies)
- uid: System.Drawing.Text.GenericFontFamilies
  parent: System.Drawing.Text
  isExternal: false
  name: GenericFontFamilies
  nameWithType: GenericFontFamilies
  fullName: System.Drawing.Text.GenericFontFamilies
- uid: System.Drawing.FontFamily.#ctor(System.String)
  parent: System.Drawing.FontFamily
  isExternal: false
  name: FontFamily(String)
  nameWithType: FontFamily.FontFamily(String)
  fullName: System.Drawing.FontFamily.FontFamily(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Drawing.FontFamily.#ctor(System.String,System.Drawing.Text.FontCollection)
  parent: System.Drawing.FontFamily
  isExternal: false
  name: FontFamily(String,FontCollection)
  nameWithType: FontFamily.FontFamily(String,FontCollection)
  fullName: System.Drawing.FontFamily.FontFamily(String,FontCollection)
- uid: System.Drawing.Text.FontCollection
  parent: System.Drawing.Text
  isExternal: false
  name: FontCollection
  nameWithType: FontCollection
  fullName: System.Drawing.Text.FontCollection
- uid: System.Drawing.FontFamily.Dispose
  parent: System.Drawing.FontFamily
  isExternal: false
  name: Dispose()
  nameWithType: FontFamily.Dispose()
  fullName: System.Drawing.FontFamily.Dispose()
- uid: System.Drawing.FontFamily.Equals(System.Object)
  parent: System.Drawing.FontFamily
  isExternal: false
  name: Equals(Object)
  nameWithType: FontFamily.Equals(Object)
  fullName: System.Drawing.FontFamily.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Drawing.FontFamily.Families
  parent: System.Drawing.FontFamily
  isExternal: false
  name: Families
  nameWithType: FontFamily.Families
  fullName: System.Drawing.FontFamily.Families
- uid: System.Drawing.FontFamily[]
  parent: System.Drawing
  isExternal: false
  name: FontFamily
  nameWithType: FontFamily
  fullName: System.Drawing.FontFamily[]
  spec.csharp:
  - uid: System.Drawing.FontFamily
    name: FontFamily
    nameWithType: FontFamily
    fullName: FontFamily[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Drawing.FontFamily.Finalize
  parent: System.Drawing.FontFamily
  isExternal: false
  name: Finalize()
  nameWithType: FontFamily.Finalize()
  fullName: System.Drawing.FontFamily.Finalize()
- uid: System.Drawing.FontFamily.GenericMonospace
  parent: System.Drawing.FontFamily
  isExternal: false
  name: GenericMonospace
  nameWithType: FontFamily.GenericMonospace
  fullName: System.Drawing.FontFamily.GenericMonospace
- uid: System.Drawing.FontFamily
  parent: System.Drawing
  isExternal: false
  name: FontFamily
  nameWithType: FontFamily
  fullName: System.Drawing.FontFamily
- uid: System.Drawing.FontFamily.GenericSansSerif
  parent: System.Drawing.FontFamily
  isExternal: false
  name: GenericSansSerif
  nameWithType: FontFamily.GenericSansSerif
  fullName: System.Drawing.FontFamily.GenericSansSerif
- uid: System.Drawing.FontFamily.GenericSerif
  parent: System.Drawing.FontFamily
  isExternal: false
  name: GenericSerif
  nameWithType: FontFamily.GenericSerif
  fullName: System.Drawing.FontFamily.GenericSerif
- uid: System.Drawing.FontFamily.GetCellAscent(System.Drawing.FontStyle)
  parent: System.Drawing.FontFamily
  isExternal: false
  name: GetCellAscent(FontStyle)
  nameWithType: FontFamily.GetCellAscent(FontStyle)
  fullName: System.Drawing.FontFamily.GetCellAscent(FontStyle)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Drawing.FontStyle
  parent: System.Drawing
  isExternal: false
  name: FontStyle
  nameWithType: FontStyle
  fullName: System.Drawing.FontStyle
- uid: System.Drawing.FontFamily.GetCellDescent(System.Drawing.FontStyle)
  parent: System.Drawing.FontFamily
  isExternal: false
  name: GetCellDescent(FontStyle)
  nameWithType: FontFamily.GetCellDescent(FontStyle)
  fullName: System.Drawing.FontFamily.GetCellDescent(FontStyle)
- uid: System.Drawing.FontFamily.GetEmHeight(System.Drawing.FontStyle)
  parent: System.Drawing.FontFamily
  isExternal: false
  name: GetEmHeight(FontStyle)
  nameWithType: FontFamily.GetEmHeight(FontStyle)
  fullName: System.Drawing.FontFamily.GetEmHeight(FontStyle)
- uid: System.Drawing.FontFamily.GetFamilies(System.Drawing.Graphics)
  parent: System.Drawing.FontFamily
  isExternal: false
  name: GetFamilies(Graphics)
  nameWithType: FontFamily.GetFamilies(Graphics)
  fullName: System.Drawing.FontFamily.GetFamilies(Graphics)
- uid: System.Drawing.Graphics
  parent: System.Drawing
  isExternal: false
  name: Graphics
  nameWithType: Graphics
  fullName: System.Drawing.Graphics
- uid: System.Drawing.FontFamily.GetHashCode
  parent: System.Drawing.FontFamily
  isExternal: false
  name: GetHashCode()
  nameWithType: FontFamily.GetHashCode()
  fullName: System.Drawing.FontFamily.GetHashCode()
- uid: System.Drawing.FontFamily.GetLineSpacing(System.Drawing.FontStyle)
  parent: System.Drawing.FontFamily
  isExternal: false
  name: GetLineSpacing(FontStyle)
  nameWithType: FontFamily.GetLineSpacing(FontStyle)
  fullName: System.Drawing.FontFamily.GetLineSpacing(FontStyle)
- uid: System.Drawing.FontFamily.GetName(System.Int32)
  parent: System.Drawing.FontFamily
  isExternal: false
  name: GetName(Int32)
  nameWithType: FontFamily.GetName(Int32)
  fullName: System.Drawing.FontFamily.GetName(Int32)
- uid: System.Drawing.FontFamily.IsStyleAvailable(System.Drawing.FontStyle)
  parent: System.Drawing.FontFamily
  isExternal: false
  name: IsStyleAvailable(FontStyle)
  nameWithType: FontFamily.IsStyleAvailable(FontStyle)
  fullName: System.Drawing.FontFamily.IsStyleAvailable(FontStyle)
- uid: System.Drawing.FontFamily.Name
  parent: System.Drawing.FontFamily
  isExternal: false
  name: Name
  nameWithType: FontFamily.Name
  fullName: System.Drawing.FontFamily.Name
- uid: System.Drawing.FontFamily.ToString
  parent: System.Drawing.FontFamily
  isExternal: false
  name: ToString()
  nameWithType: FontFamily.ToString()
  fullName: System.Drawing.FontFamily.ToString()
- uid: System.Drawing.FontFamily.#ctor*
  parent: System.Drawing.FontFamily
  isExternal: false
  name: FontFamily
  nameWithType: FontFamily.FontFamily
- uid: System.Drawing.FontFamily.Dispose*
  parent: System.Drawing.FontFamily
  isExternal: false
  name: Dispose
  nameWithType: FontFamily.Dispose
- uid: System.Drawing.FontFamily.Equals*
  parent: System.Drawing.FontFamily
  isExternal: false
  name: Equals
  nameWithType: FontFamily.Equals
- uid: System.Drawing.FontFamily.Families*
  parent: System.Drawing.FontFamily
  isExternal: false
  name: Families
  nameWithType: FontFamily.Families
- uid: System.Drawing.FontFamily.Finalize*
  parent: System.Drawing.FontFamily
  isExternal: false
  name: Finalize
  nameWithType: FontFamily.Finalize
- uid: System.Drawing.FontFamily.GenericMonospace*
  parent: System.Drawing.FontFamily
  isExternal: false
  name: GenericMonospace
  nameWithType: FontFamily.GenericMonospace
- uid: System.Drawing.FontFamily.GenericSansSerif*
  parent: System.Drawing.FontFamily
  isExternal: false
  name: GenericSansSerif
  nameWithType: FontFamily.GenericSansSerif
- uid: System.Drawing.FontFamily.GenericSerif*
  parent: System.Drawing.FontFamily
  isExternal: false
  name: GenericSerif
  nameWithType: FontFamily.GenericSerif
- uid: System.Drawing.FontFamily.GetCellAscent*
  parent: System.Drawing.FontFamily
  isExternal: false
  name: GetCellAscent
  nameWithType: FontFamily.GetCellAscent
- uid: System.Drawing.FontFamily.GetCellDescent*
  parent: System.Drawing.FontFamily
  isExternal: false
  name: GetCellDescent
  nameWithType: FontFamily.GetCellDescent
- uid: System.Drawing.FontFamily.GetEmHeight*
  parent: System.Drawing.FontFamily
  isExternal: false
  name: GetEmHeight
  nameWithType: FontFamily.GetEmHeight
- uid: System.Drawing.FontFamily.GetFamilies*
  parent: System.Drawing.FontFamily
  isExternal: false
  name: GetFamilies
  nameWithType: FontFamily.GetFamilies
- uid: System.Drawing.FontFamily.GetHashCode*
  parent: System.Drawing.FontFamily
  isExternal: false
  name: GetHashCode
  nameWithType: FontFamily.GetHashCode
- uid: System.Drawing.FontFamily.GetLineSpacing*
  parent: System.Drawing.FontFamily
  isExternal: false
  name: GetLineSpacing
  nameWithType: FontFamily.GetLineSpacing
- uid: System.Drawing.FontFamily.GetName*
  parent: System.Drawing.FontFamily
  isExternal: false
  name: GetName
  nameWithType: FontFamily.GetName
- uid: System.Drawing.FontFamily.IsStyleAvailable*
  parent: System.Drawing.FontFamily
  isExternal: false
  name: IsStyleAvailable
  nameWithType: FontFamily.IsStyleAvailable
- uid: System.Drawing.FontFamily.Name*
  parent: System.Drawing.FontFamily
  isExternal: false
  name: Name
  nameWithType: FontFamily.Name
- uid: System.Drawing.FontFamily.ToString*
  parent: System.Drawing.FontFamily
  isExternal: false
  name: ToString
  nameWithType: FontFamily.ToString
