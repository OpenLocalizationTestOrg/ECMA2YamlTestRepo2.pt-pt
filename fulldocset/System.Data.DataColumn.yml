### YamlMime:ManagedReference
items:
- uid: System.Data.DataColumn
  id: DataColumn
  children:
  - System.Data.DataColumn.#ctor
  - System.Data.DataColumn.#ctor(System.String)
  - System.Data.DataColumn.#ctor(System.String,System.Type)
  - System.Data.DataColumn.#ctor(System.String,System.Type,System.String)
  - System.Data.DataColumn.#ctor(System.String,System.Type,System.String,System.Data.MappingType)
  - System.Data.DataColumn.AllowDBNull
  - System.Data.DataColumn.AutoIncrement
  - System.Data.DataColumn.AutoIncrementSeed
  - System.Data.DataColumn.AutoIncrementStep
  - System.Data.DataColumn.Caption
  - System.Data.DataColumn.CheckNotAllowNull
  - System.Data.DataColumn.CheckUnique
  - System.Data.DataColumn.ColumnMapping
  - System.Data.DataColumn.ColumnName
  - System.Data.DataColumn.DataType
  - System.Data.DataColumn.DateTimeMode
  - System.Data.DataColumn.DefaultValue
  - System.Data.DataColumn.Expression
  - System.Data.DataColumn.ExtendedProperties
  - System.Data.DataColumn.MaxLength
  - System.Data.DataColumn.Namespace
  - System.Data.DataColumn.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)
  - System.Data.DataColumn.Ordinal
  - System.Data.DataColumn.Prefix
  - System.Data.DataColumn.RaisePropertyChanging(System.String)
  - System.Data.DataColumn.ReadOnly
  - System.Data.DataColumn.SetOrdinal(System.Int32)
  - System.Data.DataColumn.Table
  - System.Data.DataColumn.ToString
  - System.Data.DataColumn.Unique
  langs:
  - csharp
  name: DataColumn
  nameWithType: DataColumn
  fullName: System.Data.DataColumn
  type: Class
  summary: "Representa o esquema de uma coluna num <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  remarks: "DataColumn é o bloco modular fundamental para criar o esquema de <xref:System.Data.DataTable>.</xref:System.Data.DataTable> Compilar o esquema, adicionando um ou mais objetos de DataColumn ao <xref:System.Data.DataColumnCollection>.</xref:System.Data.DataColumnCollection> Para obter mais informações, consulte [adição de colunas a uma DataTable](~/add/includes/ajax-current-ext-md.md).       Cada DataColumn tem um <xref:System.Data.DataColumn.DataType%2A>contém a propriedade que determina o tipo de dados DataColumn.</xref:System.Data.DataColumn.DataType%2A> Por exemplo, pode restringir o tipo de dados como números inteiros, as cadeias ou casas decimais. Porque os dados que estão contidos pelo <xref:System.Data.DataTable>normalmente intercalado novamente para a respetiva origem de dados original, tem de coincidir com os tipos de dados na origem de dados.</xref:System.Data.DataTable> Para obter mais informações, consulte [mapeamentos de tipos de dados ADO.NET](~/add/includes/ajax-current-ext-md.md).       As propriedades, tais como <xref:System.Data.DataColumn.AllowDBNull%2A>, <xref:System.Data.DataColumn.Unique%2A>, e <xref:System.Data.DataColumn.ReadOnly%2A>colocar restrições de entrada e de atualização de dados, deste modo, ajudando a garantir a integridade dos dados.</xref:System.Data.DataColumn.ReadOnly%2A> </xref:System.Data.DataColumn.Unique%2A> </xref:System.Data.DataColumn.AllowDBNull%2A> Também pode utilizar o <xref:System.Data.DataColumn.AutoIncrement%2A>, <xref:System.Data.DataColumn.AutoIncrementSeed%2A>, e <xref:System.Data.DataColumn.AutoIncrementStep%2A>Propriedades para controlar a geração de dados automática.</xref:System.Data.DataColumn.AutoIncrementStep%2A> </xref:System.Data.DataColumn.AutoIncrementSeed%2A> </xref:System.Data.DataColumn.AutoIncrement%2A> Para obter mais informações sobre <xref:System.Data.DataColumn.AutoIncrement%2A>colunas, consulte [criar colunas de AutoIncrement](~/add/includes/ajax-current-ext-md.md).</xref:System.Data.DataColumn.AutoIncrement%2A> Para obter mais informações, consulte [definir chaves primárias](~/add/includes/ajax-current-ext-md.md).       Também garantir que os valores existentes num DataColumn são exclusivos através da criação de um <xref:System.Data.UniqueConstraint>e adicioná-lo para o <xref:System.Data.ConstraintCollection>do <xref:System.Data.DataTable>a que pertence a DataColumn.</xref:System.Data.DataTable> </xref:System.Data.ConstraintCollection> </xref:System.Data.UniqueConstraint> Para obter mais informações, consulte [DataTable restrições](~/add/includes/ajax-current-ext-md.md).       Para criar uma relação entre objetos de DataColumn, criar um <xref:System.Data.DataRelation>objeto e adicioná-lo <xref:System.Data.DataRelationCollection>de um <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataRelationCollection> </xref:System.Data.DataRelation>       Pode utilizar o <xref:System.Data.DataColumn.Expression%2A>propriedade do objeto DataColumn calcular os valores numa coluna ou criar uma coluna agregada.</xref:System.Data.DataColumn.Expression%2A> Para obter mais informações, consulte [criar colunas de expressão](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example creates a <xref:System.Data.DataTable> with several DataColumn objects.  \n  \n [!code-cs[Classic WebData DataColumn Example#1](~/add/codesnippet/csharp/t-system.data.datacolumn_1.cs)]\n [!code-vb[Classic WebData DataColumn Example#1](~/add/codesnippet/visualbasic/t-system.data.datacolumn_1.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultProperty("ColumnName")]

      [System.ComponentModel.DesignTimeVisible(false)]

      [System.ComponentModel.Editor("Microsoft.VSDesigner.Data.Design.DataColumnEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      [System.ComponentModel.ToolboxItem(false)]

      public class DataColumn : System.ComponentModel.MarshalByValueComponent
  inheritance:
  - System.Object
  - System.ComponentModel.MarshalByValueComponent
  implements: []
  inheritedMembers:
  - System.ComponentModel.MarshalByValueComponent.Container
  - System.ComponentModel.MarshalByValueComponent.DesignMode
  - System.ComponentModel.MarshalByValueComponent.Dispose
  - System.ComponentModel.MarshalByValueComponent.Dispose(System.Boolean)
  - System.ComponentModel.MarshalByValueComponent.Disposed
  - System.ComponentModel.MarshalByValueComponent.Events
  - System.ComponentModel.MarshalByValueComponent.GetService(System.Type)
  - System.ComponentModel.MarshalByValueComponent.Site
  platform:
  - net462
- uid: System.Data.DataColumn.#ctor
  id: '#ctor'
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: DataColumn()
  nameWithType: DataColumn.DataColumn()
  fullName: System.Data.DataColumn.DataColumn()
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Inicializa uma nova instância de um <xref href=&quot;System.Data.DataColumn&quot;> </xref> classe como cadeia de tipo."
  remarks: "Quando criado, um <xref:System.Data.DataColumn>objeto não tem predefinição <xref:System.Data.DataColumn.ColumnName%2A>ou <xref:System.Data.DataColumn.Caption%2A>.</xref:System.Data.DataColumn.Caption%2A> </xref:System.Data.DataColumn.ColumnName%2A> </xref:System.Data.DataColumn> Quando adicionar um <xref:System.Data.DataColumnCollection>será gerado um nome predefinido (&quot;Coluna1&quot;, &quot;Coluna2&quot; e assim sucessivamente) se não tiver sido atribuído um nome para o <xref:System.Data.DataColumn.ColumnName%2A>.</xref:System.Data.DataColumn.ColumnName%2A> </xref:System.Data.DataColumnCollection>"
  example:
  - "The following example creates a new <xref:System.Data.DataColumn>, sets various properties, and adds it to a <xref:System.Data.DataColumnCollection> for the <xref:System.Data.DataTable> object.  \n  \n [!code-vb[Classic WebData DataColumn.DataColumn Example#1](~/add/codesnippet/visualbasic/m-system.data.datacolumn_13_1.vb)]\n [!code-cs[Classic WebData DataColumn.DataColumn Example#1](~/add/codesnippet/csharp/m-system.data.datacolumn_13_1.cs)]"
  syntax:
    content: public DataColumn ();
    parameters: []
  overload: System.Data.DataColumn.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: DataColumn(String)
  nameWithType: DataColumn.DataColumn(String)
  fullName: System.Data.DataColumn.DataColumn(String)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Data.DataColumn&quot;> </xref> classe, como cadeia de tipo, utilizando o nome de coluna especificada."
  remarks: "Por predefinição, o nome específico para uma coluna torna-se a <xref:System.Data.DataColumn.Caption%2A>valor da propriedade.</xref:System.Data.DataColumn.Caption%2A>"
  example:
  - "The following example creates a new <xref:System.Data.DataColumn> with a specified <xref:System.Data.DataColumn.ColumnName%2A>.  \n  \n [!code-vb[Classic WebData DataColumn.DataColumn1 Example#1](~/add/codesnippet/visualbasic/m-system.data.datacolumn_6_1.vb)]\n [!code-cs[Classic WebData DataColumn.DataColumn1 Example#1](~/add/codesnippet/csharp/m-system.data.datacolumn_6_1.cs)]"
  syntax:
    content: public DataColumn (string columnName);
    parameters:
    - id: columnName
      type: System.String
      description: "Uma cadeia que representa o nome da coluna a ser criado. Se definido como <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> ou uma cadeia vazia (&quot;&quot;), irá ser especificado um nome predefinido quando adicionados à coleção de colunas."
  overload: System.Data.DataColumn.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.#ctor(System.String,System.Type)
  id: '#ctor(System.String,System.Type)'
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: DataColumn(String,Type)
  nameWithType: DataColumn.DataColumn(String,Type)
  fullName: System.Data.DataColumn.DataColumn(String,Type)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Data.DataColumn&quot;> </xref> classe utilizando o tipo de dados e o nome de coluna especificada."
  remarks: ''
  example:
  - "The following example creates a new <xref:System.Data.DataColumn> with a specified <xref:System.Data.DataColumn.ColumnName%2A> and <xref:System.Data.DataColumn.DataType%2A>.  \n  \n [!code-cs[Classic WebData DataColumn.DataColumn2 Example#1](~/add/codesnippet/csharp/m-system.data.datacolumn_15_1.cs)]\n [!code-vb[Classic WebData DataColumn.DataColumn2 Example#1](~/add/codesnippet/visualbasic/m-system.data.datacolumn_15_1.vb)]"
  syntax:
    content: public DataColumn (string columnName, Type dataType);
    parameters:
    - id: columnName
      type: System.String
      description: "Uma cadeia que representa o nome da coluna a ser criado. Se definido como <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> ou uma cadeia vazia (&quot;&quot;), irá ser especificado um nome predefinido quando adicionados à coleção de colunas."
    - id: dataType
      type: System.Type
      description: "Um <xref:System.Data.DataColumn.DataType*>.</xref:System.Data.DataColumn.DataType*> suportados"
  overload: System.Data.DataColumn.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Não <code> dataType </code> foi especificado."
  platform:
  - net462
- uid: System.Data.DataColumn.#ctor(System.String,System.Type,System.String)
  id: '#ctor(System.String,System.Type,System.String)'
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: DataColumn(String,Type,String)
  nameWithType: DataColumn.DataColumn(String,Type,String)
  fullName: System.Data.DataColumn.DataColumn(String,Type,String)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Data.DataColumn&quot;> </xref> classe com o nome especificado, o tipo de dados e a expressão."
  remarks: ''
  example:
  - "The following example creates a computed column.  \n  \n [!code-vb[Classic WebData DataColumn.DataColumn3 Example#1](~/add/codesnippet/visualbasic/m-system.data.datacolumn_8_1.vb)]\n [!code-cs[Classic WebData DataColumn.DataColumn3 Example#1](~/add/codesnippet/csharp/m-system.data.datacolumn_8_1.cs)]"
  syntax:
    content: public DataColumn (string columnName, Type dataType, string expr);
    parameters:
    - id: columnName
      type: System.String
      description: "Uma cadeia que representa o nome da coluna a ser criado. Se definido como <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> ou uma cadeia vazia (&quot;&quot;), irá ser especificado um nome predefinido quando adicionados à coleção de colunas."
    - id: dataType
      type: System.Type
      description: "Um <xref:System.Data.DataColumn.DataType*>.</xref:System.Data.DataColumn.DataType*> suportados"
    - id: expr
      type: System.String
      description: "A expressão utilizada para criar esta coluna. Para obter mais informações, consulte o <xref:System.Data.DataColumn.Expression*>propriedade.</xref:System.Data.DataColumn.Expression*>"
  overload: System.Data.DataColumn.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Não <code> dataType </code> foi especificado."
  platform:
  - net462
- uid: System.Data.DataColumn.#ctor(System.String,System.Type,System.String,System.Data.MappingType)
  id: '#ctor(System.String,System.Type,System.String,System.Data.MappingType)'
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: DataColumn(String,Type,String,MappingType)
  nameWithType: DataColumn.DataColumn(String,Type,String,MappingType)
  fullName: System.Data.DataColumn.DataColumn(String,Type,String,MappingType)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Data.DataColumn&quot;> </xref> utilizando o nome especificado, o tipo de dados, a expressão e o valor que determina se a coluna é um atributo de classe."
  remarks: "The `type` argument sets the <xref:System.Data.DataColumn.ColumnMapping%2A> property. The property specifies how a <xref:System.Data.DataColumn> is mapped when a <xref:System.Data.DataSet> is transformed into an XML document. For example, if the column is named \"fName,\" and the value it contains is \"Bob,\" and `type` is set to `MappingType.Attribute`, the XML element would be as follows:  \n  \n \\<Name fName = 'Bob'/>  \n  \n For more information about how columns are mapped to elements or attributes, see the <xref:System.Data.DataColumn.ColumnMapping%2A> property."
  example:
  - "The following example constructs a computed column.  \n  \n [!code-cs[Classic WebData DataColumn.DataColumn4 Example#1](~/add/codesnippet/csharp/0bebed42-c35c-4bf3-9757-_1.cs)]\n [!code-vb[Classic WebData DataColumn.DataColumn4 Example#1](~/add/codesnippet/visualbasic/0bebed42-c35c-4bf3-9757-_1.vb)]"
  syntax:
    content: public DataColumn (string columnName, Type dataType, string expr, System.Data.MappingType type);
    parameters:
    - id: columnName
      type: System.String
      description: "Uma cadeia que representa o nome da coluna a ser criado. Se definido como <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> ou uma cadeia vazia (&quot;&quot;), irá ser especificado um nome predefinido quando adicionados à coleção de colunas."
    - id: dataType
      type: System.Type
      description: "Um <xref:System.Data.DataColumn.DataType*>.</xref:System.Data.DataColumn.DataType*> suportados"
    - id: expr
      type: System.String
      description: "A expressão utilizada para criar esta coluna. Para obter mais informações, consulte o <xref:System.Data.DataColumn.Expression*>propriedade.</xref:System.Data.DataColumn.Expression*>"
    - id: type
      type: System.Data.MappingType
      description: "Um do <xref href=&quot;System.Data.MappingType&quot;> </xref> valores."
  overload: System.Data.DataColumn.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Não <code> dataType </code> foi especificado."
  platform:
  - net462
- uid: System.Data.DataColumn.AllowDBNull
  id: AllowDBNull
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: AllowDBNull
  nameWithType: DataColumn.AllowDBNull
  fullName: System.Data.DataColumn.AllowDBNull
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Obtém ou define um valor que indica se valores null são permitidos nesta coluna para as linhas que pertencem à tabela."
  remarks: ''
  example:
  - "The following example creates a new <xref:System.Data.DataColumn> and sets its AllowDBNull property to `true`.  \n  \n [!code-vb[Classic WebData DataColumn.AllowDBNull Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_2_1.vb)]\n [!code-cs[Classic WebData DataColumn.AllowDBNull Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_2_1.cs)]"
  syntax:
    content: public bool AllowDBNull { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se os valores de valores null são permitidos; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. A predefinição é <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataColumn.AllowDBNull*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.AutoIncrement
  id: AutoIncrement
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: AutoIncrement
  nameWithType: DataColumn.AutoIncrement
  fullName: System.Data.DataColumn.AutoIncrement
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Obtém ou define um valor que indica se a coluna incrementa automaticamente o valor da coluna para novas linhas adicionadas à tabela."
  remarks: "Se o tipo desta coluna não Int16, Int32 ou Int64 quando esta propriedade for definida, o <xref:System.Data.DataColumn.DataType%2A>propriedade é forçada a Int32.</xref:System.Data.DataColumn.DataType%2A> Uma exceção é gerada se se tratar de uma coluna calculada. O <xref:System.Data.DataColumn.Expression%2A>propriedade está definida.</xref:System.Data.DataColumn.Expression%2A> O valor a incrementar é utilizado apenas se o valor da linha para esta coluna, quando adicionados à coleção de colunas, é igual ao valor predefinido.       Pode criar uma nova linha utilizando o <xref:System.Data.DataRow.ItemArray%2A>propriedade o <xref:System.Data.DataRow>classe e transmitir numa matriz de valores.</xref:System.Data.DataRow> </xref:System.Data.DataRow.ItemArray%2A> Este é um potencial problema de uma coluna com o respetivo AutoIncrement definido como `true`, porque o respetivo valor é gerado automaticamente. Para utilizar o <xref:System.Data.DataRow.ItemArray%2A>propriedade, local `null` na posição da coluna na matriz.</xref:System.Data.DataRow.ItemArray%2A> Para obter mais informações, consulte a <xref:System.Data.DataRow.ItemArray%2A>propriedade de <xref:System.Data.DataRow>classe.</xref:System.Data.DataRow> </xref:System.Data.DataRow.ItemArray%2A>       Se o tipo da coluna é <xref:System.Data.SqlTypes.SqlInt16>ou <xref:System.Data.SqlTypes.SqlInt32>, AutoIncrement não funcionará.</xref:System.Data.SqlTypes.SqlInt32> </xref:System.Data.SqlTypes.SqlInt16> Em alternativa, utilize Int16 ou Int32.       Se o tipo da coluna é <xref:System.Data.SqlTypes.SqlInt64>ou <xref:System.Data.SqlTypes.SqlDecimal>, funcionarão apenas parcialmente AutoIncrement.</xref:System.Data.SqlTypes.SqlDecimal> </xref:System.Data.SqlTypes.SqlInt64> Em alternativa, utilize Int64 ou Decimal.       Quando o <xref:System.Data.DataColumn.AutoIncrementStep%2A>valor é adicionado o valor atual, a verificação de capacidade excedida é suprimida.</xref:System.Data.DataColumn.AutoIncrementStep%2A>"
  example:
  - "The following example sets the AutoIncrement, <xref:System.Data.DataColumn.AutoIncrementSeed%2A>, and <xref:System.Data.DataColumn.AutoIncrementStep%2A> properties.  \n  \n [!code-vb[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_13_1.vb)]\n [!code-cs[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_13_1.cs)]"
  syntax:
    content: public bool AutoIncrement { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o valor da coluna incrementa automaticamente; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. A predefinição é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataColumn.AutoIncrement*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "A coluna é uma coluna calculada."
  platform:
  - net462
- uid: System.Data.DataColumn.AutoIncrementSeed
  id: AutoIncrementSeed
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: AutoIncrementSeed
  nameWithType: DataColumn.AutoIncrementSeed
  fullName: System.Data.DataColumn.AutoIncrementSeed
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Obtém ou define o valor inicial para uma coluna que tem o <xref:System.Data.DataColumn.AutoIncrement*>propriedade definida como <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>.</xref:System.Data.DataColumn.AutoIncrement*> A predefinição é 0."
  remarks: ''
  example:
  - "The following example sets the <xref:System.Data.DataColumn.AutoIncrement%2A>, AutoIncrementSeed, and <xref:System.Data.DataColumn.AutoIncrementStep%2A> properties.  \n  \n [!code-vb[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_15_1.vb)]\n [!code-cs[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_15_1.cs)]"
  syntax:
    content: public long AutoIncrementSeed { get; set; }
    return:
      type: System.Int64
      description: "O valor inicial para o <xref:System.Data.DataColumn.AutoIncrement*>funcionalidade.</xref:System.Data.DataColumn.AutoIncrement*>"
  overload: System.Data.DataColumn.AutoIncrementSeed*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.AutoIncrementStep
  id: AutoIncrementStep
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: AutoIncrementStep
  nameWithType: DataColumn.AutoIncrementStep
  fullName: System.Data.DataColumn.AutoIncrementStep
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Obtém ou define o incremento utilizado por uma coluna com o respetivo <xref:System.Data.DataColumn.AutoIncrement*>propriedade definida como <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>.</xref:System.Data.DataColumn.AutoIncrement*>"
  remarks: ''
  example:
  - "The following example sets the <xref:System.Data.DataColumn.AutoIncrement%2A>, <xref:System.Data.DataColumn.AutoIncrementSeed%2A>, and AutoIncrementStep properties.  \n  \n [!code-vb[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_7_1.vb)]\n [!code-cs[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_7_1.cs)]"
  syntax:
    content: public long AutoIncrementStep { get; set; }
    return:
      type: System.Int64
      description: "O número pelo qual o valor da coluna é incrementado automaticamente. A predefinição é 1."
  overload: System.Data.DataColumn.AutoIncrementStep*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O conjunto de valor é zero."
  platform:
  - net462
- uid: System.Data.DataColumn.Caption
  id: Caption
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: Caption
  nameWithType: DataColumn.Caption
  fullName: System.Data.DataColumn.Caption
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Obtém ou define a legenda da coluna."
  remarks: "Pode utilizar a propriedade de legenda para apresentar um nome amigável ou descritivo para uma <xref:System.Data.DataColumn>.</xref:System.Data.DataColumn>"
  example:
  - "The following example creates a new <xref:System.Data.DataTable>. It then adds three <xref:System.Data.DataColumn> objects to a <xref:System.Data.DataColumnCollection> and sets the Caption property for each <xref:System.Data.DataColumn>.  \n  \n [!code-cs[Classic WebData DataColumn.Caption Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_5_1.cs)]\n [!code-vb[Classic WebData DataColumn.Caption Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_5_1.vb)]"
  syntax:
    content: public string Caption { get; set; }
    return:
      type: System.String
      description: "A legenda da coluna. Se não estiver definido, que devolve o <xref:System.Data.DataColumn.ColumnName*>valor.</xref:System.Data.DataColumn.ColumnName*>"
  overload: System.Data.DataColumn.Caption*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.CheckNotAllowNull
  id: CheckNotAllowNull
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: CheckNotAllowNull()
  nameWithType: DataColumn.CheckNotAllowNull()
  fullName: System.Data.DataColumn.CheckNotAllowNull()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Este membro suporta a infraestrutura do .NET Framework e não se destina a ser utilizado diretamente a partir do seu código."
  syntax:
    content: protected void CheckNotAllowNull ();
    parameters: []
  overload: System.Data.DataColumn.CheckNotAllowNull*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.CheckUnique
  id: CheckUnique
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: CheckUnique()
  nameWithType: DataColumn.CheckUnique()
  fullName: System.Data.DataColumn.CheckUnique()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Este membro suporta a infraestrutura do .NET Framework e não se destina a ser utilizado diretamente a partir do seu código."
  syntax:
    content: protected void CheckUnique ();
    parameters: []
  overload: System.Data.DataColumn.CheckUnique*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.ColumnMapping
  id: ColumnMapping
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: ColumnMapping
  nameWithType: DataColumn.ColumnMapping
  fullName: System.Data.DataColumn.ColumnMapping
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Obtém ou define o <xref href=&quot;System.Data.MappingType&quot;> </xref> da coluna."
  remarks: "A propriedade ColumnMapping determina como um <xref:System.Data.DataColumn>está mapeada quando um <xref:System.Data.DataSet>é guardada como um documento XML a utilizar o <xref:System.Data.DataSet.WriteXml%2A>método.</xref:System.Data.DataSet.WriteXml%2A> </xref:System.Data.DataSet> </xref:System.Data.DataColumn>       Por exemplo, se um <xref:System.Data.DataColumn>é denominado &quot;customerID&quot; e o respetivo ColumnMapping propriedade está definida como `MappingType.Element`, o valor de coluna irá produzir o seguinte XML: ```   <Customers>    <customerID>ALFKI</customerID>   ......    </Customers>    <Orders>    <OrderID>12345</OrderID>    <customerID>ALFKI</customerID>   ......    </Orders>   ``` no entanto, se a mesma coluna é mapeada para `MappingType.Attribute`, o seguinte XML é produzido: ```   <Customers customerID=&quot;ALFKI&quot;........more attributes.....>    <Order orderID=&quot;1234&quot;....more attributes..../>    <Order orderID=&quot;1234&quot;....more attributes..../>   ...... More orders for this customer    </Customers>   ``` utilize o <xref:System.Data.DataColumn.%23ctor%2A>construtor que contém o `type` argumento specificy como o <xref:System.Data.DataColumn>está mapeada quando o <xref:System.Data.DataSet>é transformada para um documento XML.</xref:System.Data.DataSet> </xref:System.Data.DataColumn> </xref:System.Data.DataColumn.%23ctor%2A> </xref:System.Data.DataColumn>       A propriedade ColumnMapping correspondente para o argumento de construtor `type`."
  example:
  - "The following example sets the ColumnMapping type property of new <xref:System.Data.DataColumn>.  \n  \n [!code-cs[Classic WebData DataColumn.ColumnMapping Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_9_1.cs)]\n [!code-vb[Classic WebData DataColumn.ColumnMapping Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_9_1.vb)]"
  syntax:
    content: public virtual System.Data.MappingType ColumnMapping { get; set; }
    return:
      type: System.Data.MappingType
      description: "Um do <xref href=&quot;System.Data.MappingType&quot;> </xref> valores."
  overload: System.Data.DataColumn.ColumnMapping*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.ColumnName
  id: ColumnName
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: ColumnName
  nameWithType: DataColumn.ColumnName
  fullName: System.Data.DataColumn.ColumnName
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Obtém ou define o nome da coluna no <xref href=&quot;System.Data.DataColumnCollection&quot;> </xref>."
  remarks: "Quando um <xref:System.Data.DataColumn>é não criado, tem nenhum valor ColumnName.</xref:System.Data.DataColumn> No entanto, quando o <xref:System.Data.DataColumn>é adicionada a um <xref:System.Data.DataColumnCollection>para um <xref:System.Data.DataTable>objeto é fornecido um nome predefinido (&quot;Coluna1&quot;, &quot;Coluna2&quot; e assim sucessivamente).</xref:System.Data.DataTable> </xref:System.Data.DataColumnCollection> </xref:System.Data.DataColumn>       Por predefinição, o <xref:System.Data.DataColumn.Caption%2A>valor é definido para o valor de ColumnName.</xref:System.Data.DataColumn.Caption%2A>"
  example:
  - "The following examples gets the ColumnName for every column in every table in a <xref:System.Data.DataSet>. The example also shows how to create a <xref:System.Data.DataColumn> with a new ColumnName.  \n  \n [!code-vb[Classic WebData DataColumn.ColumnName Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_8_1.vb)]\n [!code-cs[Classic WebData DataColumn.ColumnName Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_8_1.cs)]"
  syntax:
    content: public string ColumnName { get; set; }
    return:
      type: System.String
      description: "O nome da coluna."
  overload: System.Data.DataColumn.ColumnName*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "A propriedade está definida como <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> ou uma cadeia vazia e a coluna pertence a uma coleção."
  - type: System.Data.DuplicateNameException
    commentId: T:System.Data.DuplicateNameException
    description: "Já existe uma coluna com o mesmo nome na coleção. A comparação do nome não é sensível às maiúsculas e minúsculas."
  platform:
  - net462
- uid: System.Data.DataColumn.DataType
  id: DataType
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: DataType
  nameWithType: DataColumn.DataType
  fullName: System.Data.DataColumn.DataType
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Obtém ou define o tipo de dados armazenados na coluna."
  remarks: "Definir o valor de tipo de dados é muito importante guaranteeing a criação de correta e de atualização de dados da origem de dados.       A propriedade DataType suporta os seguintes tipos de dados .NET Framework base:- <xref:System.Boolean>- <xref:System.Byte>- <xref:System.Char>- <xref:System.DateTime>- <xref:System.Decimal>- <xref:System.Double>- <xref:System.Guid>- <xref:System.Int16>- <xref:System.Int32>- <xref:System.Int64>- <xref:System.SByte>- <xref:System.Single>- <xref:System.String>- <xref:System.TimeSpan>- <xref:System.UInt16>- <xref:System.UInt32>- <xref:System.UInt64>, bem como o tipo de matriz seguintes:- `Byte[]` uma exceção é gerada quando a alteração desta propriedade após a coluna começou a armazenar dados.</xref:System.UInt64> </xref:System.UInt32> </xref:System.UInt16> </xref:System.TimeSpan> </xref:System.String> </xref:System.Single> </xref:System.SByte> </xref:System.Int64> </xref:System.Int32> </xref:System.Int16> </xref:System.Guid> </xref:System.Double> </xref:System.Decimal> </xref:System.DateTime> </xref:System.Char> </xref:System.Byte> </xref:System.Boolean>       Se <xref:System.Data.DataColumn.AutoIncrement%2A>está definido como `true` antes de definir a propriedade DataType e tentar definir o tipo de tudo, exceto um tipo de número inteiro, é gerada uma exceção.</xref:System.Data.DataColumn.AutoIncrement%2A>      > [!NOTE] > Uma coluna do tipo de dados `Byte[]` requer um tratamento especial em certos casos, uma vez que, ao contrário dos tipos de dados base do .NET Framework, é um tipo de dados de referência. Se uma coluna do tipo de dados `Byte[]` é utilizado como um <xref:System.Data.DataTable.PrimaryKey%2A>, ou como um <xref:System.Data.DataView.Sort%2A>ou <xref:System.Data.DataView.RowFilter%2A>chave para um <xref:System.Data.DataView>, qualquer alteração no valor de coluna tem envolvem atribuir o `Byte[]` valor de coluna para um separadamente instanciadas `Byte[]` objeto.</xref:System.Data.DataView> </xref:System.Data.DataView.RowFilter%2A> </xref:System.Data.DataView.Sort%2A> </xref:System.Data.DataTable.PrimaryKey%2A> Esta atribuição é necessário para acionar a atualização dos índices internos utilizado pelo ordenação, filtragem e operações de chaves primárias. Esta situação é ilustrada no seguinte exemplo: ```   byte[] columnValue = (byte[])myDataTable.Rows[0][0];   byte[] newValue = (byte[])columnValue.Clone();   newValue[1] = 2;   myDataTable.Rows[0][0] = newValue;   ```       >  [!NOTE] > embora seja possível definir uma coluna como o tipo de dados que os tipos base de dados .NET Framework e `Byte[]`, essa uma coluna será tratada como um tipo definido pelo utilizador, sujeita a restrições de utilização seguintes. (Para obter mais informações sobre tipos definidos pelo utilizador, consulte [criar e tipos de Using User-Defined](http://msdn.microsoft.com/en-us/ec0266d2-7e5b-47e4-938a-85ac9d04fa40).)      -A coluna não pode fazer parte de um <xref:System.Data.DataView.RowFilter%2A>ou <xref:System.Data.DataTable.Select%2A>expressão.</xref:System.Data.DataTable.Select%2A> </xref:System.Data.DataView.RowFilter%2A>      -Se a coluna é utilizada como um <xref:System.Data.DataTable.PrimaryKey%2A>, ou como um <xref:System.Data.DataView.Sort%2A>ou para um <xref:System.Data.DataView>, têm de ser tratada como um campo imutável; os dados da coluna não pode ser alterados depois de foi adicionada à tabela.</xref:System.Data.DataView> </xref:System.Data.DataView.Sort%2A> </xref:System.Data.DataTable.PrimaryKey%2A>      -O <xref:System.Data.DataColumn.ColumnMapping%2A>só pode ser definida `MappingType.Element`.</xref:System.Data.DataColumn.ColumnMapping%2A>      -Classe que implementa o tipo de dados da coluna tem de ser deve ser marcadas com o <xref:System.SerializableAttribute>, e, se necessário implementar o <xref:System.Runtime.Serialization.ISerializable>ou <xref:System.Xml.Serialization.IXmlSerializable>interface.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Runtime.Serialization.ISerializable> </xref:System.SerializableAttribute>      -Suporte para registo de alterações está limitado. Para utilizar o <xref:System.Data.DataTable>mecanismo de controlo de alterações da classe, a classe que implementa o tipo de dados da coluna está tem de implementar o <xref:System.ComponentModel.IChangeTracking>interface ou assuma a responsabilidade para informar o <xref:System.Data.DataRow>quando o valor de coluna tem de ser modificado, está a chamar <xref:System.Data.DataRow.SetModified%2A>na linha ou ao atribuir o objeto de valor de coluna para um objeto de valor de coluna separadamente instanciadas.</xref:System.Data.DataRow.SetModified%2A> </xref:System.Data.DataRow> </xref:System.ComponentModel.IChangeTracking> </xref:System.Data.DataTable>"
  example:
  - "The following example adds columns of several data types to a <xref:System.Data.DataTable>, and then adds one row to the table.  \n  \n [!code-cs[Classic WebData DataColumn.DataType Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_4_1.cs)]\n [!code-vb[Classic WebData DataColumn.DataType Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_4_1.vb)]"
  syntax:
    content: public Type DataType { get; set; }
    return:
      type: System.Type
      description: "A <xref:System.Type>objeto que representa o tipo de dados da coluna.</xref:System.Type>"
  overload: System.Data.DataColumn.DataType*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "A coluna já tem dados armazenados."
  platform:
  - net462
- uid: System.Data.DataColumn.DateTimeMode
  id: DateTimeMode
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: DateTimeMode
  nameWithType: DataColumn.DateTimeMode
  fullName: System.Data.DataColumn.DateTimeMode
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Obtém ou define o <xref uid=&quot;langword_csharp_DateTimeMode&quot; name=&quot;DateTimeMode&quot; href=&quot;&quot;> </xref> para a coluna."
  remarks: "Não é possível alterar DateTimeMode após as linhas são adicionadas a um <xref:System.Data.DataColumn>, exceto modificar de <xref:System.Data.DataSetDateTime>e <xref:System.Data.DataSetDateTime>ou vice-versa.</xref:System.Data.DataSetDateTime> </xref:System.Data.DataSetDateTime> </xref:System.Data.DataColumn> A modificação de `UnspecifiedLocal` para `Unspecified` e vice-versa-se é permitida porque a diferença entre estas duas opções apenas durante a serialização e não afeta o armazenamento."
  syntax:
    content: public System.Data.DataSetDateTime DateTimeMode { get; set; }
    return:
      type: System.Data.DataSetDateTime
      description: "O <xref href=&quot;System.Data.DataSetDateTime&quot;> </xref> para a coluna especificada."
  overload: System.Data.DataColumn.DateTimeMode*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.DefaultValue
  id: DefaultValue
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: DefaultValue
  nameWithType: DataColumn.DefaultValue
  fullName: System.Data.DataColumn.DefaultValue
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Obtém ou define o valor predefinido para a coluna quando estiver a criar novas linhas."
  remarks: "Um valor predefinido é o valor que é atribuído automaticamente para a coluna quando uma <xref:System.Data.DataRow>é criado (por exemplo, a data e hora em que o <xref:System.Data.DataRow>foi criado.</xref:System.Data.DataRow> </xref:System.Data.DataRow>       Quando <xref:System.Data.DataColumn.AutoIncrement%2A>está definido como VERDADEIRO, não pode existir nenhum valor predefinido.</xref:System.Data.DataColumn.AutoIncrement%2A>       Pode criar uma nova linha utilizando o <xref:System.Data.DataRow.ItemArray%2A>propriedade o <xref:System.Data.DataRow>classe e passar o método de uma matriz de valores.</xref:System.Data.DataRow> </xref:System.Data.DataRow.ItemArray%2A> Este é um potencial problema de uma coluna com um valor predefinido porque o respetivo valor é gerado automaticamente. Para utilizar o <xref:System.Data.DataRow.ItemArray%2A>propriedade com uma coluna, coloque `null` na posição da coluna na matriz.</xref:System.Data.DataRow.ItemArray%2A> Para obter mais informações, consulte o <xref:System.Data.DataRow.ItemArray%2A>propriedade.</xref:System.Data.DataRow.ItemArray%2A>"
  example:
  - "The following example creates several <xref:System.Data.DataColumn> objects that have different data types, and sets appropriate default values to each column.  \n  \n [!code-vb[Classic WebData DataColumn.DefaultValue Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_0_1.vb)]"
  syntax:
    content: public object DefaultValue { get; set; }
    return:
      type: System.Object
      description: "Um valor adequado para a coluna <xref:System.Data.DataColumn.DataType*>.</xref:System.Data.DataColumn.DataType*>"
  overload: System.Data.DataColumn.DefaultValue*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Quando estiver a adicionar uma linha, o valor predefinido não é uma instância do tipo de dados da coluna."
  platform:
  - net462
- uid: System.Data.DataColumn.Expression
  id: Expression
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: Expression
  nameWithType: DataColumn.Expression
  fullName: System.Data.DataColumn.Expression
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Obtém ou define a expressão utilizada para filtrar as linhas, calcular os valores numa coluna ou criar uma coluna agregada."
  remarks: "One use of the Expression property is to create calculated columns. For example, to calculate a tax value, the unit price is multiplied by a tax rate of a specific region. Because tax rates vary from region to region, it would be impossible to put a single tax rate in a column; instead, the value is calculated using the Expression property, as shown in the Visual Basic code in the following section:  \n  \n DataSet1.Tables(\"Products\").Columns(\"tax\").Expression = \"UnitPrice * 0.086\"  \n  \n A second use is to create an aggregate column. Similar to a calculated value, an aggregate performs an operation based on the complete set of rows in the <xref:System.Data.DataTable>. A simple example is to count the number of rows returned in the set. This is the method you would use to count the number of transactions completed by a particular salesperson, as shown in this Visual Basic code:  \n  \n```  \nDataSet1.Tables(\"Orders\").Columns(\"OrderCount\").Expression = \"Count(OrderID)\"  \n```  \n  \n## Expression Syntax  \n When you create an expression, use the <xref:System.Data.DataColumn.ColumnName%2A> property to refer to columns. For example, if the <xref:System.Data.DataColumn.ColumnName%2A> for one column is \"UnitPrice\", and another \"Quantity\", the expression would be as follows:  \n  \n \"UnitPrice * Quantity\"  \n  \n> [!NOTE]\n>  If a column is used in an expression, then the expression is said to have a dependency on that column. If a dependent column is renamed or removed, no exception is thrown. An exception will be thrown when the now-broken expression column is accessed.  \n  \n When you create an expression for a filter, enclose strings with single quotation marks:  \n  \n \"LastName = 'Jones'\"  \n  \n If a column name contains any non-alphanumeric characters or starts with a digit or matches (case-insensitively) any of the following reserved words, it requires special handling, as described in the following paragraphs.  \n  \n And  \n  \n Between  \n  \n Child  \n  \n False  \n  \n In  \n  \n Is  \n  \n Like  \n  \n Not  \n  \n Null  \n  \n Or  \n  \n Parent  \n  \n True  \n  \n If a column name satisfies one of the above conditions, it must be wrapped in either square brackets or the \"`\" (grave accent) quotes. For example, to use a column named \"Column#\" in an expression, you would write either \"[Column#]\":  \n  \n Total * [Column#]  \n  \n or \"\\`Column#`\":  \n  \n Total * \\`Column#`  \n  \n If the column name is enclosed in square brackets then any ']' and '\\\\' characters (but not any other characters) in it must be escaped by prepending them with the backslash (\"\\\\\") character. If the column name is enclosed in grave accent characters then it must not contain any grave accent characters in it. For example, a column named \"Column[]\\\\\" would be written:  \n  \n Total * [Column[\\\\]\\\\\\\\]  \n  \n or  \n  \n Total * \\`Column[]\\\\`  \n  \n## User-Defined Values  \n User-defined values may be used within expressions to be compared with column values. String values should be enclosed within single quotation marks (and each single quotation character in a string value has to be escaped by prepending it with another single quotation character). Date values should be enclosed within pound signs (#) or single quotes (') based on the data provider. Decimals and scientific notation are permissible for numeric values. For example:  \n  \n \"FirstName = 'John'\"  \n  \n \"Price <= 50.00\"  \n  \n \"Birthdate < #1/31/82#\"  \n  \n For columns that contain enumeration values, cast the value to an integer data type. For example:  \n  \n \"EnumColumn = 5\"  \n  \n## Parsing Literal Expressions  \n All literal expressions must be expressed in the invariant culture locale. When `DataSet` parses and converts literal expressions, it always uses the invariant culture, not the current culture.  \n  \n String literals are identified when there are single quotes surrounding the value. For example:  \n  \n 'John'  \n  \n `Boolean` literals are true and false; they are not quoted in expressions.  \n  \n `Integer` literals [+-]?[0-9]+ are treated as `System.Int32`, `System.Int64` or `System.Double`. `System.Double` can lose precision depending on how large the number is. For example, if the number in the literal is 2147483650, `DataSet` will first attempt to parse the number as an `Int32`. This will not succeed because the number is too large. In this case `DataSet` will parse the number as an `Int64`, which will succeed. If the literal was a number larger than the maximum value of an Int64, `DataSet` will parse the literal using `Double`.  \n  \n Real literals using scientific notation, such as 4.42372E-30, are parsed using `System.Double`.  \n  \n Real literals without scientific notation, but with a decimal point, are treated as `System.Decimal`. If the number exceeds the maximum or minimum values supported by `System.Decimal`, then it is parsed as a `System.Double`. For example:  \n  \n 142526.144524 will be converted to a `Decimal`.  \n  \n 345262.78036719560925667 will be treated as a `Double`.  \n  \n## Operators  \n Concatenation is allowed using Boolean AND, OR, and NOT operators. You can use parentheses to group clauses and force precedence. The AND operator has precedence over other operators. For example:  \n  \n (LastName = 'Smith' OR LastName = 'Jones') AND FirstName = 'John'  \n  \n When you create comparison expressions, the following operators are allowed:  \n  \n <  \n  \n \\>  \n  \n <=  \n  \n \\>=  \n  \n <>  \n  \n =  \n  \n IN  \n  \n LIKE  \n  \n The following arithmetic operators are also supported in expressions:  \n  \n \\+ (addition)  \n  \n \\- (subtraction)  \n  \n \\* (multiplication)  \n  \n / (division)  \n  \n % (modulus)  \n  \n## String Operators  \n To concatenate a string, use the + character. The value of the <xref:System.Data.DataSet.CaseSensitive%2A> property of the <xref:System.Data.DataSet> class determines whether string comparisons are case-sensitive. However, you can override that value with the <xref:System.Data.DataTable.CaseSensitive%2A> property of the <xref:System.Data.DataTable> class.  \n  \n## Wildcard Characters  \n Both the * and % can be used interchangeably for wildcard characters in a LIKE comparison. If the string in a LIKE clause contains a \\* or %, those characters should be enclosed in brackets ([]). If a bracket is in the clause, each bracket character should be enclosed in brackets (for example [[] or []]). A wildcard is allowed at the start and end of a pattern, or at the end of a pattern, or at the start of a pattern. For example:  \n  \n \"ItemName LIKE '*product\\*'\"  \n  \n \"ItemName LIKE '*product'\"  \n  \n \"ItemName LIKE 'product*'\"  \n  \n Wildcard characters are not allowed in the middle of a string. For example, 'te*xt' is not allowed.  \n  \n## Parent/Child Relation Referencing  \n A parent table may be referenced in an expression by prepending the column name with `Parent`. For example, the `Parent.Price` references the parent table's column named `Price`.  \n  \n When a child has more than one parent row, use Parent(RelationName).ColumnName. For example, the Parent(RelationName).Price references the parent table’s column named Price via the relation.  \n  \n A column in a child table may be referenced in an expression by prepending the column name with `Child`. However, because child relationships may return multiple rows, you must include the reference to the child column in an aggregate function. For example, `Sum(Child.Price)` would return the sum of the column named `Price` in the child table.  \n  \n If a table has more than one child, the syntax is: `Child(RelationName)`. For example, if a table has two child tables named `Customers` and `Orders`, and the <xref:System.Data.DataRelation> object is named `Customers2Orders`, the reference would be as follows:  \n  \n Avg(Child(Customers2Orders).Quantity)  \n  \n## Aggregates  \n The following aggregate types are supported:  \n  \n Sum (Sum)  \n  \n Avg (Average)  \n  \n Min (Minimum)  \n  \n Max (Maximum)  \n  \n Count (Count)  \n  \n StDev (Statistical standard deviation)  \n  \n Var (Statistical variance).  \n  \n Aggregates are ordinarily performed along relationships. Create an aggregate expression by using one of the functions listed earlier and a child table column as detailed in Parent/Child Relation Referencing that was discussed earlier. For example:  \n  \n Avg(Child.Price)  \n  \n Avg(Child(Orders2Details).Price)  \n  \n An aggregate can also be performed on a single table. For example, to create a summary of figures in a column named \"Price\":  \n  \n Sum(Price)  \n  \n> [!NOTE]\n>  If you use a single table to create an aggregate, there would be no group-by functionality. Instead, all rows would display the same value in the column.  \n  \n If a table has no rows, the aggregate functions will return `null`.  \n  \n Data types can always be determined by examining the <xref:System.Data.DataColumn.DataType%2A> property of a column. You can also convert data types using the Convert function, shown in the following section.  \n  \n An aggregate can only be applied to a single column and no other expressions can be used inside the aggregate.  \n  \n## Functions  \n The following functions are also supported:  \n  \n `CONVERT`  \n  \n|||  \n|-|-|  \n|Description|Converts particular expression to a specified .NET Framework Type.|  \n|Syntax|Convert(`expression`, `type`)|  \n|Arguments|`expression` -- The expression to convert.<br /><br /> `type` -- The .NET Framework type to which the value will be converted.|  \n  \n Example: myDataColumn.Expression=\"Convert(total, 'System.Int32')\"  \n  \n All conversions are valid with the following exceptions: `Boolean` can be coerced to and from `Byte`, `SByte`, `Int16`, `Int32`, `Int64`, `UInt16`, `UInt32`, `UInt64`, `String` and itself only. `Char` can be coerced to and from `Int32`, `UInt32`, `String`, and itself only. `DateTime` can be coerced to and from `String` and itself only. `TimeSpan` can be coerced to and from `String` and itself only.  \n  \n `LEN`  \n  \n|||  \n|-|-|  \n|Description|Gets the length of a string|  \n|Syntax|LEN(`expression`)|  \n|Arguments|`expression` -- The string to be evaluated.|  \n  \n Example: myDataColumn.Expression=\"Len(ItemName)\"  \n  \n `ISNULL`  \n  \n|||  \n|-|-|  \n|Description|Checks an expression and either returns the checked expression or a replacement value.|  \n|Syntax|ISNULL(`expression`, `replacementvalue`)|  \n|Arguments|`expression` -- The expression to check.<br /><br /> `replacementvalue` -- If expression is `null`, `replacementvalue` is returned.|  \n  \n Example: myDataColumn.Expression=\"IsNull(price, -1)\"  \n  \n `IIF`  \n  \n|||  \n|-|-|  \n|Description|Gets one of two values depending on the result of a logical expression.|  \n|Syntax|IIF(`expr`, `truepart`, `falsepart`)|  \n|Arguments|`expr` -- The expression to evaluate.<br /><br /> `truepart` -- The value to return if the expression is true.<br /><br /> `falsepart` -- The value to return if the expression is false.|  \n  \n Example: myDataColumn.Expression = \"IIF(total>1000, 'expensive', 'dear')  \n  \n `TRIM`  \n  \n|||  \n|-|-|  \n|Description|Removes all leading and trailing blank characters like \\r, \\n, \\t, ' '|  \n|Syntax|TRIM(`expression`)|  \n|Arguments|`expression` -- The expression to trim.|  \n  \n `SUBSTRING`  \n  \n|||  \n|-|-|  \n|Description|Gets a sub-string of a specified length, starting at a specified point in the string.|  \n|Syntax|SUBSTRING(`expression`, `start`, `length`)|  \n|Arguments|`expression` -- The source string for the substring.<br /><br /> `start` -- Integer that specifies where the substring starts.<br /><br /> `length` -- Integer that specifies the length of the substring.|  \n  \n Example: myDataColumn.Expression = \"SUBSTRING(phone, 7, 8)\"  \n  \n> [!NOTE]\n>  You can reset the Expression property by assigning it a null value or empty string. If a default value is set on the expression column, all previously filled rows are assigned the default value after the Expression property is reset."
  example:
  - "The following example creates three columns in a <xref:System.Data.DataTable>. The second and third columns contain expressions; the second calculates tax using a variable tax rate, and the third adds the result of the calculation to the value of the first column. The resulting table is displayed in a <xref:System.Windows.Forms.DataGrid> control.  \n  \n [!code-cs[Classic WebData DataColumn.Expression Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_1_1.cs)]\n [!code-vb[Classic WebData DataColumn.Expression Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_1_1.vb)]"
  syntax:
    content: public string Expression { get; set; }
    return:
      type: System.String
      description: "Uma expressão para calcular o valor de uma coluna ou criar uma coluna agregada. O tipo de retorno de uma expressão é determinado pelo <xref:System.Data.DataColumn.DataType*>da coluna.</xref:System.Data.DataColumn.DataType*>"
  overload: System.Data.DataColumn.Expression*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <>*> or <>*> property is set to <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "Quando estiver a utilizar a função CONVERT, avalia a expressão para uma cadeia, mas a cadeia não contém uma representação que pode ser convertida para o parâmetro de tipo."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Quando estiver a utilizar a função CONVERT, a conversão pedida não é possível. Consulte a função de conversão na secção seguinte para obter informações detalhadas sobre casts possíveis."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Quando utiliza a função de SUBCADEIA, o argumento de início está fora do intervalo.       - Ou - quando utiliza a função de SUBCADEIA, o argumento de comprimento está fora do intervalo."
  - type: System.Exception
    commentId: T:System.Exception
    description: "Quando utiliza a função LEN ou a função de corte, avalia a expressão para uma cadeia. Isto inclui expressões avaliadas como <xref:System.Char>.</xref:System.Char>"
  platform:
  - net462
- uid: System.Data.DataColumn.ExtendedProperties
  id: ExtendedProperties
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: ExtendedProperties
  nameWithType: DataColumn.ExtendedProperties
  fullName: System.Data.DataColumn.ExtendedProperties
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Obtém a recolha de informações de utilizador personalizadas associadas a um <xref href=&quot;System.Data.DataColumn&quot;> </xref>."
  remarks: "A propriedade ExtendedProperties permite-lhe armazenar informações personalizadas com o objeto. Por exemplo, pode armazenar um período de tempo quando os dados devem ser atualizados.       Propriedades expandidas tem de ser do tipo <xref:System.String>.</xref:System.String> Propriedades que não sejam do tipo <xref:System.String>não são mantidas quando o <xref:System.Data.DataColumn>é escrito em XML.</xref:System.Data.DataColumn> </xref:System.String>"
  example:
  - "The following example adds a custom property to the <xref:System.Data.PropertyCollection> returned by the ExtendedProperties property. The second example retrieves the custom property.  \n  \n [!code-cs[Classic WebData DataColumn.ExtendedProperties Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_10_1.cs)]\n [!code-vb[Classic WebData DataColumn.ExtendedProperties Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_10_1.vb)]"
  syntax:
    content: public System.Data.PropertyCollection ExtendedProperties { get; }
    return:
      type: System.Data.PropertyCollection
      description: "A <xref href=&quot;System.Data.PropertyCollection&quot;> </xref> de informações personalizadas."
  overload: System.Data.DataColumn.ExtendedProperties*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.MaxLength
  id: MaxLength
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: MaxLength
  nameWithType: DataColumn.MaxLength
  fullName: System.Data.DataColumn.MaxLength
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Obtém ou define o comprimento máximo de uma coluna de texto."
  remarks: "A propriedade MaxLength é ignorada para colunas não sejam de texto. A <xref:System.ArgumentException>é gerada uma exceção se atribuir MaxLength a uma coluna de cadeia não.</xref:System.ArgumentException>"
  syntax:
    content: public int MaxLength { get; set; }
    return:
      type: System.Int32
      description: "O comprimento máximo da coluna em carateres. Se a coluna não tem nenhum comprimento máximo, o valor é –1 (predefinição)."
  overload: System.Data.DataColumn.MaxLength*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.Namespace
  id: Namespace
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: Namespace
  nameWithType: DataColumn.Namespace
  fullName: System.Data.DataColumn.Namespace
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Obtém ou define o espaço de nomes do <xref href=&quot;System.Data.DataColumn&quot;> </xref>."
  remarks: "A propriedade de espaço de nomes é utilizada quando ler e escrever um XML de documentos para um <xref:System.Data.DataTable>no <xref:System.Data.DataSet>utilizando o <xref:System.Data.DataSet.ReadXml%2A>, <xref:System.Data.DataSet.WriteXml%2A>, <xref:System.Data.DataSet.ReadXmlSchema%2A>, ou <xref:System.Data.DataSet.WriteXmlSchema%2A>métodos.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet.WriteXml%2A> </xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet> </xref:System.Data.DataTable>       O espaço de nomes de um documento XML é utilizado para definir o âmbito quando lidos no <xref:System.Data.DataSet>.</xref:System.Data.DataSet> de elementos e atributos XML Por exemplo, um <xref:System.Data.DataSet>contém um esquema de ler a partir de um documento que tem o espaço de nomes &quot;aminhaempresa&quot; e é efetuada uma tentativa de ler os dados (com o <xref:System.Data.DataSet.ReadXml%2A>método) de um documento que tenha o espaço de nomes &quot;theirCompany.&quot;</xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet> Todos os dados que não correspondem ao esquema existente serão ignorados."
  syntax:
    content: public string Namespace { get; set; }
    return:
      type: System.String
      description: "O espaço de nomes do <xref href=&quot;System.Data.DataColumn&quot;> </xref>."
  overload: System.Data.DataColumn.Namespace*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O espaço de nomes já tiver dados."
  platform:
  - net462
- uid: System.Data.DataColumn.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)
  id: OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: OnPropertyChanging(PropertyChangedEventArgs)
  nameWithType: DataColumn.OnPropertyChanging(PropertyChangedEventArgs)
  fullName: System.Data.DataColumn.OnPropertyChanging(PropertyChangedEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Este membro suporta a infraestrutura do .NET Framework e não se destina a ser utilizado diretamente a partir do seu código."
  syntax:
    content: protected virtual void OnPropertyChanging (System.ComponentModel.PropertyChangedEventArgs pcevent);
    parameters:
    - id: pcevent
      type: System.ComponentModel.PropertyChangedEventArgs
      description: "Referência de parâmetro."
  overload: System.Data.DataColumn.OnPropertyChanging*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.Ordinal
  id: Ordinal
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: Ordinal
  nameWithType: DataColumn.Ordinal
  fullName: System.Data.DataColumn.Ordinal
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Obtém a posição da coluna em (baseado em zero) a <xref href=&quot;System.Data.DataColumnCollection&quot;> </xref> coleção."
  remarks: ''
  example:
  - "The following example returns the column name, ordinal, and data type of a column.  \n  \n [!code-vb[Classic WebData DataColumn.Ordinal Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_16_1.vb)]\n [!code-cs[Classic WebData DataColumn.Ordinal Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_16_1.cs)]"
  syntax:
    content: public int Ordinal { get; }
    return:
      type: System.Int32
      description: "A posição da coluna. Obtém -1 se a coluna não é um membro de uma coleção."
  overload: System.Data.DataColumn.Ordinal*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.Prefix
  id: Prefix
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: Prefix
  nameWithType: DataColumn.Prefix
  fullName: System.Data.DataColumn.Prefix
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Obtém ou define um XML prefixo aliases de que o espaço de nomes do <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  remarks: "O <xref:System.Data.DataTable.Prefix%2A>é utilizado ao longo de um documento XML para identificar os elementos que pertence ao espaço de nomes para um <xref:System.Data.DataSet>objeto (como definido pelo <xref:System.Data.DataSet.Namespace%2A>propriedade).</xref:System.Data.DataSet.Namespace%2A> </xref:System.Data.DataSet> </xref:System.Data.DataTable.Prefix%2A>"
  syntax:
    content: public string Prefix { get; set; }
    return:
      type: System.String
      description: "O prefixo XML para o <xref href=&quot;System.Data.DataTable&quot;> </xref> espaço de nomes."
  overload: System.Data.DataColumn.Prefix*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.RaisePropertyChanging(System.String)
  id: RaisePropertyChanging(System.String)
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: RaisePropertyChanging(String)
  nameWithType: DataColumn.RaisePropertyChanging(String)
  fullName: System.Data.DataColumn.RaisePropertyChanging(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Este membro suporta a infraestrutura do .NET Framework e não se destina a ser utilizado diretamente a partir do seu código."
  syntax:
    content: protected void RaisePropertyChanging (string name);
    parameters:
    - id: name
      type: System.String
      description: "Referência de parâmetro."
  overload: System.Data.DataColumn.RaisePropertyChanging*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.ReadOnly
  id: ReadOnly
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: ReadOnly
  nameWithType: DataColumn.ReadOnly
  fullName: System.Data.DataColumn.ReadOnly
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Obtém ou define um valor que indica se a coluna permite alterações assim que foi adicionada uma linha à tabela."
  remarks: ''
  example:
  - "The following example creates a <xref:System.Data.DataColumn> and sets its ReadOnly property `true`.  \n  \n [!code-vb[Classic WebData DataColumn.ReadOnly Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_12_1.vb)]\n [!code-cs[Classic WebData DataColumn.ReadOnly Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_12_1.cs)]"
  syntax:
    content: public bool ReadOnly { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a coluna é lido apenas; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. A predefinição é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataColumn.ReadOnly*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "A propriedade está definida como <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> numa coluna calculada."
  platform:
  - net462
- uid: System.Data.DataColumn.SetOrdinal(System.Int32)
  id: SetOrdinal(System.Int32)
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: SetOrdinal(Int32)
  nameWithType: DataColumn.SetOrdinal(Int32)
  fullName: System.Data.DataColumn.SetOrdinal(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Altera o ordinal ou a posição do <xref href=&quot;System.Data.DataColumn&quot;> </xref> no ordinal especificado ou uma posição."
  remarks: "Altera o ordinal ou a posição do <xref:System.Data.DataColumn>no ordinal especificado ou uma posição.</xref:System.Data.DataColumn> Se ordinal é menor que 0 ou superior ao número de colunas – 1 (maior do que o ordinal de última coluna) existente, em seguida, um inválido <xref:System.ArgumentException>é emitida.</xref:System.ArgumentException>       Quando altera o ordinal de uma coluna, a coluna é movida para a nova posição na coleção de colunas. Quaisquer colunas entre o ordinal de anterior e novo irão renumbered, para ajustar ordinal da coluna de novo."
  syntax:
    content: public void SetOrdinal (int ordinal);
    parameters:
    - id: ordinal
      type: System.Int32
      description: "O ordinal especificado."
  overload: System.Data.DataColumn.SetOrdinal*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.Table
  id: Table
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: Table
  nameWithType: DataColumn.Table
  fullName: System.Data.DataColumn.Table
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Obtém o <xref href=&quot;System.Data.DataTable&quot;> </xref> para que a coluna pertence."
  remarks: ''
  example:
  - "The following example returns the parent table of a <xref:System.Data.DataColumn> through its Table property.  \n  \n [!code-vb[Classic WebData DataColumn.Table Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_6_1.vb)]\n [!code-cs[Classic WebData DataColumn.Table Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_6_1.cs)]"
  syntax:
    content: public System.Data.DataTable Table { get; }
    return:
      type: System.Data.DataTable
      description: "O <xref href=&quot;System.Data.DataTable&quot;> </xref> que o <xref href=&quot;System.Data.DataColumn&quot;> </xref> pertence."
  overload: System.Data.DataColumn.Table*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.ToString
  id: ToString
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: ToString()
  nameWithType: DataColumn.ToString()
  fullName: System.Data.DataColumn.ToString()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Obtém o <xref:System.Data.DataColumn.Expression*>da coluna, se existir.</xref:System.Data.DataColumn.Expression*>"
  remarks: ''
  example:
  - "The following example uses the ToString property to return the default string of each member of a collection of <xref:System.Data.DataColumn> objects.  \n  \n [!code-vb[Classic WebData DataColumn.ToString Example#1](~/add/codesnippet/visualbasic/m-system.data.datacolumn_1_1.vb)]\n [!code-cs[Classic WebData DataColumn.ToString Example#1](~/add/codesnippet/csharp/m-system.data.datacolumn_1_1.cs)]"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "O <> </> *> valor, se a propriedade é definido; caso contrário, o <> </> *> propriedade."
  overload: System.Data.DataColumn.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.Unique
  id: Unique
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: Unique
  nameWithType: DataColumn.Unique
  fullName: System.Data.DataColumn.Unique
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Obtém ou define um valor que indica se os valores em cada linha da coluna tem de ser exclusivos."
  remarks: "Assim que esta propriedade é alterada de false para true, será criada uma restrição exclusiva nesta coluna para se certificar de que os valores são exclusivos."
  example:
  - "The following example creates new <xref:System.Data.DataColumn>, sets its properties, and adds it to a table's columns collection.  \n  \n [!code-cs[Classic WebData DataColumn.Unique Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_3_1.cs)]\n [!code-vb[Classic WebData DataColumn.Unique Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_3_1.vb)]"
  syntax:
    content: public bool Unique { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o valor tem de ser exclusivo; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. A predefinição é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataColumn.Unique*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "A coluna é uma coluna calculada."
  platform:
  - net462
references:
- uid: System.ComponentModel.MarshalByValueComponent
  isExternal: false
  name: System.ComponentModel.MarshalByValueComponent
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Data.DuplicateNameException
  parent: System.Data
  isExternal: false
  name: DuplicateNameException
  nameWithType: DuplicateNameException
  fullName: System.Data.DuplicateNameException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.FormatException
  isExternal: true
  name: System.FormatException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Exception
  isExternal: true
  name: System.Exception
- uid: System.Data.DataColumn.#ctor
  parent: System.Data.DataColumn
  isExternal: false
  name: DataColumn()
  nameWithType: DataColumn.DataColumn()
  fullName: System.Data.DataColumn.DataColumn()
- uid: System.Data.DataColumn.#ctor(System.String)
  parent: System.Data.DataColumn
  isExternal: false
  name: DataColumn(String)
  nameWithType: DataColumn.DataColumn(String)
  fullName: System.Data.DataColumn.DataColumn(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.DataColumn.#ctor(System.String,System.Type)
  parent: System.Data.DataColumn
  isExternal: false
  name: DataColumn(String,Type)
  nameWithType: DataColumn.DataColumn(String,Type)
  fullName: System.Data.DataColumn.DataColumn(String,Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Data.DataColumn.#ctor(System.String,System.Type,System.String)
  parent: System.Data.DataColumn
  isExternal: false
  name: DataColumn(String,Type,String)
  nameWithType: DataColumn.DataColumn(String,Type,String)
  fullName: System.Data.DataColumn.DataColumn(String,Type,String)
- uid: System.Data.DataColumn.#ctor(System.String,System.Type,System.String,System.Data.MappingType)
  parent: System.Data.DataColumn
  isExternal: false
  name: DataColumn(String,Type,String,MappingType)
  nameWithType: DataColumn.DataColumn(String,Type,String,MappingType)
  fullName: System.Data.DataColumn.DataColumn(String,Type,String,MappingType)
- uid: System.Data.MappingType
  parent: System.Data
  isExternal: false
  name: MappingType
  nameWithType: MappingType
  fullName: System.Data.MappingType
- uid: System.Data.DataColumn.AllowDBNull
  parent: System.Data.DataColumn
  isExternal: false
  name: AllowDBNull
  nameWithType: DataColumn.AllowDBNull
  fullName: System.Data.DataColumn.AllowDBNull
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.DataColumn.AutoIncrement
  parent: System.Data.DataColumn
  isExternal: false
  name: AutoIncrement
  nameWithType: DataColumn.AutoIncrement
  fullName: System.Data.DataColumn.AutoIncrement
- uid: System.Data.DataColumn.AutoIncrementSeed
  parent: System.Data.DataColumn
  isExternal: false
  name: AutoIncrementSeed
  nameWithType: DataColumn.AutoIncrementSeed
  fullName: System.Data.DataColumn.AutoIncrementSeed
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Data.DataColumn.AutoIncrementStep
  parent: System.Data.DataColumn
  isExternal: false
  name: AutoIncrementStep
  nameWithType: DataColumn.AutoIncrementStep
  fullName: System.Data.DataColumn.AutoIncrementStep
- uid: System.Data.DataColumn.Caption
  parent: System.Data.DataColumn
  isExternal: false
  name: Caption
  nameWithType: DataColumn.Caption
  fullName: System.Data.DataColumn.Caption
- uid: System.Data.DataColumn.CheckNotAllowNull
  parent: System.Data.DataColumn
  isExternal: false
  name: CheckNotAllowNull()
  nameWithType: DataColumn.CheckNotAllowNull()
  fullName: System.Data.DataColumn.CheckNotAllowNull()
- uid: System.Data.DataColumn.CheckUnique
  parent: System.Data.DataColumn
  isExternal: false
  name: CheckUnique()
  nameWithType: DataColumn.CheckUnique()
  fullName: System.Data.DataColumn.CheckUnique()
- uid: System.Data.DataColumn.ColumnMapping
  parent: System.Data.DataColumn
  isExternal: false
  name: ColumnMapping
  nameWithType: DataColumn.ColumnMapping
  fullName: System.Data.DataColumn.ColumnMapping
- uid: System.Data.DataColumn.ColumnName
  parent: System.Data.DataColumn
  isExternal: false
  name: ColumnName
  nameWithType: DataColumn.ColumnName
  fullName: System.Data.DataColumn.ColumnName
- uid: System.Data.DataColumn.DataType
  parent: System.Data.DataColumn
  isExternal: false
  name: DataType
  nameWithType: DataColumn.DataType
  fullName: System.Data.DataColumn.DataType
- uid: System.Data.DataColumn.DateTimeMode
  parent: System.Data.DataColumn
  isExternal: false
  name: DateTimeMode
  nameWithType: DataColumn.DateTimeMode
  fullName: System.Data.DataColumn.DateTimeMode
- uid: System.Data.DataSetDateTime
  parent: System.Data
  isExternal: false
  name: DataSetDateTime
  nameWithType: DataSetDateTime
  fullName: System.Data.DataSetDateTime
- uid: System.Data.DataColumn.DefaultValue
  parent: System.Data.DataColumn
  isExternal: false
  name: DefaultValue
  nameWithType: DataColumn.DefaultValue
  fullName: System.Data.DataColumn.DefaultValue
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.DataColumn.Expression
  parent: System.Data.DataColumn
  isExternal: false
  name: Expression
  nameWithType: DataColumn.Expression
  fullName: System.Data.DataColumn.Expression
- uid: System.Data.DataColumn.ExtendedProperties
  parent: System.Data.DataColumn
  isExternal: false
  name: ExtendedProperties
  nameWithType: DataColumn.ExtendedProperties
  fullName: System.Data.DataColumn.ExtendedProperties
- uid: System.Data.PropertyCollection
  parent: System.Data
  isExternal: false
  name: PropertyCollection
  nameWithType: PropertyCollection
  fullName: System.Data.PropertyCollection
- uid: System.Data.DataColumn.MaxLength
  parent: System.Data.DataColumn
  isExternal: false
  name: MaxLength
  nameWithType: DataColumn.MaxLength
  fullName: System.Data.DataColumn.MaxLength
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.DataColumn.Namespace
  parent: System.Data.DataColumn
  isExternal: false
  name: Namespace
  nameWithType: DataColumn.Namespace
  fullName: System.Data.DataColumn.Namespace
- uid: System.Data.DataColumn.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)
  parent: System.Data.DataColumn
  isExternal: false
  name: OnPropertyChanging(PropertyChangedEventArgs)
  nameWithType: DataColumn.OnPropertyChanging(PropertyChangedEventArgs)
  fullName: System.Data.DataColumn.OnPropertyChanging(PropertyChangedEventArgs)
- uid: System.ComponentModel.PropertyChangedEventArgs
  parent: System.ComponentModel
  isExternal: true
  name: PropertyChangedEventArgs
  nameWithType: PropertyChangedEventArgs
  fullName: System.ComponentModel.PropertyChangedEventArgs
- uid: System.Data.DataColumn.Ordinal
  parent: System.Data.DataColumn
  isExternal: false
  name: Ordinal
  nameWithType: DataColumn.Ordinal
  fullName: System.Data.DataColumn.Ordinal
- uid: System.Data.DataColumn.Prefix
  parent: System.Data.DataColumn
  isExternal: false
  name: Prefix
  nameWithType: DataColumn.Prefix
  fullName: System.Data.DataColumn.Prefix
- uid: System.Data.DataColumn.RaisePropertyChanging(System.String)
  parent: System.Data.DataColumn
  isExternal: false
  name: RaisePropertyChanging(String)
  nameWithType: DataColumn.RaisePropertyChanging(String)
  fullName: System.Data.DataColumn.RaisePropertyChanging(String)
- uid: System.Data.DataColumn.ReadOnly
  parent: System.Data.DataColumn
  isExternal: false
  name: ReadOnly
  nameWithType: DataColumn.ReadOnly
  fullName: System.Data.DataColumn.ReadOnly
- uid: System.Data.DataColumn.SetOrdinal(System.Int32)
  parent: System.Data.DataColumn
  isExternal: false
  name: SetOrdinal(Int32)
  nameWithType: DataColumn.SetOrdinal(Int32)
  fullName: System.Data.DataColumn.SetOrdinal(Int32)
- uid: System.Data.DataColumn.Table
  parent: System.Data.DataColumn
  isExternal: false
  name: Table
  nameWithType: DataColumn.Table
  fullName: System.Data.DataColumn.Table
- uid: System.Data.DataTable
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Data.DataColumn.ToString
  parent: System.Data.DataColumn
  isExternal: false
  name: ToString()
  nameWithType: DataColumn.ToString()
  fullName: System.Data.DataColumn.ToString()
- uid: System.Data.DataColumn.Unique
  parent: System.Data.DataColumn
  isExternal: false
  name: Unique
  nameWithType: DataColumn.Unique
  fullName: System.Data.DataColumn.Unique
- uid: System.Data.DataColumn.#ctor*
  parent: System.Data.DataColumn
  isExternal: false
  name: DataColumn
  nameWithType: DataColumn.DataColumn
- uid: System.Data.DataColumn.AllowDBNull*
  parent: System.Data.DataColumn
  isExternal: false
  name: AllowDBNull
  nameWithType: DataColumn.AllowDBNull
- uid: System.Data.DataColumn.AutoIncrement*
  parent: System.Data.DataColumn
  isExternal: false
  name: AutoIncrement
  nameWithType: DataColumn.AutoIncrement
- uid: System.Data.DataColumn.AutoIncrementSeed*
  parent: System.Data.DataColumn
  isExternal: false
  name: AutoIncrementSeed
  nameWithType: DataColumn.AutoIncrementSeed
- uid: System.Data.DataColumn.AutoIncrementStep*
  parent: System.Data.DataColumn
  isExternal: false
  name: AutoIncrementStep
  nameWithType: DataColumn.AutoIncrementStep
- uid: System.Data.DataColumn.Caption*
  parent: System.Data.DataColumn
  isExternal: false
  name: Caption
  nameWithType: DataColumn.Caption
- uid: System.Data.DataColumn.CheckNotAllowNull*
  parent: System.Data.DataColumn
  isExternal: false
  name: CheckNotAllowNull
  nameWithType: DataColumn.CheckNotAllowNull
- uid: System.Data.DataColumn.CheckUnique*
  parent: System.Data.DataColumn
  isExternal: false
  name: CheckUnique
  nameWithType: DataColumn.CheckUnique
- uid: System.Data.DataColumn.ColumnMapping*
  parent: System.Data.DataColumn
  isExternal: false
  name: ColumnMapping
  nameWithType: DataColumn.ColumnMapping
- uid: System.Data.DataColumn.ColumnName*
  parent: System.Data.DataColumn
  isExternal: false
  name: ColumnName
  nameWithType: DataColumn.ColumnName
- uid: System.Data.DataColumn.DataType*
  parent: System.Data.DataColumn
  isExternal: false
  name: DataType
  nameWithType: DataColumn.DataType
- uid: System.Data.DataColumn.DateTimeMode*
  parent: System.Data.DataColumn
  isExternal: false
  name: DateTimeMode
  nameWithType: DataColumn.DateTimeMode
- uid: System.Data.DataColumn.DefaultValue*
  parent: System.Data.DataColumn
  isExternal: false
  name: DefaultValue
  nameWithType: DataColumn.DefaultValue
- uid: System.Data.DataColumn.Expression*
  parent: System.Data.DataColumn
  isExternal: false
  name: Expression
  nameWithType: DataColumn.Expression
- uid: System.Data.DataColumn.ExtendedProperties*
  parent: System.Data.DataColumn
  isExternal: false
  name: ExtendedProperties
  nameWithType: DataColumn.ExtendedProperties
- uid: System.Data.DataColumn.MaxLength*
  parent: System.Data.DataColumn
  isExternal: false
  name: MaxLength
  nameWithType: DataColumn.MaxLength
- uid: System.Data.DataColumn.Namespace*
  parent: System.Data.DataColumn
  isExternal: false
  name: Namespace
  nameWithType: DataColumn.Namespace
- uid: System.Data.DataColumn.OnPropertyChanging*
  parent: System.Data.DataColumn
  isExternal: false
  name: OnPropertyChanging
  nameWithType: DataColumn.OnPropertyChanging
- uid: System.Data.DataColumn.Ordinal*
  parent: System.Data.DataColumn
  isExternal: false
  name: Ordinal
  nameWithType: DataColumn.Ordinal
- uid: System.Data.DataColumn.Prefix*
  parent: System.Data.DataColumn
  isExternal: false
  name: Prefix
  nameWithType: DataColumn.Prefix
- uid: System.Data.DataColumn.RaisePropertyChanging*
  parent: System.Data.DataColumn
  isExternal: false
  name: RaisePropertyChanging
  nameWithType: DataColumn.RaisePropertyChanging
- uid: System.Data.DataColumn.ReadOnly*
  parent: System.Data.DataColumn
  isExternal: false
  name: ReadOnly
  nameWithType: DataColumn.ReadOnly
- uid: System.Data.DataColumn.SetOrdinal*
  parent: System.Data.DataColumn
  isExternal: false
  name: SetOrdinal
  nameWithType: DataColumn.SetOrdinal
- uid: System.Data.DataColumn.Table*
  parent: System.Data.DataColumn
  isExternal: false
  name: Table
  nameWithType: DataColumn.Table
- uid: System.Data.DataColumn.ToString*
  parent: System.Data.DataColumn
  isExternal: false
  name: ToString
  nameWithType: DataColumn.ToString
- uid: System.Data.DataColumn.Unique*
  parent: System.Data.DataColumn
  isExternal: false
  name: Unique
  nameWithType: DataColumn.Unique
