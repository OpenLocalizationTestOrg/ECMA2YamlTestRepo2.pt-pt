### YamlMime:ManagedReference
items:
- uid: Microsoft.VisualBasic.Compatibility.VB6.IAccessor
  id: IAccessor
  children:
  - Microsoft.VisualBasic.Compatibility.VB6.IAccessor.AddRefAccessor(System.Int32,System.Int32@)
  - Microsoft.VisualBasic.Compatibility.VB6.IAccessor.CreateAccessor(System.Int32,System.Int32,Microsoft.VisualBasic.Compatibility.VB6.DBBINDING[],System.Int32,System.Int32@,System.IntPtr)
  - Microsoft.VisualBasic.Compatibility.VB6.IAccessor.GetBindings(System.Int32,System.Int32@,System.Int32@,System.IntPtr@)
  - Microsoft.VisualBasic.Compatibility.VB6.IAccessor.ReleaseAccessor(System.Int32,System.Int32@)
  langs:
  - csharp
  name: IAccessor
  nameWithType: IAccessor
  fullName: Microsoft.VisualBasic.Compatibility.VB6.IAccessor
  type: Interface
  summary: "Provides an implementation of the OLE DB <xref uid=&quot;langword_csharp_IAccessor&quot; name=&quot;IAccessor&quot; href=&quot;&quot;></xref> interface for use by applications upgraded from Visual Basic 6.0."
  remarks: >-
    > [!NOTE]

    >  Functions and objects in the <xref:Microsoft.VisualBasic.Compatibility.VB6> namespace are provided for use by the tools for upgrading from Visual Basic 6.0 to [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)]. In most cases, these functions and objects duplicate functionality that you can find in other namespaces in the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]. They are necessary only when the Visual Basic 6.0 code model differs significantly from the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] implementation.
  syntax:
    content: >-
      [System.Obsolete("Microsoft.VisualBasic.Compatibility.* classes are obsolete and supported within 32 bit processes only. http://go.microsoft.com/fwlink/?linkid=160862")]

      [System.Runtime.InteropServices.Guid("0c733a8c-2a1c-11ce-ade5-00aa0044773d")]

      [System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)]

      public interface IAccessor
  implements: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Compatibility.VB6.IAccessor.AddRefAccessor(System.Int32,System.Int32@)
  id: AddRefAccessor(System.Int32,System.Int32@)
  parent: Microsoft.VisualBasic.Compatibility.VB6.IAccessor
  langs:
  - csharp
  name: AddRefAccessor(Int32,Int32)
  nameWithType: IAccessor.AddRefAccessor(Int32,Int32)
  fullName: Microsoft.VisualBasic.Compatibility.VB6.IAccessor.AddRefAccessor(Int32,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic.Compatibility.Data
  namespace: Microsoft.VisualBasic.Compatibility.VB6
  summary: "Adds a reference count to an existing accessor."
  remarks: >-
    > [!NOTE]

    >  Functions and objects in the <xref:Microsoft.VisualBasic.Compatibility.VB6> namespace are provided for use by the tools for upgrading from Visual Basic 6.0 to [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)]. In most cases, these functions and objects duplicate functionality that you can find in other namespaces in the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]. They are necessary only when the Visual Basic 6.0 code model differs significantly from the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] implementation.
  syntax:
    content: public void AddRefAccessor (int hAccessor, out int cRefCount);
    parameters:
    - id: hAccessor
      type: System.Int32
      description: "The handle of the accessor for which to increment the reference count."
    - id: cRefCount
      type: System.Int32
      description: "A pointer to memory in which to return the reference count of the accessor handle. If `cRefCount` is a null pointer, no reference count is returned."
  overload: Microsoft.VisualBasic.Compatibility.VB6.IAccessor.AddRefAccessor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Compatibility.VB6.IAccessor.CreateAccessor(System.Int32,System.Int32,Microsoft.VisualBasic.Compatibility.VB6.DBBINDING[],System.Int32,System.Int32@,System.IntPtr)
  id: CreateAccessor(System.Int32,System.Int32,Microsoft.VisualBasic.Compatibility.VB6.DBBINDING[],System.Int32,System.Int32@,System.IntPtr)
  parent: Microsoft.VisualBasic.Compatibility.VB6.IAccessor
  langs:
  - csharp
  name: CreateAccessor(Int32,Int32,DBBINDING[],Int32,Int32,IntPtr)
  nameWithType: IAccessor.CreateAccessor(Int32,Int32,DBBINDING[],Int32,Int32,IntPtr)
  fullName: Microsoft.VisualBasic.Compatibility.VB6.IAccessor.CreateAccessor(Int32,Int32,DBBINDING[],Int32,Int32,IntPtr)
  type: Method
  assemblies:
  - Microsoft.VisualBasic.Compatibility.Data
  namespace: Microsoft.VisualBasic.Compatibility.VB6
  summary: "Creates an accessor from a set of bindings."
  remarks: >-
    > [!NOTE]

    >  Functions and objects in the <xref:Microsoft.VisualBasic.Compatibility.VB6> namespace are provided for use by the tools for upgrading from Visual Basic 6.0 to [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)]. In most cases, these functions and objects duplicate functionality that you can find in other namespaces in the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]. They are necessary only when the Visual Basic 6.0 code model differs significantly from the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] implementation.
  syntax:
    content: public void CreateAccessor (int accessorFlags, int cBindings, Microsoft.VisualBasic.Compatibility.VB6.DBBINDING[] bindings, int cbRowSize, out int hAccessor, IntPtr pBindStatus);
    parameters:
    - id: accessorFlags
      type: System.Int32
      description: "A bitmask that describes the properties of the accessor and how it can be used."
    - id: cBindings
      type: System.Int32
      description: "The number of bindings in the accessor."
    - id: bindings
      type: Microsoft.VisualBasic.Compatibility.VB6.DBBINDING[]
      description: "An array of <xref href=&quot;Microsoft.VisualBasic.Compatibility.VB6.DBBINDING&quot;></xref> structures."
    - id: cbRowSize
      type: System.Int32
      description: "The number of bytes allocated for a single set of parameters or criteria values in the consumer&quot;s buffer."
    - id: hAccessor
      type: System.Int32
      description: "A pointer to memory in which to return the handle of the created accessor."
    - id: pBindStatus
      type: System.IntPtr
      description: "A pointer to an array of <xref uid=&quot;langword_csharp_DBBINDSTATUS&quot; name=&quot;DBBINDSTATUS&quot; href=&quot;&quot;></xref> values."
  overload: Microsoft.VisualBasic.Compatibility.VB6.IAccessor.CreateAccessor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Compatibility.VB6.IAccessor.GetBindings(System.Int32,System.Int32@,System.Int32@,System.IntPtr@)
  id: GetBindings(System.Int32,System.Int32@,System.Int32@,System.IntPtr@)
  parent: Microsoft.VisualBasic.Compatibility.VB6.IAccessor
  langs:
  - csharp
  name: GetBindings(Int32,Int32,Int32,IntPtr)
  nameWithType: IAccessor.GetBindings(Int32,Int32,Int32,IntPtr)
  fullName: Microsoft.VisualBasic.Compatibility.VB6.IAccessor.GetBindings(Int32,Int32,Int32,IntPtr)
  type: Method
  assemblies:
  - Microsoft.VisualBasic.Compatibility.Data
  namespace: Microsoft.VisualBasic.Compatibility.VB6
  summary: "Returns the bindings in an accessor."
  remarks: >-
    > [!NOTE]

    >  Functions and objects in the <xref:Microsoft.VisualBasic.Compatibility.VB6> namespace are provided for use by the tools for upgrading from Visual Basic 6.0 to [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)]. In most cases, these functions and objects duplicate functionality that you can find in other namespaces in the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]. They are necessary only when the Visual Basic 6.0 code model differs significantly from the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] implementation.
  syntax:
    content: public void GetBindings (int hAccessor, out int accessorFlags, out int cBindings, out IntPtr rgBindings);
    parameters:
    - id: hAccessor
      type: System.Int32
      description: "The handle of the accessor for which to return the bindings."
    - id: accessorFlags
      type: System.Int32
      description: "A pointer to memory in which to return a bitmask that describes the properties of the accessor and how it is intended to be used."
    - id: cBindings
      type: System.Int32
      description: "A pointer to memory in which to return the number of bindings in the accessor."
    - id: rgBindings
      type: System.IntPtr
      description: "A pointer to memory in which to return an array of <xref uid=&quot;langword_csharp_DBBINDSTATUS&quot; name=&quot;DBBINDSTATUS&quot; href=&quot;&quot;></xref> structures."
  overload: Microsoft.VisualBasic.Compatibility.VB6.IAccessor.GetBindings*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Compatibility.VB6.IAccessor.ReleaseAccessor(System.Int32,System.Int32@)
  id: ReleaseAccessor(System.Int32,System.Int32@)
  parent: Microsoft.VisualBasic.Compatibility.VB6.IAccessor
  langs:
  - csharp
  name: ReleaseAccessor(Int32,Int32)
  nameWithType: IAccessor.ReleaseAccessor(Int32,Int32)
  fullName: Microsoft.VisualBasic.Compatibility.VB6.IAccessor.ReleaseAccessor(Int32,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic.Compatibility.Data
  namespace: Microsoft.VisualBasic.Compatibility.VB6
  summary: "Releases an accessor."
  remarks: >-
    > [!NOTE]

    >  Functions and objects in the <xref:Microsoft.VisualBasic.Compatibility.VB6> namespace are provided for use by the tools for upgrading from Visual Basic 6.0 to [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)]. In most cases, these functions and objects duplicate functionality that you can find in other namespaces in the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]. They are necessary only when the Visual Basic 6.0 code model differs significantly from the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] implementation.
  syntax:
    content: public void ReleaseAccessor (int hAccessor, out int cRefCount);
    parameters:
    - id: hAccessor
      type: System.Int32
      description: "The handle of the accessor to release."
    - id: cRefCount
      type: System.Int32
      description: "A pointer to memory in which to return the remaining reference count of the accessor handle."
  overload: Microsoft.VisualBasic.Compatibility.VB6.IAccessor.ReleaseAccessor*
  exceptions: []
  platform:
  - net462
references:
- uid: Microsoft.VisualBasic.Compatibility.VB6.IAccessor.AddRefAccessor(System.Int32,System.Int32@)
  parent: Microsoft.VisualBasic.Compatibility.VB6.IAccessor
  isExternal: false
  name: AddRefAccessor(Int32,Int32)
  nameWithType: IAccessor.AddRefAccessor(Int32,Int32)
  fullName: Microsoft.VisualBasic.Compatibility.VB6.IAccessor.AddRefAccessor(Int32,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.VisualBasic.Compatibility.VB6.IAccessor.CreateAccessor(System.Int32,System.Int32,Microsoft.VisualBasic.Compatibility.VB6.DBBINDING[],System.Int32,System.Int32@,System.IntPtr)
  parent: Microsoft.VisualBasic.Compatibility.VB6.IAccessor
  isExternal: false
  name: CreateAccessor(Int32,Int32,DBBINDING[],Int32,Int32,IntPtr)
  nameWithType: IAccessor.CreateAccessor(Int32,Int32,DBBINDING[],Int32,Int32,IntPtr)
  fullName: Microsoft.VisualBasic.Compatibility.VB6.IAccessor.CreateAccessor(Int32,Int32,DBBINDING[],Int32,Int32,IntPtr)
- uid: Microsoft.VisualBasic.Compatibility.VB6.DBBINDING[]
  parent: Microsoft.VisualBasic.Compatibility.VB6
  isExternal: false
  name: DBBINDING
  nameWithType: DBBINDING
  fullName: Microsoft.VisualBasic.Compatibility.VB6.DBBINDING[]
  spec.csharp:
  - uid: Microsoft.VisualBasic.Compatibility.VB6.DBBINDING
    name: DBBINDING
    nameWithType: DBBINDING
    fullName: DBBINDING[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: Microsoft.VisualBasic.Compatibility.VB6.IAccessor.GetBindings(System.Int32,System.Int32@,System.Int32@,System.IntPtr@)
  parent: Microsoft.VisualBasic.Compatibility.VB6.IAccessor
  isExternal: false
  name: GetBindings(Int32,Int32,Int32,IntPtr)
  nameWithType: IAccessor.GetBindings(Int32,Int32,Int32,IntPtr)
  fullName: Microsoft.VisualBasic.Compatibility.VB6.IAccessor.GetBindings(Int32,Int32,Int32,IntPtr)
- uid: Microsoft.VisualBasic.Compatibility.VB6.IAccessor.ReleaseAccessor(System.Int32,System.Int32@)
  parent: Microsoft.VisualBasic.Compatibility.VB6.IAccessor
  isExternal: false
  name: ReleaseAccessor(Int32,Int32)
  nameWithType: IAccessor.ReleaseAccessor(Int32,Int32)
  fullName: Microsoft.VisualBasic.Compatibility.VB6.IAccessor.ReleaseAccessor(Int32,Int32)
- uid: Microsoft.VisualBasic.Compatibility.VB6.IAccessor.AddRefAccessor*
  parent: Microsoft.VisualBasic.Compatibility.VB6.IAccessor
  isExternal: false
  name: AddRefAccessor
  nameWithType: IAccessor.AddRefAccessor
- uid: Microsoft.VisualBasic.Compatibility.VB6.IAccessor.CreateAccessor*
  parent: Microsoft.VisualBasic.Compatibility.VB6.IAccessor
  isExternal: false
  name: CreateAccessor
  nameWithType: IAccessor.CreateAccessor
- uid: Microsoft.VisualBasic.Compatibility.VB6.IAccessor.GetBindings*
  parent: Microsoft.VisualBasic.Compatibility.VB6.IAccessor
  isExternal: false
  name: GetBindings
  nameWithType: IAccessor.GetBindings
- uid: Microsoft.VisualBasic.Compatibility.VB6.IAccessor.ReleaseAccessor*
  parent: Microsoft.VisualBasic.Compatibility.VB6.IAccessor
  isExternal: false
  name: ReleaseAccessor
  nameWithType: IAccessor.ReleaseAccessor
