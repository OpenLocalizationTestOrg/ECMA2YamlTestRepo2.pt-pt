### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Activities.TransactedReceiveScope
  id: TransactedReceiveScope
  children:
  - System.ServiceModel.Activities.TransactedReceiveScope.#ctor
  - System.ServiceModel.Activities.TransactedReceiveScope.Body
  - System.ServiceModel.Activities.TransactedReceiveScope.CacheMetadata(System.Activities.NativeActivityMetadata)
  - System.ServiceModel.Activities.TransactedReceiveScope.Execute(System.Activities.NativeActivityContext)
  - System.ServiceModel.Activities.TransactedReceiveScope.Request
  - System.ServiceModel.Activities.TransactedReceiveScope.Variables
  langs:
  - csharp
  name: TransactedReceiveScope
  nameWithType: TransactedReceiveScope
  fullName: System.ServiceModel.Activities.TransactedReceiveScope
  type: Class
  summary: "An activity which scopes the lifetime of a transaction which is initiated by a received message. The transaction may be flowed into the workflow on the initiating message, or be created by the dispatcher when the message is received."
  remarks: "The TransactedReceiveScope activity enables you to control the lifetime of the flowed transaction.      > [!WARNING] >  For an initiating TransactedReceiveScope activity (a TransactedReceiveScope that contains a <xref:System.ServiceModel.Activities.Receive> activity with <xref:System.ServiceModel.Activities.Receive.CanCreateInstance%2A> set to `true`), the transaction is created before the runtime starts to execute the TransactedReceiveScope activity. This transaction is not ambient at the workflow activity layer, but it is ambient in the underlying persistence layers. If execution of the workflow encounters a <xref:System.Activities.Statements.Persist> activity before the TransactedReceiveScope activity, the runtime tries to persist under the ambient transaction. This behavior causes a block until the transaction is completed. Because the workflow execution has not reached the <xref:System.ServiceModel.Activities.TransactedReceiveScope.Body%2A> section, the transaction cannot finish. This deadlock causes the workflow to stop responding until the transaction times out. When the transaction times out, the newly created instance is aborted.      > [!IMPORTANT] >  Whenever you use a TransactedReceiveScope it is recommended to place all Receives in the workflow within TransactedReceiveScope activities.      > [!IMPORTANT] >  When using TransactedReceiveScope and messages arrive in the incorrect order, the workflow will be aborted when trying to deliver the first out of order message. You must make sure your workflow is always at a consistent stopping point when the workflow idles. This will allow you to restart the workflow from a previous persistence point should the workflow be aborted."
  example:
  - "The following example shows how to use the TransactedReceiveScope class in a <xref:System.Activities.Statements.Sequence> activity.  \n  \n [!code-cs[TransactedReceiveScope#0](~/add/codesnippet/csharp/common/codeserviceworkflow.cs#0)]"
  syntax:
    content: >-
      [System.Windows.Markup.ContentProperty("Body")]

      public sealed class TransactedReceiveScope : System.Activities.NativeActivity
  inheritance:
  - System.Object
  - System.Activities.Activity
  - System.Activities.NativeActivity
  implements: []
  inheritedMembers:
  - System.Activities.Activity.CacheId
  - System.Activities.Activity.Constraints
  - System.Activities.Activity.DisplayName
  - System.Activities.Activity.Id
  - System.Activities.Activity.ShouldSerializeDisplayName
  - System.Activities.Activity.ToString
  - System.Activities.NativeActivity.Abort(System.Activities.NativeActivityAbortContext)
  - System.Activities.NativeActivity.CacheMetadata(System.Activities.ActivityMetadata)
  - System.Activities.NativeActivity.Cancel(System.Activities.NativeActivityContext)
  - System.Activities.NativeActivity.CanInduceIdle
  - System.Activities.NativeActivity.Implementation
  - System.Activities.NativeActivity.ImplementationVersion
  - System.Activities.NativeActivity.OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata,System.Activities.Activity)
  - System.Activities.NativeActivity.OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.UpdateMapMetadata,System.Activities.Activity)
  - System.Activities.NativeActivity.UpdateInstance(System.Activities.DynamicUpdate.NativeActivityUpdateContext)
  platform:
  - net462
- uid: System.ServiceModel.Activities.TransactedReceiveScope.#ctor
  id: '#ctor'
  parent: System.ServiceModel.Activities.TransactedReceiveScope
  langs:
  - csharp
  name: TransactedReceiveScope()
  nameWithType: TransactedReceiveScope.TransactedReceiveScope()
  fullName: System.ServiceModel.Activities.TransactedReceiveScope.TransactedReceiveScope()
  type: Constructor
  assemblies:
  - System.ServiceModel.Activities
  namespace: System.ServiceModel.Activities
  summary: "Initializes a new instance of the <xref href=&quot;System.ServiceModel.Activities.TransactedReceiveScope&quot;></xref> class."
  syntax:
    content: public TransactedReceiveScope ();
    parameters: []
  overload: System.ServiceModel.Activities.TransactedReceiveScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Activities.TransactedReceiveScope.Body
  id: Body
  parent: System.ServiceModel.Activities.TransactedReceiveScope
  langs:
  - csharp
  name: Body
  nameWithType: TransactedReceiveScope.Body
  fullName: System.ServiceModel.Activities.TransactedReceiveScope.Body
  type: Property
  assemblies:
  - System.ServiceModel.Activities
  namespace: System.ServiceModel.Activities
  summary: "Gets or sets the <xref href=&quot;System.Activities.Activity&quot;></xref> that makes up the body of the <xref href=&quot;System.ServiceModel.Activities.TransactedReceiveScope&quot;></xref> activity."
  remarks: "The transaction is ambient for the entire duration of the body."
  example:
  - "The following example shows how to set the Body property.  \n  \n [!code-cs[TransactedReceiveScope#0](~/add/codesnippet/csharp/common/codeserviceworkflow.cs#0)]"
  syntax:
    content: public System.Activities.Activity Body { get; set; }
    return:
      type: System.Activities.Activity
      description: "The body of the transacted receive scope."
  overload: System.ServiceModel.Activities.TransactedReceiveScope.Body*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Activities.TransactedReceiveScope.CacheMetadata(System.Activities.NativeActivityMetadata)
  id: CacheMetadata(System.Activities.NativeActivityMetadata)
  parent: System.ServiceModel.Activities.TransactedReceiveScope
  langs:
  - csharp
  name: CacheMetadata(NativeActivityMetadata)
  nameWithType: TransactedReceiveScope.CacheMetadata(NativeActivityMetadata)
  fullName: System.ServiceModel.Activities.TransactedReceiveScope.CacheMetadata(NativeActivityMetadata)
  type: Method
  assemblies:
  - System.ServiceModel.Activities
  namespace: System.ServiceModel.Activities
  syntax:
    content: protected override void CacheMetadata (System.Activities.NativeActivityMetadata metadata);
    parameters:
    - id: metadata
      type: System.Activities.NativeActivityMetadata
      description: "To be added."
  overload: System.ServiceModel.Activities.TransactedReceiveScope.CacheMetadata*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Activities.TransactedReceiveScope.Execute(System.Activities.NativeActivityContext)
  id: Execute(System.Activities.NativeActivityContext)
  parent: System.ServiceModel.Activities.TransactedReceiveScope
  langs:
  - csharp
  name: Execute(NativeActivityContext)
  nameWithType: TransactedReceiveScope.Execute(NativeActivityContext)
  fullName: System.ServiceModel.Activities.TransactedReceiveScope.Execute(NativeActivityContext)
  type: Method
  assemblies:
  - System.ServiceModel.Activities
  namespace: System.ServiceModel.Activities
  syntax:
    content: protected override void Execute (System.Activities.NativeActivityContext context);
    parameters:
    - id: context
      type: System.Activities.NativeActivityContext
      description: "To be added."
  overload: System.ServiceModel.Activities.TransactedReceiveScope.Execute*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Activities.TransactedReceiveScope.Request
  id: Request
  parent: System.ServiceModel.Activities.TransactedReceiveScope
  langs:
  - csharp
  name: Request
  nameWithType: TransactedReceiveScope.Request
  fullName: System.ServiceModel.Activities.TransactedReceiveScope.Request
  type: Property
  assemblies:
  - System.ServiceModel.Activities
  namespace: System.ServiceModel.Activities
  summary: "Gets or sets the <xref href=&quot;System.ServiceModel.Activities.Receive&quot;></xref> activity associated with this <xref href=&quot;System.ServiceModel.Activities.TransactedReceiveScope&quot;></xref> activity."
  remarks: ''
  example:
  - "The following example shows how to set the Request property.  \n  \n [!code-cs[TransactedReceiveScope#0](~/add/codesnippet/csharp/common/codeserviceworkflow.cs#0)]"
  syntax:
    content: public System.ServiceModel.Activities.Receive Request { get; set; }
    return:
      type: System.ServiceModel.Activities.Receive
      description: "The receive activity associated with the transacted receive scope."
  overload: System.ServiceModel.Activities.TransactedReceiveScope.Request*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Activities.TransactedReceiveScope.Variables
  id: Variables
  parent: System.ServiceModel.Activities.TransactedReceiveScope
  langs:
  - csharp
  name: Variables
  nameWithType: TransactedReceiveScope.Variables
  fullName: System.ServiceModel.Activities.TransactedReceiveScope.Variables
  type: Property
  assemblies:
  - System.ServiceModel.Activities
  namespace: System.ServiceModel.Activities
  summary: "Gets the collection of <xref href=&quot;System.Activities.Variable&quot;></xref> associated with this <xref href=&quot;System.ServiceModel.Activities.TransactedReceiveScope&quot;></xref>."
  remarks: ''
  example:
  - "The following example shows how to set the Variables property.  \n  \n [!code-cs[TransactedReceiveScope#0](~/add/codesnippet/csharp/common/codeserviceworkflow.cs#0)]"
  syntax:
    content: public System.Collections.ObjectModel.Collection<System.Activities.Variable> Variables { get; }
    return:
      type: System.Collections.ObjectModel.Collection{System.Activities.Variable}
      description: "The variables associated with the transacted receive scope."
  overload: System.ServiceModel.Activities.TransactedReceiveScope.Variables*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Activities.NativeActivity
  isExternal: false
  name: System.Activities.NativeActivity
- uid: System.ServiceModel.Activities.TransactedReceiveScope.#ctor
  parent: System.ServiceModel.Activities.TransactedReceiveScope
  isExternal: false
  name: TransactedReceiveScope()
  nameWithType: TransactedReceiveScope.TransactedReceiveScope()
  fullName: System.ServiceModel.Activities.TransactedReceiveScope.TransactedReceiveScope()
- uid: System.ServiceModel.Activities.TransactedReceiveScope.Body
  parent: System.ServiceModel.Activities.TransactedReceiveScope
  isExternal: false
  name: Body
  nameWithType: TransactedReceiveScope.Body
  fullName: System.ServiceModel.Activities.TransactedReceiveScope.Body
- uid: System.Activities.Activity
  parent: System.Activities
  isExternal: false
  name: Activity
  nameWithType: Activity
  fullName: System.Activities.Activity
- uid: System.ServiceModel.Activities.TransactedReceiveScope.CacheMetadata(System.Activities.NativeActivityMetadata)
  parent: System.ServiceModel.Activities.TransactedReceiveScope
  isExternal: false
  name: CacheMetadata(NativeActivityMetadata)
  nameWithType: TransactedReceiveScope.CacheMetadata(NativeActivityMetadata)
  fullName: System.ServiceModel.Activities.TransactedReceiveScope.CacheMetadata(NativeActivityMetadata)
- uid: System.Activities.NativeActivityMetadata
  parent: System.Activities
  isExternal: false
  name: NativeActivityMetadata
  nameWithType: NativeActivityMetadata
  fullName: System.Activities.NativeActivityMetadata
- uid: System.ServiceModel.Activities.TransactedReceiveScope.Execute(System.Activities.NativeActivityContext)
  parent: System.ServiceModel.Activities.TransactedReceiveScope
  isExternal: false
  name: Execute(NativeActivityContext)
  nameWithType: TransactedReceiveScope.Execute(NativeActivityContext)
  fullName: System.ServiceModel.Activities.TransactedReceiveScope.Execute(NativeActivityContext)
- uid: System.Activities.NativeActivityContext
  parent: System.Activities
  isExternal: false
  name: NativeActivityContext
  nameWithType: NativeActivityContext
  fullName: System.Activities.NativeActivityContext
- uid: System.ServiceModel.Activities.TransactedReceiveScope.Request
  parent: System.ServiceModel.Activities.TransactedReceiveScope
  isExternal: false
  name: Request
  nameWithType: TransactedReceiveScope.Request
  fullName: System.ServiceModel.Activities.TransactedReceiveScope.Request
- uid: System.ServiceModel.Activities.Receive
  parent: System.ServiceModel.Activities
  isExternal: false
  name: Receive
  nameWithType: Receive
  fullName: System.ServiceModel.Activities.Receive
- uid: System.ServiceModel.Activities.TransactedReceiveScope.Variables
  parent: System.ServiceModel.Activities.TransactedReceiveScope
  isExternal: false
  name: Variables
  nameWithType: TransactedReceiveScope.Variables
  fullName: System.ServiceModel.Activities.TransactedReceiveScope.Variables
- uid: System.Collections.ObjectModel.Collection{System.Activities.Variable}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: Collection<Variable>
  nameWithType: Collection<Variable>
  fullName: System.Collections.ObjectModel.Collection<System.Activities.Variable>
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: Collection<System.Activities.Variable>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Activities.Variable
    name: Variable
    nameWithType: Variable
    fullName: Variable
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ServiceModel.Activities.TransactedReceiveScope.#ctor*
  parent: System.ServiceModel.Activities.TransactedReceiveScope
  isExternal: false
  name: TransactedReceiveScope
  nameWithType: TransactedReceiveScope.TransactedReceiveScope
- uid: System.ServiceModel.Activities.TransactedReceiveScope.Body*
  parent: System.ServiceModel.Activities.TransactedReceiveScope
  isExternal: false
  name: Body
  nameWithType: TransactedReceiveScope.Body
- uid: System.ServiceModel.Activities.TransactedReceiveScope.CacheMetadata*
  parent: System.ServiceModel.Activities.TransactedReceiveScope
  isExternal: false
  name: CacheMetadata
  nameWithType: TransactedReceiveScope.CacheMetadata
- uid: System.ServiceModel.Activities.TransactedReceiveScope.Execute*
  parent: System.ServiceModel.Activities.TransactedReceiveScope
  isExternal: false
  name: Execute
  nameWithType: TransactedReceiveScope.Execute
- uid: System.ServiceModel.Activities.TransactedReceiveScope.Request*
  parent: System.ServiceModel.Activities.TransactedReceiveScope
  isExternal: false
  name: Request
  nameWithType: TransactedReceiveScope.Request
- uid: System.ServiceModel.Activities.TransactedReceiveScope.Variables*
  parent: System.ServiceModel.Activities.TransactedReceiveScope
  isExternal: false
  name: Variables
  nameWithType: TransactedReceiveScope.Variables
