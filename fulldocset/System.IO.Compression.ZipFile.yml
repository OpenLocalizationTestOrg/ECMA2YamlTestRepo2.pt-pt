### YamlMime:ManagedReference
items:
- uid: System.IO.Compression.ZipFile
  id: ZipFile
  children:
  - System.IO.Compression.ZipFile.CreateFromDirectory(System.String,System.String)
  - System.IO.Compression.ZipFile.CreateFromDirectory(System.String,System.String,System.IO.Compression.CompressionLevel,System.Boolean)
  - System.IO.Compression.ZipFile.CreateFromDirectory(System.String,System.String,System.IO.Compression.CompressionLevel,System.Boolean,System.Text.Encoding)
  - System.IO.Compression.ZipFile.ExtractToDirectory(System.String,System.String)
  - System.IO.Compression.ZipFile.ExtractToDirectory(System.String,System.String,System.Text.Encoding)
  - System.IO.Compression.ZipFile.Open(System.String,System.IO.Compression.ZipArchiveMode)
  - System.IO.Compression.ZipFile.Open(System.String,System.IO.Compression.ZipArchiveMode,System.Text.Encoding)
  - System.IO.Compression.ZipFile.OpenRead(System.String)
  langs:
  - csharp
  name: ZipFile
  nameWithType: ZipFile
  fullName: System.IO.Compression.ZipFile
  type: Class
  summary: "Provides static methods for creating, extracting, and opening zip archives."
  remarks: "> [!IMPORTANT] >  To use the ZipFile class, you must add a reference to the `System.IO.Compression.FileSystem` assembly in your project; otherwise, you&quot;ll get the following error message when trying to compile : **The name &quot;ZipFile&quot; does not exist in the current context**. For more information on how to add a reference to your project in Visual Studio, see [How to: Add or Remove References By Using the Reference Manager](~/add/includes/ajax-current-ext-md.md).       The methods for manipulating zip archives and their files are spread across three classes: ZipFile, <xref:System.IO.Compression.ZipArchive> and <xref:System.IO.Compression.ZipArchiveEntry>.      |To…|Use…|   |---------|----------|   |Create a zip archive from a directory|<xref:System.IO.Compression.ZipFile.CreateFromDirectory%2A?displayProperty=fullName>|   |Extract the contents of a zip archive to a directory|<xref:System.IO.Compression.ZipFile.ExtractToDirectory%2A?displayProperty=fullName>|   |Add new files to an existing zip archive|<xref:System.IO.Compression.ZipArchive.CreateEntry%2A?displayProperty=fullName>|   |Retrieve an file in a zip archive|<xref:System.IO.Compression.ZipArchive.GetEntry%2A?displayProperty=fullName>|   |Retrieve all of the files in a zip archive|<xref:System.IO.Compression.ZipArchive.Entries%2A?displayProperty=fullName>|   |To open a stream to an individual file contained in a zip archive|<xref:System.IO.Compression.ZipArchiveEntry.Open%2A?displayProperty=fullName>|   |Delete a file from a zip archive|<xref:System.IO.Compression.ZipArchiveEntry.Delete%2A?displayProperty=fullName>|       You cannot use the ZipFile or  <xref:System.IO.Compression.ZipFileExtensions> classes  in [!INCLUDE[win8_appname_long](~/add/includes/win8-appname-long-md.md)] apps. In [!INCLUDE[win8_appname_long](~/add/includes/win8-appname-long-md.md)] apps, you should use the following classes to work with compressed files.      -   <xref:System.IO.Compression.ZipArchive>      -   <xref:System.IO.Compression.ZipArchiveEntry>      -   <xref:System.IO.Compression.DeflateStream>      -   <xref:System.IO.Compression.GZipStream>"
  example:
  - "This example shows how to create and extract a zip archive by using the ZipFile class. It compresses the contents of a folder into a zip archive, and then extracts that content to a new folder.  \n  \n> [!TIP]\n>  To use the ZipFile class, you must reference the `System.IO.Compression.FileSystem` assembly in your project.  \n  \n [!code-cs[System.IO.Compression.ZipFile#1](~/add/codesnippet/csharp/t-system.io.compression._3_1.cs)]\n [!code-vb[System.IO.Compression.ZipFile#1](~/add/codesnippet/visualbasic/t-system.io.compression._3_1.vb)]"
  syntax:
    content: public static class ZipFile
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.IO.Compression.ZipFile.CreateFromDirectory(System.String,System.String)
  id: CreateFromDirectory(System.String,System.String)
  parent: System.IO.Compression.ZipFile
  langs:
  - csharp
  name: CreateFromDirectory(String,String)
  nameWithType: ZipFile.CreateFromDirectory(String,String)
  fullName: System.IO.Compression.ZipFile.CreateFromDirectory(String,String)
  type: Method
  assemblies:
  - System.IO.Compression.FileSystem
  namespace: System.IO.Compression
  summary: "Creates a zip archive that contains the files and directories from the specified directory."
  remarks: "The directory structure from the file system is preserved in the archive. If the directory is empty, an empty archive is created. This method overload does not include the base directory in the archive and does not allow you to specify a compression level. If you want to include the base directory or specify a compression level, call the <xref:System.IO.Compression.ZipFile.CreateFromDirectory%28System.String%2CSystem.String%2CSystem.IO.Compression.CompressionLevel%2CSystem.Boolean%29> method overload.       If the archive already exists, an <xref:System.IO.IOException> exception is thrown. If an entry with the specified name already exists in the archive, a second entry is created with an identical name.       If a file in the directory cannot be added to the archive, the archive is left incomplete and invalid, and the method throws an <xref:System.IO.IOException> exception."
  example:
  - "This example shows how to create and extract a zip archive by using the <xref:System.IO.Compression.ZipFile> class. It compresses the contents of a folder into a zip archive, and then extracts that content to a new folder. To use the <xref:System.IO.Compression.ZipFile> class, you must reference the `System.IO.Compression.FileSystem` assembly in your project.  \n  \n [!code-cs[System.IO.Compression.ZipFile#1](~/add/codesnippet/csharp/m-system.io.compression._3_1.cs)]\n [!code-vb[System.IO.Compression.ZipFile#1](~/add/codesnippet/visualbasic/m-system.io.compression._3_1.vb)]"
  syntax:
    content: public static void CreateFromDirectory (string sourceDirectoryName, string destinationArchiveFileName);
    parameters:
    - id: sourceDirectoryName
      type: System.String
      description: "The path to the directory to be archived, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory."
    - id: destinationArchiveFileName
      type: System.String
      description: "The path of the archive to be created, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory."
  overload: System.IO.Compression.ZipFile.CreateFromDirectory*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>sourceDirectoryName</code> or <code>destinationArchiveFileName</code> is <xref:System.String>, contains only white space, or contains at least one invalid character."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>sourceDirectoryName</code> or <code>destinationArchiveFileName</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "In <code>sourceDirectoryName</code> or <code>destinationArchiveFileName</code>, the specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must not exceed 248 characters, and file names must not exceed 260 characters."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code>sourceDirectoryName</code> is invalid or does not exist (for example, it is on an unmapped drive)."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>destinationArchiveFileName</code> already exists.       -or-       A file in the specified directory could not be opened."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<code>destinationArchiveFileName</code> specifies a directory.       -or-       The caller does not have the required permission to access the directory specified in <code>sourceDirectoryName</code> or the file specified in <code>destinationArchiveFileName</code>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>sourceDirectoryName</code> or <code>destinationArchiveFileName</code> contains an invalid format.       -or-       The zip archive does not support writing."
  platform:
  - net462
- uid: System.IO.Compression.ZipFile.CreateFromDirectory(System.String,System.String,System.IO.Compression.CompressionLevel,System.Boolean)
  id: CreateFromDirectory(System.String,System.String,System.IO.Compression.CompressionLevel,System.Boolean)
  parent: System.IO.Compression.ZipFile
  langs:
  - csharp
  name: CreateFromDirectory(String,String,CompressionLevel,Boolean)
  nameWithType: ZipFile.CreateFromDirectory(String,String,CompressionLevel,Boolean)
  fullName: System.IO.Compression.ZipFile.CreateFromDirectory(String,String,CompressionLevel,Boolean)
  type: Method
  assemblies:
  - System.IO.Compression.FileSystem
  namespace: System.IO.Compression
  summary: "Creates a zip archive that contains the files and directories from the specified directory, uses the specified compression level, and optionally includes the base directory."
  remarks: "The directory structure from the file system is preserved in the archive. If the directory is empty, an empty archive is created. Use this method overload to specify the compression level and whether to include the base directory in the archive.       If the archive already exists, an <xref:System.IO.IOException> exception is thrown. If an entry with the specified name already exists in the archive, a second entry is created with an identical name.       If a file in the directory cannot be added to the archive, the archive is left incomplete and invalid, and the method throws an <xref:System.IO.IOException> exception."
  example:
  - "This example shows how to create and extract a zip archive by using the <xref:System.IO.Compression.ZipFile> class. It compresses the contents of a folder into a zip archive, and then extracts that content to a new folder. When compressing the archive, the base directory is included and the compression level is set to emphasize the speed of the operation over efficiency. To use the <xref:System.IO.Compression.ZipFile> class, you must reference the `System.IO.Compression.FileSystem` assembly in your project.  \n  \n [!code-cs[System.IO.Compression.ZipFile#2](~/add/codesnippet/csharp/42971baa-9b4d-4381-a7b3-_1.cs)]\n [!code-vb[System.IO.Compression.ZipFile#2](~/add/codesnippet/visualbasic/42971baa-9b4d-4381-a7b3-_1.vb)]"
  syntax:
    content: public static void CreateFromDirectory (string sourceDirectoryName, string destinationArchiveFileName, System.IO.Compression.CompressionLevel compressionLevel, bool includeBaseDirectory);
    parameters:
    - id: sourceDirectoryName
      type: System.String
      description: "The path to the directory to be archived, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory."
    - id: destinationArchiveFileName
      type: System.String
      description: "The path of the archive to be created, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory."
    - id: compressionLevel
      type: System.IO.Compression.CompressionLevel
      description: "One of the enumeration values that indicates whether to emphasize speed or compression effectiveness when creating the entry."
    - id: includeBaseDirectory
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to include the directory name from `sourceDirectoryName` at the root of the archive; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> to include only the contents of the directory."
  overload: System.IO.Compression.ZipFile.CreateFromDirectory*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>sourceDirectoryName</code> or <code>destinationArchiveFileName</code> is <xref:System.String>, contains only white space, or contains at least one invalid character."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>sourceDirectoryName</code> or <code>destinationArchiveFileName</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "In <code>sourceDirectoryName</code> or <code>destinationArchiveFileName</code>, the specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must not exceed 248 characters, and file names must not exceed 260 characters."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code>sourceDirectoryName</code> is invalid or does not exist (for example, it is on an unmapped drive)."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>destinationArchiveFileName</code> already exists.       -or-       A file in the specified directory could not be opened."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<code>destinationArchiveFileName</code> specifies a directory.       -or-       The caller does not have the required permission to access the directory specified in <code>sourceDirectoryName</code> or the file specified in <code>destinationArchiveFileName</code>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>sourceDirectoryName</code> or <code>destinationArchiveFileName</code> contains an invalid format.       -or-       The zip archive does not support writing."
  platform:
  - net462
- uid: System.IO.Compression.ZipFile.CreateFromDirectory(System.String,System.String,System.IO.Compression.CompressionLevel,System.Boolean,System.Text.Encoding)
  id: CreateFromDirectory(System.String,System.String,System.IO.Compression.CompressionLevel,System.Boolean,System.Text.Encoding)
  parent: System.IO.Compression.ZipFile
  langs:
  - csharp
  name: CreateFromDirectory(String,String,CompressionLevel,Boolean,Encoding)
  nameWithType: ZipFile.CreateFromDirectory(String,String,CompressionLevel,Boolean,Encoding)
  fullName: System.IO.Compression.ZipFile.CreateFromDirectory(String,String,CompressionLevel,Boolean,Encoding)
  type: Method
  assemblies:
  - System.IO.Compression.FileSystem
  namespace: System.IO.Compression
  summary: "Creates a zip archive that contains the files and directories from the specified directory, uses the specified compression level and character encoding for entry names, and optionally includes the base directory."
  remarks: "The directory structure from the file system is preserved in the archive. If the directory is empty, an empty archive is created. Use this method overload to specify the compression level and character encoding, and whether to include the base directory in the archive.       If the archive already exists, an <xref:System.IO.IOException> exception is thrown. If an entry with the specified name already exists in the archive, a second entry is created with an identical name.       If a file in the directory cannot be added to the archive, the archive is left incomplete and invalid, and the method throws an <xref:System.IO.IOException> exception.       If `entryNameEncoding` is set to a value other than `null`, the entry names are encoded by using the specified encoding. If the specified encoding is a UTF-8, the language encoding flag (in the general-purpose bit flag of the local file header) is set for each entry,       If `entryNameEncoding` is set to `null`, the entry names are encoded according to the following rules:      -   For entry names that contain characters outside the ASCII range, the language encoding flag is set, and UTF-8 is used to encode the entry name.      -   For entry names that contain only ASCII characters, the language encoding flag is set, and the current system default code page is used to encode the entry names."
  syntax:
    content: public static void CreateFromDirectory (string sourceDirectoryName, string destinationArchiveFileName, System.IO.Compression.CompressionLevel compressionLevel, bool includeBaseDirectory, System.Text.Encoding entryNameEncoding);
    parameters:
    - id: sourceDirectoryName
      type: System.String
      description: "The path to the directory to be archived, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory."
    - id: destinationArchiveFileName
      type: System.String
      description: "The path of the archive to be created, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory."
    - id: compressionLevel
      type: System.IO.Compression.CompressionLevel
      description: "One of the enumeration values that indicates whether to emphasize speed or compression effectiveness when creating the entry."
    - id: includeBaseDirectory
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to include the directory name from `sourceDirectoryName` at the root of the archive; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> to include only the contents of the directory."
    - id: entryNameEncoding
      type: System.Text.Encoding
      description: "The encoding to use when reading or writing entry names in this archive. Specify a value for this parameter only when an encoding is required for interoperability with zip archive tools and libraries that do not support UTF-8 encoding for entry names."
  overload: System.IO.Compression.ZipFile.CreateFromDirectory*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>sourceDirectoryName</code> or <code>destinationArchiveFileName</code> is <xref:System.String>, contains only white space, or contains at least one invalid character.       -or-       <code>entryNameEncoding</code> is set to a Unicode encoding other than UTF-8."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>sourceDirectoryName</code> or <code>destinationArchiveFileName</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "In <code>sourceDirectoryName</code> or <code>destinationArchiveFileName</code>, the specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must not exceed 248 characters, and file names must not exceed 260 characters."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code>sourceDirectoryName</code> is invalid or does not exist (for example, it is on an unmapped drive)."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>destinationArchiveFileName</code> already exists.       -or-       A file in the specified directory could not be opened."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<code>destinationArchiveFileName</code> specifies a directory.       -or-       The caller does not have the required permission to access the directory specified in <code>sourceDirectoryName</code> or the file specified in <code>destinationArchiveFileName</code>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>sourceDirectoryName</code> or <code>destinationArchiveFileName</code> contains an invalid format.       -or-       The zip archive does not support writing."
  platform:
  - net462
- uid: System.IO.Compression.ZipFile.ExtractToDirectory(System.String,System.String)
  id: ExtractToDirectory(System.String,System.String)
  parent: System.IO.Compression.ZipFile
  langs:
  - csharp
  name: ExtractToDirectory(String,String)
  nameWithType: ZipFile.ExtractToDirectory(String,String)
  fullName: System.IO.Compression.ZipFile.ExtractToDirectory(String,String)
  type: Method
  assemblies:
  - System.IO.Compression.FileSystem
  namespace: System.IO.Compression
  summary: "Extracts all the files in the specified zip archive to a directory on the file system."
  remarks: "This method creates the specified directory and all subdirectories. The destination directory cannot already exist. Exceptions related to validating the paths in the `destinationDirectoryName` or `sourceArchiveFileName` parameters are thrown before extraction. Otherwise, if an error occurs during extraction, the archive remains partially extracted. Each extracted file has the same relative path to the directory specified by `destinationDirectoryName` as its source entry has to the root of the archive."
  example:
  - "This example shows how to create and extract a zip archive by using the <xref:System.IO.Compression.ZipFile> class. It compresses the contents of a folder into a zip archive and extracts that content to a new folder. To use the <xref:System.IO.Compression.ZipFile> class, you must reference the `System.IO.Compression.FileSystem` assembly in your project.  \n  \n [!code-cs[System.IO.Compression.ZipFile#1](~/add/codesnippet/csharp/m-system.io.compression._5_1.cs)]\n [!code-vb[System.IO.Compression.ZipFile#1](~/add/codesnippet/visualbasic/m-system.io.compression._5_1.vb)]"
  syntax:
    content: public static void ExtractToDirectory (string sourceArchiveFileName, string destinationDirectoryName);
    parameters:
    - id: sourceArchiveFileName
      type: System.String
      description: "The path to the archive that is to be extracted."
    - id: destinationDirectoryName
      type: System.String
      description: "The path to the directory in which to place the extracted files, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory."
  overload: System.IO.Compression.ZipFile.ExtractToDirectory*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>destinationDirectoryName</code> or <code>sourceArchiveFileName</code> is <xref:System.String>, contains only white space, or contains at least one invalid character."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>destinationDirectoryName</code> or <code>sourceArchiveFileName</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path in <code>destinationDirectoryName</code> or <code>sourceArchiveFileName</code> exceeds the system-defined maximum length. For example, on Windows-based platforms, paths must not exceed 248 characters, and file names must not exceed 260 characters."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "The specified path is invalid (for example, it is on an unmapped drive)."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The directory specified by <code>destinationDirectoryName</code> already exists.       -or-       The name of an entry in the archive is <xref:System.String>, contains only white space, or contains at least one invalid character.       -or-       Extracting an archive entry would create a file that is outside the directory specified by <code>destinationDirectoryName</code>. (For example, this might happen if the entry name contains parent directory accessors.)       -or-       An archive entry to extract has the same name as an entry that has already been extracted from the same archive."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The caller does not have the required permission to access the archive or the destination directory."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>destinationDirectoryName</code> or <code>sourceArchiveFileName</code> contains an invalid format."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "<code>sourceArchiveFileName</code> was not found."
  - type: System.IO.InvalidDataException
    commentId: T:System.IO.InvalidDataException
    description: "The archive specified by <code>sourceArchiveFileName</code> is not a valid zip archive.       -or-       An archive entry was not found or was corrupt.       -or-       An archive entry was compressed by using a compression method that is not supported."
  platform:
  - net462
- uid: System.IO.Compression.ZipFile.ExtractToDirectory(System.String,System.String,System.Text.Encoding)
  id: ExtractToDirectory(System.String,System.String,System.Text.Encoding)
  parent: System.IO.Compression.ZipFile
  langs:
  - csharp
  name: ExtractToDirectory(String,String,Encoding)
  nameWithType: ZipFile.ExtractToDirectory(String,String,Encoding)
  fullName: System.IO.Compression.ZipFile.ExtractToDirectory(String,String,Encoding)
  type: Method
  assemblies:
  - System.IO.Compression.FileSystem
  namespace: System.IO.Compression
  summary: "Extracts all the files in the specified zip archive to a directory on the file system and uses the specified character encoding for entry names."
  remarks: "This method creates the specified directory and all subdirectories. The destination directory cannot already exist. Exceptions related to validating the paths in the `destinationDirectoryName` or `sourceArchiveFileName` parameters are thrown before extraction. Otherwise, if an error occurs during extraction, the archive remains partially extracted. Each extracted file has the same relative path to the directory specified by `destinationDirectoryName` as its source entry has to the root of the archive.       If `entryNameEncoding` is set to a value other than `null`, entry names are decoded according to the following rules:      -   For entry names where the language encoding flag (in the general-purpose bit flag of the local file header) is not set, the entry names are decoded by using the specified encoding.      -   For entries where the language encoding flag is set, the entry names are decoded by using UTF-8.       If `entryNameEncoding` is set to `null`, entry names are decoded according to the following rules:      -   For entries where the language encoding flag (in the general-purpose bit flag of the local file header) is not set, entry names are decoded by using the current system default code page.      -   For entries where the language encoding flag is set, the entry names are decoded by using UTF-8."
  syntax:
    content: public static void ExtractToDirectory (string sourceArchiveFileName, string destinationDirectoryName, System.Text.Encoding entryNameEncoding);
    parameters:
    - id: sourceArchiveFileName
      type: System.String
      description: "The path to the archive that is to be extracted."
    - id: destinationDirectoryName
      type: System.String
      description: "The path to the directory in which to place the extracted files, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory."
    - id: entryNameEncoding
      type: System.Text.Encoding
      description: "The encoding to use when reading or writing entry names in this archive. Specify a value for this parameter only when an encoding is required for interoperability with zip archive tools and libraries that do not support UTF-8 encoding for entry names."
  overload: System.IO.Compression.ZipFile.ExtractToDirectory*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>destinationDirectoryName</code> or <code>sourceArchiveFileName</code> is <xref:System.String>, contains only white space, or contains at least one invalid character.       -or-       <code>entryNameEncoding</code> is set to a Unicode encoding other than UTF-8."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>destinationDirectoryName</code> or <code>sourceArchiveFileName</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path in <code>destinationDirectoryName</code> or <code>sourceArchiveFileName</code> exceeds the system-defined maximum length. For example, on Windows-based platforms, paths must not exceed 248 characters, and file names must not exceed 260 characters."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "The specified path is invalid (for example, it is on an unmapped drive)."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The directory specified by <code>destinationDirectoryName</code> already exists.       -or-       The name of an entry in the archive is <xref:System.String>, contains only white space, or contains at least one invalid character.       -or-       Extracting an archive entry would create a file that is outside the directory specified by <code>destinationDirectoryName</code>. (For example, this might happen if the entry name contains parent directory accessors.)       -or-       An archive entry to extract has the same name as an entry that has already been extracted from the same archive."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The caller does not have the required permission to access the archive or the destination directory."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>destinationDirectoryName</code> or <code>sourceArchiveFileName</code> contains an invalid format."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "<code>sourceArchiveFileName</code> was not found."
  - type: System.IO.InvalidDataException
    commentId: T:System.IO.InvalidDataException
    description: "The archive specified by <code>sourceArchiveFileName</code> is not a valid zip archive.       -or-       An archive entry was not found or was corrupt.       -or-       An archive entry was compressed by using a compression method that is not supported."
  platform:
  - net462
- uid: System.IO.Compression.ZipFile.Open(System.String,System.IO.Compression.ZipArchiveMode)
  id: Open(System.String,System.IO.Compression.ZipArchiveMode)
  parent: System.IO.Compression.ZipFile
  langs:
  - csharp
  name: Open(String,ZipArchiveMode)
  nameWithType: ZipFile.Open(String,ZipArchiveMode)
  fullName: System.IO.Compression.ZipFile.Open(String,ZipArchiveMode)
  type: Method
  assemblies:
  - System.IO.Compression.FileSystem
  namespace: System.IO.Compression
  summary: "Opens a zip archive at the specified path and in the specified mode."
  remarks: "When you set the `mode` parameter to <xref:System.IO.Compression.ZipArchiveMode>, the archive is opened with <xref:System.IO.FileMode> from the <xref:System.IO.FileMode> enumeration as the file mode value. If the archive does not exist, a <xref:System.IO.FileNotFoundException> exception is thrown. Setting the `mode` parameter to <xref:System.IO.Compression.ZipArchiveMode> is equivalent to calling the <xref:System.IO.Compression.ZipFile.OpenRead%2A> method.       When you set the `mode` parameter to <xref:System.IO.Compression.ZipArchiveMode>, the archive is opened with <xref:System.IO.FileMode?displayProperty=fullName> as the file mode value. If the archive already exists, an <xref:System.IO.IOException> is thrown.       When you set the `mode` parameter to <xref:System.IO.Compression.ZipArchiveMode>,  the archive is opened with <xref:System.IO.FileMode?displayProperty=fullName> as the file mode value. If the archive exists, it is opened. The existing entries can be modified and new entries can be created. If the archive does not exist, a new archive is created; however, creating a zip archive in <xref:System.IO.Compression.ZipArchiveMode> mode is not as efficient as creating it in <xref:System.IO.Compression.ZipArchiveMode> mode."
  example:
  - "The following example shows how to open a zip archive in the update mode and add an entry to the archive.  \n  \n [!code-cs[System.IO.Compression.ZipArchive#3](~/add/codesnippet/csharp/7e49a288-de57-4354-b009-_1.cs)]\n [!code-vb[System.IO.Compression.ZipArchive#3](~/add/codesnippet/visualbasic/7e49a288-de57-4354-b009-_1.vb)]"
  syntax:
    content: public static System.IO.Compression.ZipArchive Open (string archiveFileName, System.IO.Compression.ZipArchiveMode mode);
    parameters:
    - id: archiveFileName
      type: System.String
      description: "The path to the archive to open, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory."
    - id: mode
      type: System.IO.Compression.ZipArchiveMode
      description: "One of the enumeration values that specifies the actions which are allowed on the entries in the opened archive."
    return:
      type: System.IO.Compression.ZipArchive
      description: "The opened zip archive."
  overload: System.IO.Compression.ZipFile.Open*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>archiveFileName</code> is <xref:System.String>, contains only white space, or contains at least one invalid character."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>archiveFileName</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "In <code>archiveFileName</code>, the specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must not exceed 248 characters, and file names must not exceed 260 characters."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code>archiveFileName</code> is invalid or does not exist (for example, it is on an unmapped drive)."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>archiveFileName</code> could not be opened.       -or-       <code>mode</code> is set to <xref href=&quot;System.IO.Compression.ZipArchiveMode&quot;></xref>, but the file specified in <code>archiveFileName</code> already exists."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<code>archiveFileName</code> specifies a directory.       -or-       The caller does not have the required permission to access the file specified in <code>archiveFileName</code>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>mode</code> specifies an invalid value."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "<code>mode</code> is set to <xref href=&quot;System.IO.Compression.ZipArchiveMode&quot;></xref>, but the file specified in <code>archiveFileName</code> is not found."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>archiveFileName</code> contains an invalid format."
  - type: System.IO.InvalidDataException
    commentId: T:System.IO.InvalidDataException
    description: "<code>archiveFileName</code> could not be interpreted as a zip archive.       -or-       <code>mode</code> is <xref href=&quot;System.IO.Compression.ZipArchiveMode&quot;></xref>, but an entry is missing or corrupt and cannot be read.       -or-       <code>mode</code> is <xref href=&quot;System.IO.Compression.ZipArchiveMode&quot;></xref>, but an entry is too large to fit into memory."
  platform:
  - net462
- uid: System.IO.Compression.ZipFile.Open(System.String,System.IO.Compression.ZipArchiveMode,System.Text.Encoding)
  id: Open(System.String,System.IO.Compression.ZipArchiveMode,System.Text.Encoding)
  parent: System.IO.Compression.ZipFile
  langs:
  - csharp
  name: Open(String,ZipArchiveMode,Encoding)
  nameWithType: ZipFile.Open(String,ZipArchiveMode,Encoding)
  fullName: System.IO.Compression.ZipFile.Open(String,ZipArchiveMode,Encoding)
  type: Method
  assemblies:
  - System.IO.Compression.FileSystem
  namespace: System.IO.Compression
  summary: "Opens a zip archive at the specified path, in the specified mode, and by using the specified character encoding for entry names."
  remarks: "When you set the `mode` parameter to <xref:System.IO.Compression.ZipArchiveMode>, the archive is opened with <xref:System.IO.FileMode?displayProperty=fullName> as the file mode value. If the archive does not exist, a <xref:System.IO.FileNotFoundException> exception is thrown. Setting the `mode` parameter to <xref:System.IO.Compression.ZipArchiveMode> is equivalent to calling the <xref:System.IO.Compression.ZipFile.OpenRead%2A> method.       When you set the `mode` parameter to <xref:System.IO.Compression.ZipArchiveMode>, the archive is opened with <xref:System.IO.FileMode?displayProperty=fullName> as the file mode value. If the archive already exists, an <xref:System.IO.IOException> is thrown.       When you set the `mode` parameter to <xref:System.IO.Compression.ZipArchiveMode>,  the archive is opened with <xref:System.IO.FileMode?displayProperty=fullName> as the file mode value. If the archive exists, it is opened. The existing entries can be modified and new entries can be created. If the archive does not exist, a new archive is created; however, creating a zip archive in <xref:System.IO.Compression.ZipArchiveMode> mode is not as efficient as creating it in <xref:System.IO.Compression.ZipArchiveMode> mode.       When you open a zip archive file for reading and `entryNameEncoding` is set to `null`, entry names are decoded according to the following rules:      -   When the language encoding flag (in the general-purpose bit flag of the local file header) is not set, the current system default code page is used to decode the entry name.      -   When the language encoding flag is set, UTF-8 is used to decode the entry name.       When you open a zip archive file for reading and `entryNameEncoding` is set to a value other than `null`, entry names are decoded according to the following rules:      -   When the language encoding flag is not set, the specified `entryNameEncoding` is used to decode the entry name.      -   When the language encoding flag is set, UTF-8 is used to decode the entry name.       When you write to archive files and `entryNameEncoding` is set to `null`, entry names are encoded according to the following rules:      -   For entry names that contain characters outside the ASCII range, the language encoding flag is set, and entry names are encoded by using UTF-8.      -   For entry names that contain only ASCII characters, the language encoding flag is not set, and entry names are encoded by using the current system default code page.       When you write to archive files and `entryNameEncoding` is set to a value other than `null`, the specified `entryNameEncoding` is used to encode the entry names into bytes. The language encoding flag (in the general-purpose bit flag of the local file header) is set only when the specified encoding is a UTF-8 encoding."
  syntax:
    content: public static System.IO.Compression.ZipArchive Open (string archiveFileName, System.IO.Compression.ZipArchiveMode mode, System.Text.Encoding entryNameEncoding);
    parameters:
    - id: archiveFileName
      type: System.String
      description: "The path to the archive to open, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory."
    - id: mode
      type: System.IO.Compression.ZipArchiveMode
      description: "One of the enumeration values that specifies the actions that are allowed on the entries in the opened archive."
    - id: entryNameEncoding
      type: System.Text.Encoding
      description: "The encoding to use when reading or writing entry names in this archive. Specify a value for this parameter only when an encoding is required for interoperability with zip archive tools and libraries that do not support UTF-8 encoding for entry names."
    return:
      type: System.IO.Compression.ZipArchive
      description: "The opened zip archive."
  overload: System.IO.Compression.ZipFile.Open*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>archiveFileName</code> is <xref:System.String>, contains only white space, or contains at least one invalid character.       -or-       <code>entryNameEncoding</code> is set to a Unicode encoding other than UTF-8."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>archiveFileName</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "In <code>archiveFileName</code>, the specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must not exceed 248 characters, and file names must not exceed 260 characters."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code>archiveFileName</code> is invalid or does not exist (for example, it is on an unmapped drive)."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>archiveFileName</code> could not be opened.       -or-       <code>mode</code> is set to <xref href=&quot;System.IO.Compression.ZipArchiveMode&quot;></xref>, but the file specified in <code>archiveFileName</code> already exists."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<code>archiveFileName</code> specifies a directory.       -or-       The caller does not have the required permission to access the file specified in <code>archiveFileName</code>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>mode</code> specifies an invalid value."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "<code>mode</code> is set to <xref href=&quot;System.IO.Compression.ZipArchiveMode&quot;></xref>, but the file specified in <code>archiveFileName</code> is not found."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>archiveFileName</code> contains an invalid format."
  - type: System.IO.InvalidDataException
    commentId: T:System.IO.InvalidDataException
    description: "<code>archiveFileName</code> could not be interpreted as a zip archive.       -or-       <code>mode</code> is <xref href=&quot;System.IO.Compression.ZipArchiveMode&quot;></xref>, but an entry is missing or corrupt and cannot be read.       -or-       <code>mode</code> is <xref href=&quot;System.IO.Compression.ZipArchiveMode&quot;></xref>, but an entry is too large to fit into memory."
  platform:
  - net462
- uid: System.IO.Compression.ZipFile.OpenRead(System.String)
  id: OpenRead(System.String)
  parent: System.IO.Compression.ZipFile
  langs:
  - csharp
  name: OpenRead(String)
  nameWithType: ZipFile.OpenRead(String)
  fullName: System.IO.Compression.ZipFile.OpenRead(String)
  type: Method
  assemblies:
  - System.IO.Compression.FileSystem
  namespace: System.IO.Compression
  summary: "Opens a zip archive for reading at the specified path."
  remarks: "This method is equivalent to calling the <xref:System.IO.Compression.ZipFile.Open%2A> method and setting the `mode` parameter to <xref:System.IO.Compression.ZipArchiveMode>. The archive is opened with <xref:System.IO.FileMode?displayProperty=fullName> as the file mode value. If the archive does not exist, a <xref:System.IO.FileNotFoundException> exception is thrown."
  example:
  - "The following example shows how to open a zip archive for reading.  \n  \n [!code-cs[System.IO.Compression.ZipArchive#1](~/add/codesnippet/csharp/m-system.io.compression._2_1.cs)]\n [!code-vb[System.IO.Compression.ZipArchive#1](~/add/codesnippet/visualbasic/m-system.io.compression._2_1.vb)]"
  syntax:
    content: public static System.IO.Compression.ZipArchive OpenRead (string archiveFileName);
    parameters:
    - id: archiveFileName
      type: System.String
      description: "The path to the archive to open, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory."
    return:
      type: System.IO.Compression.ZipArchive
      description: "The opened zip archive."
  overload: System.IO.Compression.ZipFile.OpenRead*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>archiveFileName</code> is <xref:System.String>, contains only white space, or contains at least one invalid character."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>archiveFileName</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "In <code>archiveFileName</code>, the specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must not exceed 248 characters, and file names must not exceed 260 characters."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code>archiveFileName</code> is invalid or does not exist (for example, it is on an unmapped drive)."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>archiveFileName</code> could not be opened."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<code>archiveFileName</code> specifies a directory.       -or-       The caller does not have the required permission to access the file specified in <code>archiveFileName</code>."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The file specified in <code>archiveFileName</code> is not found."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>archiveFileName</code> contains an invalid format."
  - type: System.IO.InvalidDataException
    commentId: T:System.IO.InvalidDataException
    description: "<code>archiveFileName</code> could not be interpreted as a zip archive."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.IO.PathTooLongException
  isExternal: true
  name: System.IO.PathTooLongException
- uid: System.IO.DirectoryNotFoundException
  isExternal: true
  name: System.IO.DirectoryNotFoundException
- uid: System.IO.IOException
  isExternal: true
  name: System.IO.IOException
- uid: System.UnauthorizedAccessException
  isExternal: true
  name: System.UnauthorizedAccessException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.IO.FileNotFoundException
  isExternal: true
  name: System.IO.FileNotFoundException
- uid: System.IO.InvalidDataException
  isExternal: true
  name: System.IO.InvalidDataException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.IO.Compression.ZipFile.CreateFromDirectory(System.String,System.String)
  parent: System.IO.Compression.ZipFile
  isExternal: false
  name: CreateFromDirectory(String,String)
  nameWithType: ZipFile.CreateFromDirectory(String,String)
  fullName: System.IO.Compression.ZipFile.CreateFromDirectory(String,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IO.Compression.ZipFile.CreateFromDirectory(System.String,System.String,System.IO.Compression.CompressionLevel,System.Boolean)
  parent: System.IO.Compression.ZipFile
  isExternal: false
  name: CreateFromDirectory(String,String,CompressionLevel,Boolean)
  nameWithType: ZipFile.CreateFromDirectory(String,String,CompressionLevel,Boolean)
  fullName: System.IO.Compression.ZipFile.CreateFromDirectory(String,String,CompressionLevel,Boolean)
- uid: System.IO.Compression.CompressionLevel
  parent: System.IO.Compression
  isExternal: true
  name: CompressionLevel
  nameWithType: CompressionLevel
  fullName: System.IO.Compression.CompressionLevel
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO.Compression.ZipFile.CreateFromDirectory(System.String,System.String,System.IO.Compression.CompressionLevel,System.Boolean,System.Text.Encoding)
  parent: System.IO.Compression.ZipFile
  isExternal: false
  name: CreateFromDirectory(String,String,CompressionLevel,Boolean,Encoding)
  nameWithType: ZipFile.CreateFromDirectory(String,String,CompressionLevel,Boolean,Encoding)
  fullName: System.IO.Compression.ZipFile.CreateFromDirectory(String,String,CompressionLevel,Boolean,Encoding)
- uid: System.Text.Encoding
  parent: System.Text
  isExternal: true
  name: Encoding
  nameWithType: Encoding
  fullName: System.Text.Encoding
- uid: System.IO.Compression.ZipFile.ExtractToDirectory(System.String,System.String)
  parent: System.IO.Compression.ZipFile
  isExternal: false
  name: ExtractToDirectory(String,String)
  nameWithType: ZipFile.ExtractToDirectory(String,String)
  fullName: System.IO.Compression.ZipFile.ExtractToDirectory(String,String)
- uid: System.IO.Compression.ZipFile.ExtractToDirectory(System.String,System.String,System.Text.Encoding)
  parent: System.IO.Compression.ZipFile
  isExternal: false
  name: ExtractToDirectory(String,String,Encoding)
  nameWithType: ZipFile.ExtractToDirectory(String,String,Encoding)
  fullName: System.IO.Compression.ZipFile.ExtractToDirectory(String,String,Encoding)
- uid: System.IO.Compression.ZipFile.Open(System.String,System.IO.Compression.ZipArchiveMode)
  parent: System.IO.Compression.ZipFile
  isExternal: false
  name: Open(String,ZipArchiveMode)
  nameWithType: ZipFile.Open(String,ZipArchiveMode)
  fullName: System.IO.Compression.ZipFile.Open(String,ZipArchiveMode)
- uid: System.IO.Compression.ZipArchive
  parent: System.IO.Compression
  isExternal: false
  name: ZipArchive
  nameWithType: ZipArchive
  fullName: System.IO.Compression.ZipArchive
- uid: System.IO.Compression.ZipArchiveMode
  parent: System.IO.Compression
  isExternal: false
  name: ZipArchiveMode
  nameWithType: ZipArchiveMode
  fullName: System.IO.Compression.ZipArchiveMode
- uid: System.IO.Compression.ZipFile.Open(System.String,System.IO.Compression.ZipArchiveMode,System.Text.Encoding)
  parent: System.IO.Compression.ZipFile
  isExternal: false
  name: Open(String,ZipArchiveMode,Encoding)
  nameWithType: ZipFile.Open(String,ZipArchiveMode,Encoding)
  fullName: System.IO.Compression.ZipFile.Open(String,ZipArchiveMode,Encoding)
- uid: System.IO.Compression.ZipFile.OpenRead(System.String)
  parent: System.IO.Compression.ZipFile
  isExternal: false
  name: OpenRead(String)
  nameWithType: ZipFile.OpenRead(String)
  fullName: System.IO.Compression.ZipFile.OpenRead(String)
- uid: System.IO.Compression.ZipFile.CreateFromDirectory*
  parent: System.IO.Compression.ZipFile
  isExternal: false
  name: CreateFromDirectory
  nameWithType: ZipFile.CreateFromDirectory
- uid: System.IO.Compression.ZipFile.ExtractToDirectory*
  parent: System.IO.Compression.ZipFile
  isExternal: false
  name: ExtractToDirectory
  nameWithType: ZipFile.ExtractToDirectory
- uid: System.IO.Compression.ZipFile.Open*
  parent: System.IO.Compression.ZipFile
  isExternal: false
  name: Open
  nameWithType: ZipFile.Open
- uid: System.IO.Compression.ZipFile.OpenRead*
  parent: System.IO.Compression.ZipFile
  isExternal: false
  name: OpenRead
  nameWithType: ZipFile.OpenRead
