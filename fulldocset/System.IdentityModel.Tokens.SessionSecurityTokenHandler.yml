### YamlMime:ManagedReference
items:
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  id: SessionSecurityTokenHandler
  children:
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.#ctor
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.CookieTransform})
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.CookieTransform},System.TimeSpan)
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms(System.Byte[],System.Boolean)
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanReadToken(System.Xml.XmlReader)
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanValidateToken
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanWriteToken
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieElementName
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieNamespace
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.CreateSessionSecurityToken(System.Security.Claims.ClaimsPrincipal,System.String,System.String,System.DateTime,System.DateTime)
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultCookieTransforms
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultLifetime
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultTokenLifetime
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.GetTokenTypeIdentifiers
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(System.Xml.XmlReader)
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(System.Byte[],System.IdentityModel.Selectors.SecurityTokenResolver)
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.SetTransforms(System.Collections.Generic.IEnumerable{System.IdentityModel.CookieTransform})
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenType
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateSession(System.IdentityModel.Tokens.SessionSecurityToken)
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SessionSecurityToken,System.String)
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken(System.IdentityModel.Tokens.SessionSecurityToken)
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)
  langs:
  - csharp
  name: SessionSecurityTokenHandler
  nameWithType: SessionSecurityTokenHandler
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  type: Class
  summary: "A <xref href=&quot;System.IdentityModel.Tokens.SecurityTokenHandler&quot;> </xref> que processa os tokens de segurança do tipo <xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;> </xref>."
  remarks: "The SessionSecurityTokenHandler class serializes, deserializes, and validates session tokens. Session tokens are tokens of type <xref:System.IdentityModel.Tokens.SessionSecurityToken>. The SessionSecurityTokenHandler class serializes the tokens to and from cookie format. By default, the class serializes tokens into WS-Secure Conversation Feb2005 or WS-Secure Conversation 1.3 `<wsc:SecurityContextToken>` elements. Session tokens are used by the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule> (WSFAM) and the <xref:System.IdentityModel.Services.SessionAuthenticationModule> (SAM) to store information about a session, this is primarily the <xref:System.Security.Claims.ClaimsPrincipal> associated with the authenticated user and the session start and expiration times.  \n  \n In passive scenarios, the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule> calls into the <xref:System.IdentityModel.Services.SessionAuthenticationModule> (SAM) from the authentication pipeline to create a session token from the <xref:System.Security.Claims.ClaimsPrincipal> that represents the authenticated user. The SAM uses its configured SessionSecurityTokenHandler to create the token and to serialize it into a cookie (and to deserialize the token from a cookie on subsequent requests). The SAM uses an instance of its configured <xref:System.IdentityModel.Services.CookieHandler> class to write the cookie back to the HTTP Response. This cookie is then returned to the client and on subsequent requests the client can present the cookie rather than making a round trip back to the identity provider to re-obtain a security token. For more information about how sessions operate with WIF, see [WIF Session Management](~/add/includes/ajax-current-ext-md.md).  \n  \n> [!NOTE]\n>  The \\<securityTokenHandlers> configuration element can be used to specify a SessionSecurityTokenHandler that has the responsibility for securing the application’s sessions. Developers should use caution when changing this configuration setting, as a misconfigured system could result in application compromise. For example, specifying a derived  HYPERLINK \"http://msdn.microsoft.com/en-us/library/hh193426%28v=vs.110%29.aspx\" \\t \"_blank\" SessionSecurityTokenHandler and passing an empty Transforms (CookieTransform) collection to the base, would result in the users identity being serialized into a cookie that was not protected. This could allow an attacker to modify the identity and therefore change access privileges.  \n  \n If the session token is in reference mode, that is, its <xref:System.IdentityModel.Tokens.SessionSecurityToken.IsReferenceMode%2A?displayProperty=fullName> property is `true`, the session token handler only serializes properties of the session token that are needed to regenerate its key in the <xref:System.IdentityModel.Tokens.SessionSecurityTokenCache>. In the default case, the <xref:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey> class is used to represent cache keys, and the token handler writes the <xref:System.IdentityModel.Tokens.SessionSecurityToken.ContextId%2A?displayProperty=fullName> and <xref:System.IdentityModel.Tokens.SessionSecurityToken.KeyGeneration%2A?displayProperty=fullName> properties of the token. If the session token is not in reference mode, that is, the <xref:System.IdentityModel.Tokens.SessionSecurityToken.IsReferenceMode%2A?displayProperty=fullName> property is `false`, then, in addition to the properties mentioned previously, the handler invokes the <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms%2A> method on a byte array serialized from the token and stores the resulting value in the cookie as well. For more details about how the token is serialized, see the <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken%28System.Xml.XmlWriter%2CSystem.IdentityModel.Tokens.SecurityToken%29?displayProperty=fullName> method.  \n  \n The <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms%2A> property gets the list of transforms that are applied to the session token in the <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms%2A> method. All transforms derive from the <xref:System.IdentityModel.CookieTransform> class. In the default case the <xref:System.IdentityModel.DeflateCookieTransform> and the <xref:System.IdentityModel.ProtectedDataCookieTransform> are applied. The <xref:System.IdentityModel.ProtectedDataCookieTransform> uses the Data Protection API (DPAPI) to protect the cookie material. DPAPI uses a key that is specific to the computer on which it is running in its protection algorithms. For this reason, the default session token handler is not usable in Web farm scenarios because, in such scenarios, tokens written on one computer may need to be read on another computer. You can use many strategies to circumvent this issue. For example, you can:  \n  \n-   Replace the default SessionSecurityTokenHandler with the <xref:System.IdentityModel.Services.Tokens.MachineKeySessionSecurityTokenHandler>. The <xref:System.IdentityModel.Services.Tokens.MachineKeySessionSecurityTokenHandler> enables you to specify signing and encryption keys under the ASP.NET `<machineKey>` element in the configuration file.  \n  \n-   Provide a handler for the <xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfigurationCreated?displayProperty=fullName> event in the global.asax.cs file and replace the default session token handler with an instance of SessionSecurityTokenHandler that has a list of transforms that includes the <xref:System.IdentityModel.RsaSignatureCookieTransform> and the <xref:System.IdentityModel.RsaEncryptionCookieTransform>. You can create the new instance by invoking one of the constructors that takes a list of transforms.  \n  \n-   Derive a custom transform from the <xref:System.IdentityModel.CookieTransform> base class and use the method above to include it in the list of transforms to be applied.  \n  \n-   Derive a custom token handler from SessionSecurityTokenHandler and implement your own mechanism.  \n  \n For more information about using sessions in Web farm scenarios, see [WIF and Web Farms](~/add/includes/ajax-current-ext-md.md).  \n  \n The SessionSecurityTokenHandler is included in the default token handler collection; however, you can replace it with a custom session token handler by first specifying a [\\&lt;remove\\&gt;](../Topic/%3Cremove%3E.md) element under the [\\&lt;securityTokenHandlers\\&gt;](../Topic/%3CsecurityTokenHandlers%3E.md) element to remove the default handler from the collection and then adding your custom token handler using the [\\&lt;add\\&gt;](../Topic/%3Cadd%3E.md) element. By default, you can specify the default token lifetime by including the [\\&lt;sessionTokenRequirement\\&gt;](../Topic/%3CsessionTokenRequirement%3E.md) element under the `<add>` element. You can design a custom token handler to take custom configuration elements under the `<add>` element by overriding the <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.LoadCustomConfiguration%2A> method to provide the logic to process them."
  example:
  - "The following XML shows how to replace the default session security token handler in a token handler collection with an instance of the <xref:System.IdentityModel.Services.Tokens.MachineKeySessionSecurityTokenHandler> class in configuration.  \n  \n```xml  \n<securityTokenHandlers>  \n  <remove type=\"System.IdentityModel.Tokens.SessionSecurityTokenHandler, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" />  \n  <add type=\"System.IdentityModel.Services.Tokens.MachineKeySessionSecurityTokenHandler, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" />  \n</securityTokenHandlers>  \n```"
  syntax:
    content: 'public class SessionSecurityTokenHandler : System.IdentityModel.Tokens.SecurityTokenHandler'
  inheritance:
  - System.Object
  - System.IdentityModel.Tokens.SecurityTokenHandler
  implements: []
  inheritedMembers:
  - System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)
  - System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.String)
  - System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)
  - System.IdentityModel.Tokens.SecurityTokenHandler.Configuration
  - System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection
  - System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)
  - System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken(System.IdentityModel.Tokens.SecurityToken)
  - System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)
  - System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)
  - System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationFailure(System.IdentityModel.Tokens.SecurityToken,System.String)
  - System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationSuccess(System.IdentityModel.Tokens.SecurityToken)
  - System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)
  - System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken)
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.#ctor
  id: '#ctor'
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: SessionSecurityTokenHandler()
  nameWithType: SessionSecurityTokenHandler.SessionSecurityTokenHandler()
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.SessionSecurityTokenHandler()
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Inicializa uma nova instância do <xref href=&quot;System.IdentityModel.Tokens.SessionSecurityTokenHandler&quot;> </xref> classe que utiliza as transformações de cookie predefinido e duração do token."
  remarks: "A <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime%2A>e <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms%2A>propriedades são inicializadas e <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultLifetime> <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultCookieTransforms>.</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultCookieTransforms> </xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultLifetime> </xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms%2A> </xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime%2A>"
  syntax:
    content: public SessionSecurityTokenHandler ();
    parameters: []
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.CookieTransform})
  id: '#ctor(System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.CookieTransform})'
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: SessionSecurityTokenHandler(ReadOnlyCollection<CookieTransform>)
  nameWithType: SessionSecurityTokenHandler.SessionSecurityTokenHandler(ReadOnlyCollection<CookieTransform>)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.SessionSecurityTokenHandler(ReadOnlyCollection<CookieTransform>)
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Inicializa uma nova instância do <xref href=&quot;System.IdentityModel.Tokens.SessionSecurityTokenHandler&quot;> </xref> transformações de classe que utiliza o cookie especificado."
  remarks: "A <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime%2A>propriedade é inicializada para <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultLifetime>.</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultLifetime> </xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime%2A>"
  syntax:
    content: public SessionSecurityTokenHandler (System.Collections.ObjectModel.ReadOnlyCollection<System.IdentityModel.CookieTransform> transforms);
    parameters:
    - id: transforms
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.CookieTransform}
      description: "Transformações a aplicar quando codificação ou descodificação o cookie. Define o <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms*>propriedade.</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms*>"
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>transforms</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.CookieTransform},System.TimeSpan)
  id: '#ctor(System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.CookieTransform},System.TimeSpan)'
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: SessionSecurityTokenHandler(ReadOnlyCollection<CookieTransform>,TimeSpan)
  nameWithType: SessionSecurityTokenHandler.SessionSecurityTokenHandler(ReadOnlyCollection<CookieTransform>,TimeSpan)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.SessionSecurityTokenHandler(ReadOnlyCollection<CookieTransform>,TimeSpan)
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Inicializa uma nova instância do <xref href=&quot;System.IdentityModel.Tokens.SessionSecurityTokenHandler&quot;> </xref> classe que utiliza as transformações de cookie especificada e a duração do token."
  syntax:
    content: public SessionSecurityTokenHandler (System.Collections.ObjectModel.ReadOnlyCollection<System.IdentityModel.CookieTransform> transforms, TimeSpan tokenLifetime);
    parameters:
    - id: transforms
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.CookieTransform}
      description: "Transformações a aplicar quando codificação ou descodificação o cookie. Define o <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms*>propriedade.</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms*>"
    - id: tokenLifetime
      type: System.TimeSpan
      description: "A predefinição de duração para obter um token. Define o <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime*>propriedade.</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime*>"
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>transforms</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>tokenLifetime</code>é menor ou igual a &lt;xref:System.TimeSpan.Zero?displayProperty=fullName&gt;."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms(System.Byte[],System.Boolean)
  id: ApplyTransforms(System.Byte[],System.Boolean)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: ApplyTransforms(Byte[],Boolean)
  nameWithType: SessionSecurityTokenHandler.ApplyTransforms(Byte[],Boolean)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms(Byte[],Boolean)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Aplica transformações especificadas pelo <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms*>propriedade para codificar ou descodificar o cookie especificado.</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms*>"
  remarks: "Quando um cookie de codificação transforma são aplicadas pela ordem em que aparecem no <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms%2A>propriedade.</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms%2A> Quando descodificar um cookie, estas são aplicadas pela ordem inversa.       Chamado a partir de <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken%2A>e [qualifyHint = False & autoUpgrade = True](~/add/includes/ajax-current-ext-md.md) métodos para codificar e descodificar o material de cookie.</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken%2A>"
  syntax:
    content: protected virtual byte[] ApplyTransforms (byte[] cookie, bool outbound);
    parameters:
    - id: cookie
      type: System.Byte[]
      description: "O cookie que irá ser transformado."
    - id: outbound
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o cookie deve ser codificado; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> se deve possível descodificar o cookie."
    return:
      type: System.Byte[]
      description: "O cookie codificado ou descodificado."
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "O <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms*>propriedade é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>.</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms*>"
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanReadToken(System.Xml.XmlReader)
  id: CanReadToken(System.Xml.XmlReader)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: CanReadToken(XmlReader)
  nameWithType: SessionSecurityTokenHandler.CanReadToken(XmlReader)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanReadToken(XmlReader)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Devolve um valor que indica se o leitor está posicionado um <xref uid=&quot;langword_csharp_&lt;wsc:SecurityContextToken&gt;&quot; name=&quot;&lt;wsc:SecurityContextToken&gt;&quot; href=&quot;&quot;> </xref> elemento."
  syntax:
    content: public override bool CanReadToken (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "O <xref:System.Xml.XmlReader>através de entrada <xref href=&quot;System.IdentityModel.Tokens.SecurityToken&quot;> </xref>.</xref:System.Xml.XmlReader> O leitor deve estar posicionado um <xref uid=&quot;langword_csharp_&lt;wsc:SecurityContextToken&gt;&quot; name=&quot;&lt;wsc:SecurityContextToken&gt;&quot; href=&quot;&quot;> </xref> elemento."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o leitor de apontar para um <xref uid=&quot;langword_csharp_&lt;wsc:SecurityContextToken&gt;&quot; name=&quot;&lt;wsc:SecurityContextToken&gt;&quot; href=&quot;&quot;> </xref> elemento; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanReadToken*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>reader</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanValidateToken
  id: CanValidateToken
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: CanValidateToken
  nameWithType: SessionSecurityTokenHandler.CanValidateToken
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanValidateToken
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Obtém um valor que indica se este processador suporta validação de tokens do tipo <xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;> </xref>."
  syntax:
    content: public override bool CanValidateToken { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o processador suporta a validação de tokens do tipo <xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;> </xref>; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Always <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanValidateToken*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanWriteToken
  id: CanWriteToken
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: CanWriteToken
  nameWithType: SessionSecurityTokenHandler.CanWriteToken
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanWriteToken
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Obtém um valor que indica se este processador pode escrever tokens do tipo <xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;> </xref>."
  syntax:
    content: public override bool CanWriteToken { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o processador pode escrever tokens do tipo <xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;> </xref>; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Always <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanWriteToken*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieElementName
  id: CookieElementName
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: CookieElementName
  nameWithType: SessionSecurityTokenHandler.CookieElementName
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieElementName
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Obtém o nome para o elemento cookie."
  remarks: "Esta propriedade é utilizada no <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken%2A>e <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken%2A>métodos para determinar o elemento sob a qual o material de token codificado deve ser escrito ou ler.</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken%2A> </xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken%2A>"
  syntax:
    content: public virtual string CookieElementName { get; }
    return:
      type: System.String
      description: "O nome para o elemento cookie. O nome de elemento predefinido é &quot;Cookies&quot;."
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieElementName*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieNamespace
  id: CookieNamespace
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: CookieNamespace
  nameWithType: SessionSecurityTokenHandler.CookieNamespace
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieNamespace
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Obtém o espaço de nomes para o elemento cookie."
  remarks: "Esta propriedade é utilizada no <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken%2A>e <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken%2A>métodos para determinar o espaço de nomes do elemento sob a qual o material de token codificado deve ser escrito ou ler.</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken%2A> </xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken%2A>"
  syntax:
    content: public virtual string CookieNamespace { get; }
    return:
      type: System.String
      description: "O espaço de nomes para o elemento cookie. O espaço de nomes predefinido é &quot;http://schemas.microsoft.com/ws/2006/05/security&quot;."
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieNamespace*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CreateSessionSecurityToken(System.Security.Claims.ClaimsPrincipal,System.String,System.String,System.DateTime,System.DateTime)
  id: CreateSessionSecurityToken(System.Security.Claims.ClaimsPrincipal,System.String,System.String,System.DateTime,System.DateTime)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: CreateSessionSecurityToken(ClaimsPrincipal,String,String,DateTime,DateTime)
  nameWithType: SessionSecurityTokenHandler.CreateSessionSecurityToken(ClaimsPrincipal,String,String,DateTime,DateTime)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CreateSessionSecurityToken(ClaimsPrincipal,String,String,DateTime,DateTime)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Cria um <xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;> </xref> com base no intervalo especificado afirmações principal e o tempo durante os quais o token é válido."
  syntax:
    content: public virtual System.IdentityModel.Tokens.SessionSecurityToken CreateSessionSecurityToken (System.Security.Claims.ClaimsPrincipal principal, string context, string endpointId, DateTime validFrom, DateTime validTo);
    parameters:
    - id: principal
      type: System.Security.Claims.ClaimsPrincipal
      description: "O principal de afirmações."
    - id: context
      type: System.String
      description: "Uma cadeia de contexto definido pelo autor da chamada."
    - id: endpointId
      type: System.String
      description: "O identificador do ponto final ao qual o token tem um âmbito."
    - id: validFrom
      type: System.DateTime
      description: "O tempo instantânea em que o token passa a ser válido."
    - id: validTo
      type: System.DateTime
      description: "O tempo instantânea após o qual o token já não é válido."
    return:
      type: System.IdentityModel.Tokens.SessionSecurityToken
      description: "O token de segurança de sessão que foi criado. As propriedades no token de sessão novo são definidas de acordo com os parâmetros especificados."
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CreateSessionSecurityToken*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>principal</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "O <xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration*>propriedade é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>.</xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration*>"
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)
  id: CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: CreateToken(SecurityTokenDescriptor)
  nameWithType: SessionSecurityTokenHandler.CreateToken(SecurityTokenDescriptor)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CreateToken(SecurityTokenDescriptor)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Cria um token de segurança com base no descritor de token especificado."
  remarks: 'Cria e devolve um token de segurança de sessão utilizando as seguintes propriedades no descritor do token: <xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.Subject%2A?displayProperty=fullName>e <xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.Lifetime%2A?displayProperty=fullName>.</xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.Lifetime%2A?displayProperty=fullName> </xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.Subject%2A?displayProperty=fullName> Se o <xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.SaveBootstrapContext%2A?displayProperty=fullName>propriedade está definida `true` na configuração de processador de token especificada pelo <xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A>propriedade, o contexto de arranque de configuração é criado a partir de <xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.Token%2A?displayProperty=fullName>propriedade e é guardada no token de sessão.</xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.Token%2A?displayProperty=fullName> </xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A> </xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.SaveBootstrapContext%2A?displayProperty=fullName>'
  syntax:
    content: public override System.IdentityModel.Tokens.SecurityToken CreateToken (System.IdentityModel.Tokens.SecurityTokenDescriptor tokenDescriptor);
    parameters:
    - id: tokenDescriptor
      type: System.IdentityModel.Tokens.SecurityTokenDescriptor
      description: "O descritor de token do qual pretende criar o token."
    return:
      type: System.IdentityModel.Tokens.SecurityToken
      description: "O token de segurança que foi criado. Isto irá ser uma instância de <xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;> </xref>."
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CreateToken*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>tokenDescriptor</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "O <xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration*>propriedade é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>.</xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration*>"
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultCookieTransforms
  id: DefaultCookieTransforms
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: DefaultCookieTransforms
  nameWithType: SessionSecurityTokenHandler.DefaultCookieTransforms
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultCookieTransforms
  type: Field
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "A ler apenas a coleção que contém a lista de transformações de predefinido a aplicar a cookies, o <xref href=&quot;System.IdentityModel.DeflateCookieTransform&quot;> </xref> e <xref href=&quot;System.IdentityModel.ProtectedDataCookieTransform&quot;> </xref>."
  syntax:
    content: public static readonly System.Collections.ObjectModel.ReadOnlyCollection<System.IdentityModel.CookieTransform> DefaultCookieTransforms;
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.CookieTransform}
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultLifetime
  id: DefaultLifetime
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: DefaultLifetime
  nameWithType: SessionSecurityTokenHandler.DefaultLifetime
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultLifetime
  type: Field
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Uma constante que especifica a duração predefinida de cookies, dez horas."
  syntax:
    content: public static readonly TimeSpan DefaultLifetime;
    return:
      type: System.TimeSpan
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultTokenLifetime
  id: DefaultTokenLifetime
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: DefaultTokenLifetime
  nameWithType: SessionSecurityTokenHandler.DefaultTokenLifetime
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultTokenLifetime
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Obtém a duração do token predefinido."
  syntax:
    content: public static TimeSpan DefaultTokenLifetime { get; }
    return:
      type: System.TimeSpan
      description: "A duração do token predefinido. Always <xref href=&quot;System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultLifetime&quot;></xref>."
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultTokenLifetime*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.GetTokenTypeIdentifiers
  id: GetTokenTypeIdentifiers
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: GetTokenTypeIdentifiers()
  nameWithType: SessionSecurityTokenHandler.GetTokenTypeIdentifiers()
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.GetTokenTypeIdentifiers()
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Obtém o tipo de token URIs para os tipos de token que podem ser processados por este processador."
  remarks: 'O seguinte tipo os URIs são suportadas: &quot;http://schemas.microsoft.com/ws/2006/05/servicemodel/tokens/SecureConversation&quot;, &quot;http://docs.oasis-open.org/ws-sx/ws-secureconversation/200512/sct&quot; e &quot;http://schemas.xmlsoap.org/ws/2005/02/sc/sct&quot;.'
  syntax:
    content: public override string[] GetTokenTypeIdentifiers ();
    parameters: []
    return:
      type: System.String[]
      description: "O identificador de tipo de token URIs para tipos de token que podem ser processadas por este processador."
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.GetTokenTypeIdentifiers*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)
  id: LoadCustomConfiguration(System.Xml.XmlNodeList)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: LoadCustomConfiguration(XmlNodeList)
  nameWithType: SessionSecurityTokenHandler.LoadCustomConfiguration(XmlNodeList)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.LoadCustomConfiguration(XmlNodeList)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Configuração personalizada carrega a partir de XML."
  remarks: "Chamado a infraestrutura de configuração ao inicializar o <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler>instância.</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler> Inicializa a <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime%2A>propriedade do `lifetime` atributo o [ \\&lt; sessionTokenRequirement\\&gt;](../Topic/%3CsessionTokenRequirement%3E.md) elemento no ficheiro de configuração.</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime%2A>"
  syntax:
    content: public override void LoadCustomConfiguration (System.Xml.XmlNodeList customConfigElements);
    parameters:
    - id: customConfigElements
      type: System.Xml.XmlNodeList
      description: "Os elementos de configuração personalizada."
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.LoadCustomConfiguration*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>customConfigElements</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A configuração especificada pelo <code> customConfigElements </code> não é válido. Por exemplo, não contém um <xref uid=&quot;langword_csharp_&lt;sessionTokenRequirement&gt;&quot; name=&quot;&lt;sessionTokenRequirement&gt;&quot; href=&quot;&quot;> </xref> elemento, contém mais do que uma <xref uid=&quot;langword_csharp_&lt;sessionTokenRequirement&gt;&quot; name=&quot;&lt;sessionTokenRequirement&gt;&quot; href=&quot;&quot;> </xref> elemento, um <xref:System.TimeSpan>não é possível ler o valor do <xref uid=&quot;langword_csharp_lifetime&quot; name=&quot;lifetime&quot; href=&quot;&quot;> </xref> atributo, ou o <xref uid=&quot;langword_csharp_lifetime&quot; name=&quot;lifetime&quot; href=&quot;&quot;> </xref> atributo especifica um valor que é menor que &lt;xref:System.TimeSpan.Zero?displayProperty=fullName&gt;.</xref:System.TimeSpan>"
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(System.Xml.XmlReader)
  id: ReadToken(System.Xml.XmlReader)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: ReadToken(XmlReader)
  nameWithType: SessionSecurityTokenHandler.ReadToken(XmlReader)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(XmlReader)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Lê o <xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;> </xref> utilizando o leitor de XML especificado."
  remarks: "O leitor tem de estar posicionado um Feb2005 de conversação segura WS ou um 1.3 de conversação segura WS `<wsc:SecurityContextToken>` elemento.       A implementação predefinida invoca o <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken%28System.Xml.XmlReader%2CSystem.IdentityModel.Selectors.SecurityTokenResolver%29?displayProperty=fullName>método utilizando uma resolução de token de predefinição.</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken%28System.Xml.XmlReader%2CSystem.IdentityModel.Selectors.SecurityTokenResolver%29?displayProperty=fullName>"
  syntax:
    content: public override System.IdentityModel.Tokens.SecurityToken ReadToken (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "O <xref:System.Xml.XmlReader>através de entrada <xref href=&quot;System.IdentityModel.Tokens.SecurityToken&quot;> </xref>.</xref:System.Xml.XmlReader>"
    return:
      type: System.IdentityModel.Tokens.SecurityToken
      description: "O token de segurança de sessão foi lida uma instância de <xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;> </xref>."
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>reader</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IdentityModel.Tokens.SecurityTokenException
    commentId: T:System.IdentityModel.Tokens.SecurityTokenException
    description: "O leitor não está posicionado um <xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;> </xref> ou <xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;> </xref> não é possível ler."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(System.Byte[],System.IdentityModel.Selectors.SecurityTokenResolver)
  id: ReadToken(System.Byte[],System.IdentityModel.Selectors.SecurityTokenResolver)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: ReadToken(Byte[],SecurityTokenResolver)
  nameWithType: SessionSecurityTokenHandler.ReadToken(Byte[],SecurityTokenResolver)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(Byte[],SecurityTokenResolver)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Lê o <xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;> </xref> partir de um fluxo de bytes por utilizar o Resolvedor de token especificado."
  remarks: "A implementação predefinida cria um <xref:System.Xml.XmlDictionaryReader>sobre o token e invoca o <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken%28System.Xml.XmlReader%2CSystem.IdentityModel.Selectors.SecurityTokenResolver%29?displayProperty=fullName>método.</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken%28System.Xml.XmlReader%2CSystem.IdentityModel.Selectors.SecurityTokenResolver%29?displayProperty=fullName> </xref:System.Xml.XmlDictionaryReader>"
  syntax:
    content: public virtual System.IdentityModel.Tokens.SecurityToken ReadToken (byte[] token, System.IdentityModel.Selectors.SecurityTokenResolver tokenResolver);
    parameters:
    - id: token
      type: System.Byte[]
      description: "O fluxo de bytes que contém o token."
    - id: tokenResolver
      type: System.IdentityModel.Selectors.SecurityTokenResolver
      description: "A resolução de token para utilizar."
    return:
      type: System.IdentityModel.Tokens.SecurityToken
      description: "O <xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;> </xref> que foi lido."
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)
  id: ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: ReadToken(XmlReader,SecurityTokenResolver)
  nameWithType: SessionSecurityTokenHandler.ReadToken(XmlReader,SecurityTokenResolver)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(XmlReader,SecurityTokenResolver)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Lê o <xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;> </xref> utilizar o Resolvedor de leitor e de token XML especificado."
  remarks: "O leitor tem de estar posicionado um Feb2005 de conversação segura WS ou um 1.3 de conversação segura WS `<wsc:SecurityContextToken>` elemento.       Se o material de token é colocado em cache, é a leitura da cache de token, o que é uma instância de <xref:System.IdentityModel.Tokens.SessionSecurityTokenCache>classe.</xref:System.IdentityModel.Tokens.SessionSecurityTokenCache> Caso contrário, o material de token é lida o elemento subordinado do `<wsc:SecurityContextToken>` elemento que é especificado pelo <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieElementName%2A>e <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieNamespace%2A>Propriedades e <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms%2A>método é invocado para descodificar o cookie.</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms%2A> </xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieNamespace%2A> </xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieElementName%2A>       Para obter mais informações sobre como os tokens de sessão são serializados num `<SecurityContextToken` elemento, consulte o <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken%28System.Xml.XmlWriter%2CSystem.IdentityModel.Tokens.SecurityToken%29?displayProperty=fullName>método.</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken%28System.Xml.XmlWriter%2CSystem.IdentityModel.Tokens.SecurityToken%29?displayProperty=fullName>"
  syntax:
    content: public override System.IdentityModel.Tokens.SecurityToken ReadToken (System.Xml.XmlReader reader, System.IdentityModel.Selectors.SecurityTokenResolver tokenResolver);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "O <xref:System.Xml.XmlReader>através de entrada <xref href=&quot;System.IdentityModel.Tokens.SecurityToken&quot;> </xref>.</xref:System.Xml.XmlReader>"
    - id: tokenResolver
      type: System.IdentityModel.Selectors.SecurityTokenResolver
      description: "A <xref href=&quot;System.IdentityModel.Selectors.SecurityTokenResolver&quot;> </xref> que poderá utilizada para resolver o <xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;> </xref>."
    return:
      type: System.IdentityModel.Tokens.SecurityToken
      description: "O token de segurança de sessão foi lida uma instância de <xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;> </xref>."
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>reader</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>tokenResolver</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IdentityModel.Tokens.SecurityTokenException
    commentId: T:System.IdentityModel.Tokens.SecurityTokenException
    description: "O leitor não está posicionado um <xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;> </xref> ou <xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;> </xref> não é possível ler."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.SetTransforms(System.Collections.Generic.IEnumerable{System.IdentityModel.CookieTransform})
  id: SetTransforms(System.Collections.Generic.IEnumerable{System.IdentityModel.CookieTransform})
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: SetTransforms(IEnumerable<CookieTransform>)
  nameWithType: SessionSecurityTokenHandler.SetTransforms(IEnumerable<CookieTransform>)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.SetTransforms(IEnumerable<CookieTransform>)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Define as transformações que serão aplicadas a cookies."
  remarks: "Define a lista de transformações devolvido pelo <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms%2A>propriedade.</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms%2A> Transformações serão aplicadas pela ordem em que aparecem na lista quando um cookie de codificação e ordem inversa quando descodificar um cookie.      > [!WARNING] > Se o `transforms` parâmetro é `null`, será emitida uma exceção do <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms%2A>método quando é denominado para codificar ou descodificar o cookie.</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms%2A>"
  syntax:
    content: protected void SetTransforms (System.Collections.Generic.IEnumerable<System.IdentityModel.CookieTransform> transforms);
    parameters:
    - id: transforms
      type: System.Collections.Generic.IEnumerable{System.IdentityModel.CookieTransform}
      description: "Transformações a utilizar."
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.SetTransforms*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime
  id: TokenLifetime
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: TokenLifetime
  nameWithType: SessionSecurityTokenHandler.TokenLifetime
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Obtém ou define a duração do token."
  remarks: "Por predefinição, se o [ \\&lt; sessionTokenRequirement\\&gt;](../Topic/%3CsessionTokenRequirement%3E.md) elemento é especificado no ficheiro de configuração, a propriedade de TokenLifetime é inicializada para o valor da `lifetime` atributo pelo <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.LoadCustomConfiguration%2A>método.</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.LoadCustomConfiguration%2A>"
  syntax:
    content: public virtual TimeSpan TokenLifetime { get; set; }
    return:
      type: System.TimeSpan
      description: "A duração do token. A predefinição é <xref href=&quot;System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultLifetime&quot;> </xref>."
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Ocorre uma tentativa para definir um intervalo de tempo é menor ou igual a zero."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenType
  id: TokenType
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: TokenType
  nameWithType: SessionSecurityTokenHandler.TokenType
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenType
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Obtém o tipo de tokens que este processador processa."
  syntax:
    content: public override Type TokenType { get; }
    return:
      type: System.Type
      description: "The <xref:System.Type> of <xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;></xref>.</xref:System.Type>"
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenType*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms
  id: Transforms
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: Transforms
  nameWithType: SessionSecurityTokenHandler.Transforms
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Obtém as transformações que serão aplicadas para o cookie."
  remarks: "As transformações são aplicadas no <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms%2A>método.</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms%2A>"
  syntax:
    content: public System.Collections.ObjectModel.ReadOnlyCollection<System.IdentityModel.CookieTransform> Transforms { get; }
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.CookieTransform}
      description: "A lista de transformações que serão aplicados para o cookie."
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateSession(System.IdentityModel.Tokens.SessionSecurityToken)
  id: ValidateSession(System.IdentityModel.Tokens.SessionSecurityToken)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: ValidateSession(SessionSecurityToken)
  nameWithType: SessionSecurityTokenHandler.ValidateSession(SessionSecurityToken)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateSession(SessionSecurityToken)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Determina se a sessão associada ao token especificado ainda é válida. Validade é determinada verificando o <> </> *> e <> </> *> propriedades do token especificado. Se a sessão já não é válida, é emitida uma exceção."
  remarks: "O token não é válido se o <xref:System.IdentityModel.Tokens.SecurityToken.ValidFrom%2A>propriedade está definida como um valor que ocorre mais tarde ao <xref:System.DateTime.UtcNow%2A>, ou se a <xref:System.IdentityModel.Tokens.SecurityToken.ValidTo%2A>propriedade está definida como um valor que ocorre anteriores ao <xref:System.DateTime.UtcNow%2A>.</xref:System.DateTime.UtcNow%2A> </xref:System.IdentityModel.Tokens.SecurityToken.ValidTo%2A> </xref:System.DateTime.UtcNow%2A> </xref:System.IdentityModel.Tokens.SecurityToken.ValidFrom%2A>       Chamado a partir de <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken%2A>métodos para validar a sessão.</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken%2A>"
  syntax:
    content: protected virtual void ValidateSession (System.IdentityModel.Tokens.SessionSecurityToken securityToken);
    parameters:
    - id: securityToken
      type: System.IdentityModel.Tokens.SessionSecurityToken
      description: "O token ser verificado."
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateSession*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>securityToken</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "O <xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration*>propriedade é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>.</xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration*>"
  - type: System.IdentityModel.Tokens.SecurityTokenNotYetValidException
    commentId: T:System.IdentityModel.Tokens.SecurityTokenNotYetValidException
    description: "O <> </> *> propriedade do token é posterior à <> </> *>."
  - type: System.IdentityModel.Tokens.SecurityTokenExpiredException
    commentId: T:System.IdentityModel.Tokens.SecurityTokenExpiredException
    description: "O <> </> *> propriedade do token é anterior ao <> </> *>."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)
  id: ValidateToken(System.IdentityModel.Tokens.SecurityToken)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: ValidateToken(SecurityToken)
  nameWithType: SessionSecurityTokenHandler.ValidateToken(SecurityToken)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken(SecurityToken)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Valida o token especificado e devolve as afirmações."
  remarks: "Invoca o <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateSession%2A>método para validar o token.</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateSession%2A>"
  syntax:
    content: public override System.Collections.ObjectModel.ReadOnlyCollection<System.Security.Claims.ClaimsIdentity> ValidateToken (System.IdentityModel.Tokens.SecurityToken token);
    parameters:
    - id: token
      type: System.IdentityModel.Tokens.SecurityToken
      description: "O token para ser validado. Tem de ser atribuível a partir do <xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;> </xref>."
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Security.Claims.ClaimsIdentity}
      description: "As identidades que estão contidas no token."
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: >-
      <code>token</code>
          <xref uid="langword_csharp_null" name="null" href=""></xref>.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>token</code>Não é atribuível a partir do <xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;> </xref>."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SessionSecurityToken,System.String)
  id: ValidateToken(System.IdentityModel.Tokens.SessionSecurityToken,System.String)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: ValidateToken(SessionSecurityToken,String)
  nameWithType: SessionSecurityTokenHandler.ValidateToken(SessionSecurityToken,String)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken(SessionSecurityToken,String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Valida o token de sessão especificado e devolve as afirmações."
  remarks: "Efetua uma verificação para se certificar de que o token especificado tem um âmbito para o ID de ponto final especificado e, se assim for, invoca o <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken%28System.IdentityModel.Tokens.SecurityToken%29?displayProperty=fullName>método; caso contrário, emite um <xref:System.IdentityModel.Tokens.SecurityTokenException>.</xref:System.IdentityModel.Tokens.SecurityTokenException> </xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken%28System.IdentityModel.Tokens.SecurityToken%29?displayProperty=fullName>      > [!IMPORTANT] > Tokens de sessão que tenham um <xref:System.IdentityModel.Tokens.SessionSecurityToken.EndpointId%2A>propriedade que seja `null` ou vazios são considerados para ser um âmbito global.</xref:System.IdentityModel.Tokens.SessionSecurityToken.EndpointId%2A> Isto apresenta um potencial risco de segurança. Por este motivo, deve certificar-se que o <xref:System.IdentityModel.Tokens.SessionSecurityToken.EndpointId%2A>propriedade está definida no seus tokens de sessão.</xref:System.IdentityModel.Tokens.SessionSecurityToken.EndpointId%2A>"
  syntax:
    content: public virtual System.Collections.ObjectModel.ReadOnlyCollection<System.Security.Claims.ClaimsIdentity> ValidateToken (System.IdentityModel.Tokens.SessionSecurityToken token, string endpointId);
    parameters:
    - id: token
      type: System.IdentityModel.Tokens.SessionSecurityToken
      description: "O token para ser validado. Tem de ser atribuível a partir do <xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;> </xref>."
    - id: endpointId
      type: System.String
      description: "O identificador do ponto final ao qual o token tem um âmbito."
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Security.Claims.ClaimsIdentity}
      description: "As identidades que estão contidas no token."
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>token</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>endpointId</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>token</code>Não é atribuível a partir do <xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;> </xref>."
  - type: System.IdentityModel.Tokens.SecurityTokenException
    commentId: T:System.IdentityModel.Tokens.SecurityTokenException
    description: "O <xref:System.IdentityModel.Tokens.SessionSecurityToken.EndpointId*>propriedade do token especificado não é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> ou está vazio e o respetivo valor é diferente do que o especificado pelo <code> endpointId </code> parâmetro.</xref:System.IdentityModel.Tokens.SessionSecurityToken.EndpointId*>"
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken(System.IdentityModel.Tokens.SessionSecurityToken)
  id: WriteToken(System.IdentityModel.Tokens.SessionSecurityToken)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: WriteToken(SessionSecurityToken)
  nameWithType: SessionSecurityTokenHandler.WriteToken(SessionSecurityToken)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken(SessionSecurityToken)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Serializa o token especificado para uma matriz de bytes."
  remarks: "Serializa o token especificado através da criação e o escritor XML ao longo de um <xref:System.IO.MemoryStream>e invocar o <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken%28System.Xml.XmlWriter%2CSystem.IdentityModel.Tokens.SecurityToken%29?displayProperty=fullName>método.</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken%28System.Xml.XmlWriter%2CSystem.IdentityModel.Tokens.SecurityToken%29?displayProperty=fullName> </xref:System.IO.MemoryStream> Ver essa sobrecarga para obter mais detalhes."
  syntax:
    content: public virtual byte[] WriteToken (System.IdentityModel.Tokens.SessionSecurityToken sessionToken);
    parameters:
    - id: sessionToken
      type: System.IdentityModel.Tokens.SessionSecurityToken
      description: "O token para escrita."
    return:
      type: System.Byte[]
      description: "Uma matriz de bytes codificado."
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>sessiontoken</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)
  id: WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: WriteToken(XmlWriter,SecurityToken)
  nameWithType: SessionSecurityTokenHandler.WriteToken(XmlWriter,SecurityToken)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken(XmlWriter,SecurityToken)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Serializa o token especificado utilizando o escritor XML especificado."
  remarks: "A implementação predefinida serializa o token especificado como um Feb2005 de conversação segura WS ou 1.3 de conversação segura WS `<wsc:SecurityContextToken>` elemento, dependendo do valor da <xref:System.IdentityModel.Tokens.SessionSecurityToken.SecureConversationVersion%2A?displayProperty=fullName>propriedade.</xref:System.IdentityModel.Tokens.SessionSecurityToken.SecureConversationVersion%2A?displayProperty=fullName> O <xref:System.IdentityModel.Tokens.SessionSecurityToken.Id%2A?displayProperty=fullName>propriedade está a ser serializada como o `Id` atributo.</xref:System.IdentityModel.Tokens.SessionSecurityToken.Id%2A?displayProperty=fullName> O <xref:System.IdentityModel.Tokens.SessionSecurityToken.ContextId%2A?displayProperty=fullName>propriedade está a ser serializada como o `<Identifier>` elemento subordinado.</xref:System.IdentityModel.Tokens.SessionSecurityToken.ContextId%2A?displayProperty=fullName> Se não for `null` o <xref:System.IdentityModel.Tokens.SessionSecurityToken.KeyGeneration%2A?displayProperty=fullName>propriedade estiver serializada como um `<Instance>` elemento.</xref:System.IdentityModel.Tokens.SessionSecurityToken.KeyGeneration%2A?displayProperty=fullName> Por fim, se o <xref:System.IdentityModel.Tokens.SessionSecurityToken.IsReferenceMode%2A?displayProperty=fullName>propriedade é `false`, o token completo é serializado na matriz binária, que é transferida para o <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms%2A>método para ser codificado.</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms%2A> </xref:System.IdentityModel.Tokens.SessionSecurityToken.IsReferenceMode%2A?displayProperty=fullName> O token codificado, em seguida, é escrito como um valor de codificado em base64 para o elemento e o espaço de nomes especificado pelo <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieElementName%2A>e <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieNamespace%2A>Propriedades.</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieNamespace%2A> </xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieElementName%2A> Se o <xref:System.IdentityModel.Tokens.SessionSecurityToken.IsReferenceMode%2A?displayProperty=fullName>propriedade é `true`, o token não está a ser serializado.</xref:System.IdentityModel.Tokens.SessionSecurityToken.IsReferenceMode%2A?displayProperty=fullName>"
  syntax:
    content: public override void WriteToken (System.Xml.XmlWriter writer, System.IdentityModel.Tokens.SecurityToken token);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "O escritor XML com o qual a serializar o token."
    - id: token
      type: System.IdentityModel.Tokens.SecurityToken
      description: "O token de serialização. Uma instância de <xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;> </xref>."
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>writer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>token</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>token</code>Não é atribuível a partir do <xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;> </xref>.       - ou - <xref:System.IdentityModel.Tokens.SessionSecurityToken.SecureConversationVersion*> do token Especifica uma versão de conversação segura WS que não é suportada pelo processador."
  platform:
  - net462
references:
- uid: System.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: false
  name: System.IdentityModel.Tokens.SecurityTokenHandler
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.IdentityModel.Tokens.SecurityTokenException
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SecurityTokenException
  nameWithType: SecurityTokenException
  fullName: System.IdentityModel.Tokens.SecurityTokenException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.IdentityModel.Tokens.SecurityTokenNotYetValidException
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SecurityTokenNotYetValidException
  nameWithType: SecurityTokenNotYetValidException
  fullName: System.IdentityModel.Tokens.SecurityTokenNotYetValidException
- uid: System.IdentityModel.Tokens.SecurityTokenExpiredException
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SecurityTokenExpiredException
  nameWithType: SecurityTokenExpiredException
  fullName: System.IdentityModel.Tokens.SecurityTokenExpiredException
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.#ctor
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: SessionSecurityTokenHandler()
  nameWithType: SessionSecurityTokenHandler.SessionSecurityTokenHandler()
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.SessionSecurityTokenHandler()
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.CookieTransform})
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: SessionSecurityTokenHandler(ReadOnlyCollection<CookieTransform>)
  nameWithType: SessionSecurityTokenHandler.SessionSecurityTokenHandler(ReadOnlyCollection<CookieTransform>)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.SessionSecurityTokenHandler(ReadOnlyCollection<CookieTransform>)
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.CookieTransform}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: ReadOnlyCollection<CookieTransform>
  nameWithType: ReadOnlyCollection<CookieTransform>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.IdentityModel.CookieTransform>
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection<System.IdentityModel.CookieTransform>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IdentityModel.CookieTransform
    name: CookieTransform
    nameWithType: CookieTransform
    fullName: CookieTransform
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.CookieTransform},System.TimeSpan)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: SessionSecurityTokenHandler(ReadOnlyCollection<CookieTransform>,TimeSpan)
  nameWithType: SessionSecurityTokenHandler.SessionSecurityTokenHandler(ReadOnlyCollection<CookieTransform>,TimeSpan)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.SessionSecurityTokenHandler(ReadOnlyCollection<CookieTransform>,TimeSpan)
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms(System.Byte[],System.Boolean)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: ApplyTransforms(Byte[],Boolean)
  nameWithType: SessionSecurityTokenHandler.ApplyTransforms(Byte[],Boolean)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms(Byte[],Boolean)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanReadToken(System.Xml.XmlReader)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: CanReadToken(XmlReader)
  nameWithType: SessionSecurityTokenHandler.CanReadToken(XmlReader)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanReadToken(XmlReader)
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanValidateToken
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: CanValidateToken
  nameWithType: SessionSecurityTokenHandler.CanValidateToken
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanValidateToken
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanWriteToken
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: CanWriteToken
  nameWithType: SessionSecurityTokenHandler.CanWriteToken
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanWriteToken
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieElementName
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: CookieElementName
  nameWithType: SessionSecurityTokenHandler.CookieElementName
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieElementName
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieNamespace
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: CookieNamespace
  nameWithType: SessionSecurityTokenHandler.CookieNamespace
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieNamespace
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CreateSessionSecurityToken(System.Security.Claims.ClaimsPrincipal,System.String,System.String,System.DateTime,System.DateTime)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: CreateSessionSecurityToken(ClaimsPrincipal,String,String,DateTime,DateTime)
  nameWithType: SessionSecurityTokenHandler.CreateSessionSecurityToken(ClaimsPrincipal,String,String,DateTime,DateTime)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CreateSessionSecurityToken(ClaimsPrincipal,String,String,DateTime,DateTime)
- uid: System.IdentityModel.Tokens.SessionSecurityToken
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SessionSecurityToken
  nameWithType: SessionSecurityToken
  fullName: System.IdentityModel.Tokens.SessionSecurityToken
- uid: System.Security.Claims.ClaimsPrincipal
  parent: System.Security.Claims
  isExternal: false
  name: ClaimsPrincipal
  nameWithType: ClaimsPrincipal
  fullName: System.Security.Claims.ClaimsPrincipal
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: CreateToken(SecurityTokenDescriptor)
  nameWithType: SessionSecurityTokenHandler.CreateToken(SecurityTokenDescriptor)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CreateToken(SecurityTokenDescriptor)
- uid: System.IdentityModel.Tokens.SecurityToken
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SecurityToken
  nameWithType: SecurityToken
  fullName: System.IdentityModel.Tokens.SecurityToken
- uid: System.IdentityModel.Tokens.SecurityTokenDescriptor
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SecurityTokenDescriptor
  nameWithType: SecurityTokenDescriptor
  fullName: System.IdentityModel.Tokens.SecurityTokenDescriptor
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultCookieTransforms
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: DefaultCookieTransforms
  nameWithType: SessionSecurityTokenHandler.DefaultCookieTransforms
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultCookieTransforms
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultLifetime
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: DefaultLifetime
  nameWithType: SessionSecurityTokenHandler.DefaultLifetime
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultLifetime
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultTokenLifetime
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: DefaultTokenLifetime
  nameWithType: SessionSecurityTokenHandler.DefaultTokenLifetime
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultTokenLifetime
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.GetTokenTypeIdentifiers
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: GetTokenTypeIdentifiers()
  nameWithType: SessionSecurityTokenHandler.GetTokenTypeIdentifiers()
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.GetTokenTypeIdentifiers()
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: LoadCustomConfiguration(XmlNodeList)
  nameWithType: SessionSecurityTokenHandler.LoadCustomConfiguration(XmlNodeList)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.LoadCustomConfiguration(XmlNodeList)
- uid: System.Xml.XmlNodeList
  parent: System.Xml
  isExternal: false
  name: XmlNodeList
  nameWithType: XmlNodeList
  fullName: System.Xml.XmlNodeList
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(System.Xml.XmlReader)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: ReadToken(XmlReader)
  nameWithType: SessionSecurityTokenHandler.ReadToken(XmlReader)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(XmlReader)
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(System.Byte[],System.IdentityModel.Selectors.SecurityTokenResolver)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: ReadToken(Byte[],SecurityTokenResolver)
  nameWithType: SessionSecurityTokenHandler.ReadToken(Byte[],SecurityTokenResolver)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(Byte[],SecurityTokenResolver)
- uid: System.IdentityModel.Selectors.SecurityTokenResolver
  parent: System.IdentityModel.Selectors
  isExternal: false
  name: SecurityTokenResolver
  nameWithType: SecurityTokenResolver
  fullName: System.IdentityModel.Selectors.SecurityTokenResolver
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: ReadToken(XmlReader,SecurityTokenResolver)
  nameWithType: SessionSecurityTokenHandler.ReadToken(XmlReader,SecurityTokenResolver)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(XmlReader,SecurityTokenResolver)
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.SetTransforms(System.Collections.Generic.IEnumerable{System.IdentityModel.CookieTransform})
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: SetTransforms(IEnumerable<CookieTransform>)
  nameWithType: SessionSecurityTokenHandler.SetTransforms(IEnumerable<CookieTransform>)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.SetTransforms(IEnumerable<CookieTransform>)
- uid: System.Collections.Generic.IEnumerable{System.IdentityModel.CookieTransform}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<CookieTransform>
  nameWithType: IEnumerable<CookieTransform>
  fullName: System.Collections.Generic.IEnumerable<System.IdentityModel.CookieTransform>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.IdentityModel.CookieTransform>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IdentityModel.CookieTransform
    name: CookieTransform
    nameWithType: CookieTransform
    fullName: CookieTransform
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: TokenLifetime
  nameWithType: SessionSecurityTokenHandler.TokenLifetime
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenType
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: TokenType
  nameWithType: SessionSecurityTokenHandler.TokenType
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenType
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: Transforms
  nameWithType: SessionSecurityTokenHandler.Transforms
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateSession(System.IdentityModel.Tokens.SessionSecurityToken)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: ValidateSession(SessionSecurityToken)
  nameWithType: SessionSecurityTokenHandler.ValidateSession(SessionSecurityToken)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateSession(SessionSecurityToken)
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: ValidateToken(SecurityToken)
  nameWithType: SessionSecurityTokenHandler.ValidateToken(SecurityToken)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken(SecurityToken)
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Security.Claims.ClaimsIdentity}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: ReadOnlyCollection<ClaimsIdentity>
  nameWithType: ReadOnlyCollection<ClaimsIdentity>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Security.Claims.ClaimsIdentity>
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection<System.Security.Claims.ClaimsIdentity>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.ClaimsIdentity
    name: ClaimsIdentity
    nameWithType: ClaimsIdentity
    fullName: ClaimsIdentity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SessionSecurityToken,System.String)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: ValidateToken(SessionSecurityToken,String)
  nameWithType: SessionSecurityTokenHandler.ValidateToken(SessionSecurityToken,String)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken(SessionSecurityToken,String)
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken(System.IdentityModel.Tokens.SessionSecurityToken)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: WriteToken(SessionSecurityToken)
  nameWithType: SessionSecurityTokenHandler.WriteToken(SessionSecurityToken)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken(SessionSecurityToken)
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: WriteToken(XmlWriter,SecurityToken)
  nameWithType: SessionSecurityTokenHandler.WriteToken(XmlWriter,SecurityToken)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken(XmlWriter,SecurityToken)
- uid: System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.#ctor*
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: SessionSecurityTokenHandler
  nameWithType: SessionSecurityTokenHandler.SessionSecurityTokenHandler
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms*
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: ApplyTransforms
  nameWithType: SessionSecurityTokenHandler.ApplyTransforms
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanReadToken*
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: CanReadToken
  nameWithType: SessionSecurityTokenHandler.CanReadToken
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanValidateToken*
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: CanValidateToken
  nameWithType: SessionSecurityTokenHandler.CanValidateToken
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanWriteToken*
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: CanWriteToken
  nameWithType: SessionSecurityTokenHandler.CanWriteToken
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieElementName*
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: CookieElementName
  nameWithType: SessionSecurityTokenHandler.CookieElementName
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieNamespace*
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: CookieNamespace
  nameWithType: SessionSecurityTokenHandler.CookieNamespace
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CreateSessionSecurityToken*
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: CreateSessionSecurityToken
  nameWithType: SessionSecurityTokenHandler.CreateSessionSecurityToken
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CreateToken*
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: CreateToken
  nameWithType: SessionSecurityTokenHandler.CreateToken
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultTokenLifetime*
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: DefaultTokenLifetime
  nameWithType: SessionSecurityTokenHandler.DefaultTokenLifetime
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.GetTokenTypeIdentifiers*
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: GetTokenTypeIdentifiers
  nameWithType: SessionSecurityTokenHandler.GetTokenTypeIdentifiers
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.LoadCustomConfiguration*
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: LoadCustomConfiguration
  nameWithType: SessionSecurityTokenHandler.LoadCustomConfiguration
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken*
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: ReadToken
  nameWithType: SessionSecurityTokenHandler.ReadToken
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.SetTransforms*
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: SetTransforms
  nameWithType: SessionSecurityTokenHandler.SetTransforms
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime*
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: TokenLifetime
  nameWithType: SessionSecurityTokenHandler.TokenLifetime
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenType*
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: TokenType
  nameWithType: SessionSecurityTokenHandler.TokenType
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms*
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: Transforms
  nameWithType: SessionSecurityTokenHandler.Transforms
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateSession*
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: ValidateSession
  nameWithType: SessionSecurityTokenHandler.ValidateSession
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken*
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: ValidateToken
  nameWithType: SessionSecurityTokenHandler.ValidateToken
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken*
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: WriteToken
  nameWithType: SessionSecurityTokenHandler.WriteToken
