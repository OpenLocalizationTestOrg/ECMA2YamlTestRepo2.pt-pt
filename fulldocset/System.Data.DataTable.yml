### YamlMime:ManagedReference
items:
- uid: System.Data.DataTable
  id: DataTable
  children:
  - System.Data.DataTable.#ctor
  - System.Data.DataTable.#ctor(System.String)
  - System.Data.DataTable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Data.DataTable.#ctor(System.String,System.String)
  - System.Data.DataTable.AcceptChanges
  - System.Data.DataTable.BeginInit
  - System.Data.DataTable.BeginLoadData
  - System.Data.DataTable.CaseSensitive
  - System.Data.DataTable.ChildRelations
  - System.Data.DataTable.Clear
  - System.Data.DataTable.Clone
  - System.Data.DataTable.ColumnChanged
  - System.Data.DataTable.ColumnChanging
  - System.Data.DataTable.Columns
  - System.Data.DataTable.Compute(System.String,System.String)
  - System.Data.DataTable.Constraints
  - System.Data.DataTable.Copy
  - System.Data.DataTable.CreateDataReader
  - System.Data.DataTable.CreateInstance
  - System.Data.DataTable.DataSet
  - System.Data.DataTable.DefaultView
  - System.Data.DataTable.DisplayExpression
  - System.Data.DataTable.EndInit
  - System.Data.DataTable.EndLoadData
  - System.Data.DataTable.ExtendedProperties
  - System.Data.DataTable.fInitInProgress
  - System.Data.DataTable.GetChanges
  - System.Data.DataTable.GetChanges(System.Data.DataRowState)
  - System.Data.DataTable.GetDataTableSchema(System.Xml.Schema.XmlSchemaSet)
  - System.Data.DataTable.GetErrors
  - System.Data.DataTable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Data.DataTable.GetRowType
  - System.Data.DataTable.GetSchema
  - System.Data.DataTable.HasErrors
  - System.Data.DataTable.ImportRow(System.Data.DataRow)
  - System.Data.DataTable.Initialized
  - System.Data.DataTable.IsInitialized
  - System.Data.DataTable.Load(System.Data.IDataReader)
  - System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)
  - System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)
  - System.Data.DataTable.LoadDataRow(System.Object[],System.Boolean)
  - System.Data.DataTable.LoadDataRow(System.Object[],System.Data.LoadOption)
  - System.Data.DataTable.Locale
  - System.Data.DataTable.Merge(System.Data.DataTable)
  - System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean)
  - System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)
  - System.Data.DataTable.MinimumCapacity
  - System.Data.DataTable.Namespace
  - System.Data.DataTable.NewRow
  - System.Data.DataTable.NewRowArray(System.Int32)
  - System.Data.DataTable.NewRowFromBuilder(System.Data.DataRowBuilder)
  - System.Data.DataTable.OnColumnChanged(System.Data.DataColumnChangeEventArgs)
  - System.Data.DataTable.OnColumnChanging(System.Data.DataColumnChangeEventArgs)
  - System.Data.DataTable.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)
  - System.Data.DataTable.OnRemoveColumn(System.Data.DataColumn)
  - System.Data.DataTable.OnRowChanged(System.Data.DataRowChangeEventArgs)
  - System.Data.DataTable.OnRowChanging(System.Data.DataRowChangeEventArgs)
  - System.Data.DataTable.OnRowDeleted(System.Data.DataRowChangeEventArgs)
  - System.Data.DataTable.OnRowDeleting(System.Data.DataRowChangeEventArgs)
  - System.Data.DataTable.OnTableCleared(System.Data.DataTableClearEventArgs)
  - System.Data.DataTable.OnTableClearing(System.Data.DataTableClearEventArgs)
  - System.Data.DataTable.OnTableNewRow(System.Data.DataTableNewRowEventArgs)
  - System.Data.DataTable.ParentRelations
  - System.Data.DataTable.Prefix
  - System.Data.DataTable.PrimaryKey
  - System.Data.DataTable.ReadXml(System.IO.Stream)
  - System.Data.DataTable.ReadXml(System.IO.TextReader)
  - System.Data.DataTable.ReadXml(System.String)
  - System.Data.DataTable.ReadXml(System.Xml.XmlReader)
  - System.Data.DataTable.ReadXmlSchema(System.IO.Stream)
  - System.Data.DataTable.ReadXmlSchema(System.IO.TextReader)
  - System.Data.DataTable.ReadXmlSchema(System.String)
  - System.Data.DataTable.ReadXmlSchema(System.Xml.XmlReader)
  - System.Data.DataTable.ReadXmlSerializable(System.Xml.XmlReader)
  - System.Data.DataTable.RejectChanges
  - System.Data.DataTable.RemotingFormat
  - System.Data.DataTable.Reset
  - System.Data.DataTable.RowChanged
  - System.Data.DataTable.RowChanging
  - System.Data.DataTable.RowDeleted
  - System.Data.DataTable.RowDeleting
  - System.Data.DataTable.Rows
  - System.Data.DataTable.Select
  - System.Data.DataTable.Select(System.String)
  - System.Data.DataTable.Select(System.String,System.String)
  - System.Data.DataTable.Select(System.String,System.String,System.Data.DataViewRowState)
  - System.Data.DataTable.Site
  - System.Data.DataTable.System#ComponentModel#IListSource#ContainsListCollection
  - System.Data.DataTable.System#ComponentModel#IListSource#GetList
  - System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#GetSchema
  - System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  - System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  - System.Data.DataTable.TableCleared
  - System.Data.DataTable.TableClearing
  - System.Data.DataTable.TableName
  - System.Data.DataTable.TableNewRow
  - System.Data.DataTable.ToString
  - System.Data.DataTable.WriteXml(System.IO.Stream)
  - System.Data.DataTable.WriteXml(System.IO.TextWriter)
  - System.Data.DataTable.WriteXml(System.String)
  - System.Data.DataTable.WriteXml(System.Xml.XmlWriter)
  - System.Data.DataTable.WriteXml(System.IO.Stream,System.Boolean)
  - System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)
  - System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Boolean)
  - System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)
  - System.Data.DataTable.WriteXml(System.String,System.Boolean)
  - System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode)
  - System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Boolean)
  - System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)
  - System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode,System.Boolean)
  - System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode,System.Boolean)
  - System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode,System.Boolean)
  - System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode,System.Boolean)
  - System.Data.DataTable.WriteXmlSchema(System.IO.Stream)
  - System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter)
  - System.Data.DataTable.WriteXmlSchema(System.String)
  - System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter)
  - System.Data.DataTable.WriteXmlSchema(System.IO.Stream,System.Boolean)
  - System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter,System.Boolean)
  - System.Data.DataTable.WriteXmlSchema(System.String,System.Boolean)
  - System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter,System.Boolean)
  langs:
  - csharp
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
  type: Class
  summary: "Represents one table of in-memory data."
  remarks: "The DataTable is a central object in the ADO.NET library. Other objects that use the DataTable include the <xref:System.Data.DataSet> and the <xref:System.Data.DataView>.       When accessing DataTable objects, note that they are conditionally case sensitive. For example, if one DataTable is named &quot;mydatatable&quot; and another is named &quot;Mydatatable&quot;, a string used to search for one of the tables is regarded as case sensitive. However, if &quot;mydatatable&quot; exists and &quot;Mydatatable&quot; does not, the search string is regarded as case insensitive. A <xref:System.Data.DataSet> can contain two DataTable objects that have the same <xref:System.Data.DataTable.TableName%2A> property value but different <xref:System.Data.DataTable.Namespace%2A> property values. For more information about working with DataTable objects, see [Creating a DataTable](~/add/includes/ajax-current-ext-md.md).       If you are creating a DataTable programmatically, you must first define its schema by adding <xref:System.Data.DataColumn> objects to the <xref:System.Data.DataColumnCollection> (accessed through the <xref:System.Data.DataTable.Columns%2A> property). For more information about adding <xref:System.Data.DataColumn> objects, see [Adding Columns to a DataTable](~/add/includes/ajax-current-ext-md.md).       To add rows to a DataTable, you must first use the <xref:System.Data.DataTable.NewRow%2A> method to return a new <xref:System.Data.DataRow> object. The <xref:System.Data.DataTable.NewRow%2A> method returns a row with the schema of the DataTable, as it is defined by the table&quot;s <xref:System.Data.DataColumnCollection>. The maximum number of rows that a DataTable can store is 16,777,216. For more information, see [Adding Data to a DataTable](~/add/includes/ajax-current-ext-md.md).       The DataTable also contains a collection of <xref:System.Data.Constraint> objects that can be used to ensure the integrity of the data. For more information, see [DataTable Constraints](~/add/includes/ajax-current-ext-md.md).       There are many DataTable events that can be used to determine when changes are made to a table. These include <xref:System.Data.DataTable.RowChanged>, <xref:System.Data.DataTable.RowChanging>, <xref:System.Data.DataTable.RowDeleting>, and <xref:System.Data.DataTable.RowDeleted>. For more information about the events that can be used with a DataTable, see [Handling DataTable Events](~/add/includes/ajax-current-ext-md.md).       When an instance of DataTable is created, some of the read/write properties are set to initial values. For a list of these values, see the <xref:System.Data.DataTable.%23ctor%2A?displayProperty=fullName> constructor topic.      > [!NOTE] >  The <xref:System.Data.DataSet> and DataTable objects inherit from <xref:System.ComponentModel.MarshalByValueComponent>, and support the <xref:System.Runtime.Serialization.ISerializable> interface for .NET Framework remoting. These are the only ADO.NET objects that you can use for .NET Framework remoting."
  example:
  - "The following example creates two DataTable objects and one <xref:System.Data.DataRelation> object, and adds the new objects to a <xref:System.Data.DataSet>. The tables are then displayed in a <xref:System.Windows.Forms.DataGridView> control.  \n  \n [!code-vb[Classic WebData DataTable Example#1](~/add/codesnippet/visualbasic/t-system.data.datatable_1.vb)]\n [!code-cs[Classic WebData DataTable Example#1](~/add/codesnippet/csharp/t-system.data.datatable_1.cs)]  \n  \n This sample demonstrates how to create a DataTable manually with specific schema definitions:  \n  \n-   Create multiple DataTables and define the initial columns.  \n  \n-   Create the table constraints.  \n  \n-   Insert the values and display the tables.  \n  \n-   Create the expression columns and display the tables.  \n  \n C# and Visual Basic projects with this code sample can be found on [Developer Code Samples](http://code.msdn.microsoft.com/How-to-create-DataTable-7abb4914).  \n  \n [!code-cs[Classic WebData DataTable Example2#1](~/add/codesnippet/csharp/t-system.data.datatable_2.cs)]\n [!code-vb[Classic WebData DataTable Example2#1](~/add/codesnippet/visualbasic/t-system.data.datatable_2.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultEvent("RowChanging")]

      [System.ComponentModel.DefaultProperty("TableName")]

      [System.ComponentModel.DesignTimeVisible(false)]

      [System.ComponentModel.Editor("Microsoft.VSDesigner.Data.Design.DataTableEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      [System.ComponentModel.ToolboxItem(false)]

      [System.Xml.Serialization.XmlSchemaProvider("GetDataTableSchema")]

      public class DataTable : System.ComponentModel.MarshalByValueComponent, System.ComponentModel.IListSource, System.ComponentModel.ISupportInitializeNotification, System.Runtime.Serialization.ISerializable, System.Xml.Serialization.IXmlSerializable
  inheritance:
  - System.Object
  - System.ComponentModel.MarshalByValueComponent
  implements:
  - System.ComponentModel.IListSource
  - System.ComponentModel.ISupportInitializeNotification
  - System.Runtime.Serialization.ISerializable
  - System.Xml.Serialization.IXmlSerializable
  inheritedMembers:
  - System.ComponentModel.MarshalByValueComponent.Container
  - System.ComponentModel.MarshalByValueComponent.DesignMode
  - System.ComponentModel.MarshalByValueComponent.Dispose
  - System.ComponentModel.MarshalByValueComponent.Dispose(System.Boolean)
  - System.ComponentModel.MarshalByValueComponent.Disposed
  - System.ComponentModel.MarshalByValueComponent.Events
  - System.ComponentModel.MarshalByValueComponent.GetService(System.Type)
  platform:
  - net462
- uid: System.Data.DataTable.#ctor
  id: '#ctor'
  parent: System.Data.DataTable
  langs:
  - csharp
  name: DataTable()
  nameWithType: DataTable.DataTable()
  fullName: System.Data.DataTable.DataTable()
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Initializes a new instance of the <xref href=&quot;System.Data.DataTable&quot;></xref> class with no arguments."
  remarks: "The constructor sets initial values for all properties of the <xref:System.Data.DataTable> object. The following table shows the properties and their default values. When an instance of <xref:System.Data.DataTable> is created, the following read/write properties are set to initial values.      |Property|Default value|   |--------------|-------------------|   |**CaseSensitive**|Same as the parent <xref:System.Data.DataSet>, if it belongs to one. Otherwise, `false`.|   |**DisplayExpression**|Empty string (&quot;&quot;)|   |**Locale**|Same as the parent <xref:System.Data.DataSet> object&quot;s <xref:System.Globalization.CultureInfo> (returned by the <xref:System.Data.DataSet.Locale%2A> property); if no parent exists, the default is the current system <xref:System.Globalization.CultureInfo>.|   |**MinimumCapacity**|50 rows.|       You can change the value for any of these properties through a separate call to the property."
  example:
  - "The following example creates a new <xref:System.Data.DataTable> with <xref:System.Data.DataColumn> and <xref:System.Data.DataRow>, and displays it in a <xref:System.Windows.Forms.DataGridView> control.  \n  \n [!code-vb[Classic WebData DataTable.DataTable Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._0_1.vb)]\n [!code-cs[Classic WebData DataTable.DataTable Example#1](~/add/codesnippet/csharp/m-system.data.datatable._0_1.cs)]"
  syntax:
    content: public DataTable ();
    parameters: []
  overload: System.Data.DataTable.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Data.DataTable
  langs:
  - csharp
  name: DataTable(String)
  nameWithType: DataTable.DataTable(String)
  fullName: System.Data.DataTable.DataTable(String)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Initializes a new instance of the <xref href=&quot;System.Data.DataTable&quot;></xref> class with the specified table name."
  remarks: ''
  example:
  - "The following example creates a <xref:System.Data.DataTable> and displays it in a <xref:System.Windows.Forms.DataGridView> control.  \n  \n [!code-cs[Classic WebData DataTable.DataTable1 Example#1](~/add/codesnippet/csharp/m-system.data.datatable._21_1.cs)]\n [!code-vb[Classic WebData DataTable.DataTable1 Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._21_1.vb)]"
  syntax:
    content: public DataTable (string tableName);
    parameters:
    - id: tableName
      type: System.String
      description: "The name to give the table. If `tableName` is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> or an empty string, a default name is given when added to the <xref href=&quot;System.Data.DataTableCollection&quot;></xref>."
  overload: System.Data.DataTable.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'
  parent: System.Data.DataTable
  langs:
  - csharp
  name: DataTable(SerializationInfo,StreamingContext)
  nameWithType: DataTable.DataTable(SerializationInfo,StreamingContext)
  fullName: System.Data.DataTable.DataTable(SerializationInfo,StreamingContext)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Initializes a new instance of the <xref href=&quot;System.Data.DataTable&quot;></xref> class with the <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;></xref> and the <xref:System.Runtime.Serialization.StreamingContext>."
  remarks: "This implementation of the <xref:System.Data.DataTable> constructor is required for <xref:System.Runtime.Serialization.ISerializable>."
  syntax:
    content: protected DataTable (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "The data needed to serialize or deserialize an object."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "The source and destination of a given serialized stream."
  overload: System.Data.DataTable.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Data.DataTable
  langs:
  - csharp
  name: DataTable(String,String)
  nameWithType: DataTable.DataTable(String,String)
  fullName: System.Data.DataTable.DataTable(String,String)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Initializes a new instance of the <xref href=&quot;System.Data.DataTable&quot;></xref> class using the specified table name and namespace."
  syntax:
    content: public DataTable (string tableName, string tableNamespace);
    parameters:
    - id: tableName
      type: System.String
      description: "The name to give the table. If `tableName` is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> or an empty string, a default name is given when added to the <xref href=&quot;System.Data.DataTableCollection&quot;></xref>."
    - id: tableNamespace
      type: System.String
      description: "The namespace for the XML representation of the data stored in the <xref uid=&quot;langword_csharp_DataTable&quot; name=&quot;DataTable&quot; href=&quot;&quot;></xref>."
  overload: System.Data.DataTable.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.AcceptChanges
  id: AcceptChanges
  parent: System.Data.DataTable
  langs:
  - csharp
  name: AcceptChanges()
  nameWithType: DataTable.AcceptChanges()
  fullName: System.Data.DataTable.AcceptChanges()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Commits all the changes made to this table since the last time AcceptChanges was called."
  remarks: "When AcceptChanges is called, any <xref:System.Data.DataRow> object still in edit mode successfully ends its edits. The <xref:System.Data.DataRowState> also changes: all `Added` and `Modified` rows become `Unchanged`, and `Deleted` rows are removed.       The AcceptChanges method is generally called on a <xref:System.Data.DataTable> after you attempt to update the <xref:System.Data.DataSet> using the <xref:System.Data.Common.DbDataAdapter.Update%2A?displayProperty=fullName> method."
  example:
  - "The following example tests each table for errors. If the table's errors can be reconciled (by passing it to an undefined function), AcceptChanges is called; otherwise, <xref:System.Data.DataTable.RejectChanges%2A> is called.  \n  \n [!code-vb[Classic WebData DataTable.AcceptChanges Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._22_1.vb)]\n [!code-cs[Classic WebData DataTable.AcceptChanges Example#1](~/add/codesnippet/csharp/m-system.data.datatable._22_1.cs)]"
  syntax:
    content: public void AcceptChanges ();
    parameters: []
  overload: System.Data.DataTable.AcceptChanges*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.BeginInit
  id: BeginInit
  parent: System.Data.DataTable
  langs:
  - csharp
  name: BeginInit()
  nameWithType: DataTable.BeginInit()
  fullName: System.Data.DataTable.BeginInit()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Begins the initialization of a <xref href=&quot;System.Data.DataTable&quot;></xref> that is used on a form or used by another component. The initialization occurs at run time."
  remarks: "The Visual Studio .NET design environment uses this method to start the initialization of a component that is used on a form or used by another component. The <xref:System.Data.DataTable.EndInit%2A> method ends the initialization. Using the BeginInit and <xref:System.Data.DataTable.EndInit%2A> methods prevents the control from being used before it is fully initialized."
  syntax:
    content: public virtual void BeginInit ();
    parameters: []
  overload: System.Data.DataTable.BeginInit*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.BeginLoadData
  id: BeginLoadData
  parent: System.Data.DataTable
  langs:
  - csharp
  name: BeginLoadData()
  nameWithType: DataTable.BeginLoadData()
  fullName: System.Data.DataTable.BeginLoadData()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Turns off notifications, index maintenance, and constraints while loading data."
  remarks: "Use BeginLoadData in conjunction with <xref:System.Data.DataTable.LoadDataRow%2A> and <xref:System.Data.DataTable.EndLoadData%2A>."
  syntax:
    content: public void BeginLoadData ();
    parameters: []
  overload: System.Data.DataTable.BeginLoadData*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.CaseSensitive
  id: CaseSensitive
  parent: System.Data.DataTable
  langs:
  - csharp
  name: CaseSensitive
  nameWithType: DataTable.CaseSensitive
  fullName: System.Data.DataTable.CaseSensitive
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Indicates whether string comparisons within the table are case-sensitive."
  remarks: "The CaseSensitive property affects string comparisons in sorting, searching, and filtering."
  example:
  - "The following example calls the <xref:System.Data.DataTable.Select%2A> method twice on a <xref:System.Data.DataTable>. The first time, the CaseSensitive property is set to `false`, the second, to `true`.  \n  \n [!code-cs[Classic WebData DataTable.CaseSensitive Example#1](~/add/codesnippet/csharp/p-system.data.datatable._0_1.cs)]\n [!code-vb[Classic WebData DataTable.CaseSensitive Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._0_1.vb)]"
  syntax:
    content: public bool CaseSensitive { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the comparison is case-sensitive; otherwise <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is set to the parent <xref href=&quot;System.Data.DataSet&quot;></xref> object&quot;s <xref:System.Data.DataSet.CaseSensitive*> property, or <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> if the <xref href=&quot;System.Data.DataTable&quot;></xref> was created independently of a <xref href=&quot;System.Data.DataSet&quot;></xref>."
  overload: System.Data.DataTable.CaseSensitive*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.ChildRelations
  id: ChildRelations
  parent: System.Data.DataTable
  langs:
  - csharp
  name: ChildRelations
  nameWithType: DataTable.ChildRelations
  fullName: System.Data.DataTable.ChildRelations
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Gets the collection of child relations for this <xref href=&quot;System.Data.DataTable&quot;></xref>."
  remarks: 'A <xref:System.Data.DataRelation> defines the relationship between two tables. Typically, two tables are linked through a single field that contains the same data. For example, a table which contains address data may have a single field containing codes that represent countries/regions. A second table that contains country/region data will have a single field that contains the code that identifies the country/region, and it is this code which is inserted into the corresponding field in the first table. A <xref:System.Data.DataRelation>, then, contains at least four pieces of information: (1) the name of the first table, (2) the column name in the first table, (3) the name of the second table, and (4) the column name in the second table.'
  example:
  - "The following example uses the ChildRelations property to return each child <xref:System.Data.DataRelation> in a <xref:System.Data.DataTable>. Each relation is then used as an argument in the <xref:System.Data.DataRow.GetChildRows%2A> method of the <xref:System.Data.DataRow> to return an array of rows. The value of each column in the row is then printed.  \n  \n [!code-vb[Classic WebData DataTable.ChildRelations Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._13_1.vb)]\n [!code-cs[Classic WebData DataTable.ChildRelations Example#1](~/add/codesnippet/csharp/p-system.data.datatable._13_1.cs)]"
  syntax:
    content: public System.Data.DataRelationCollection ChildRelations { get; }
    return:
      type: System.Data.DataRelationCollection
      description: "A <xref href=&quot;System.Data.DataRelationCollection&quot;></xref> that contains the child relations for the table. An empty collection is returned if no <xref href=&quot;System.Data.DataRelation&quot;></xref> objects exist."
  overload: System.Data.DataTable.ChildRelations*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Clear
  id: Clear
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Clear()
  nameWithType: DataTable.Clear()
  fullName: System.Data.DataTable.Clear()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Clears the <xref href=&quot;System.Data.DataTable&quot;></xref> of all data."
  remarks: "All rows in all tables are removed. An exception is generated if the table has any enforced child relations that would cause child rows to be orphaned.       If the <xref:System.Data.DataSet> is bound to an <xref:System.Xml.XmlDataDocument>, calling <xref:System.Data.DataSet.Clear%2A?displayProperty=fullName> or Clear raises the <xref:System.NotSupportedException>. To avoid this situation, traverse each table, removing each row one at a time. When you use <xref:System.Data.DataTable.NewRow%2A> to create new rows, the rows must be processed before you call Clear."
  example:
  - "The following example clears the table of all data.  \n  \n [!code-cs[Classic WebData DataTable.Clear Example#1](~/add/codesnippet/csharp/m-system.data.datatable._20_1.cs)]\n [!code-vb[Classic WebData DataTable.Clear Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._20_1.vb)]"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Data.DataTable.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Clone
  id: Clone
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Clone()
  nameWithType: DataTable.Clone()
  fullName: System.Data.DataTable.Clone()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Clones the structure of the <xref href=&quot;System.Data.DataTable&quot;></xref>, including all <xref href=&quot;System.Data.DataTable&quot;></xref> schemas and constraints."
  remarks: "If these classes have been derived, the clone will also be of the same derived classes.       Clone creates a new <xref:System.Data.DataTable> with the same structure as the original <xref:System.Data.DataTable>, but does not copy any data (the new <xref:System.Data.DataTable> will not contain any `DataRows`). To copy both the structure and data into a new <xref:System.Data.DataTable>, use <xref:System.Data.DataTable.Copy%2A>."
  example:
  - "The following sample demonstrates how to update the structure and constraints of the destination table after you execute DataTable.Clone. The ClonedDataTable class will return a destination table and includes all the updating events. After the clone, structure changes in the source table won’t be reflected in the destination table. Specifically, this sample will:  \n  \n-   Update the changes of the columns in source table.  \n  \n-   Update the changes of the UniqueConstraint in source table.  \n  \n-   Update the changes of the ForeignKeyConstraint in source table.  \n  \n C# and Visual Basic projects with this code sample can be found on [Developer Code Samples](http://code.msdn.microsoft.com/site/search?f%5B0%5D.Type=SearchText&f%5B0%5D.Value=How%20to%20automically%20update%20the%20structure%20of%20a%20cloned%20DataTable).  \n  \n```  \nusing System;  \nusing System.Linq;  \nusing System.Data;  \nusing System.ComponentModel;  \n  \nclass Program {  \n   static void Main(string[] args) {  \n      DataTable courses = NewCourseDataTable();  \n      Console.WriteLine(\"This is the source table:\");  \n      WriteDataTable(courses);  \n  \n      ClonedDataTable clonedResult = new ClonedDataTable(courses);  \n      DataTable clonedCourses = clonedResult.DestinationTable;  \n      Console.WriteLine(\"This is the destination table:\");  \n      WriteDataTable(clonedCourses);  \n  \n      // Add the events of updating column collection into the source table.  \n      clonedResult.UpdateAddedColumn();  \n      clonedResult.UpdateDeletedColumn();  \n      // Add a DataColumn in source table.  \n      DataColumn columnCreidts = new DataColumn(\"Credits\", typeof(Int32));  \n      courses.Columns.Add(columnCreidts);  \n      Console.WriteLine(\"After add a column in source table, it's the result in the destination:\");  \n      WriteDataTable(clonedCourses);  \n  \n      // Add the event of updating UniqueConstraint into the source table.  \n      clonedResult.UpdateUniqueConstraint();  \n  \n      // Add the unique constraint in source table.  \n      UniqueConstraint uniqueConstraint = new UniqueConstraint(courses.Columns[\"CourseId\"]);  \n      courses.Constraints.Add(uniqueConstraint);  \n  \n      Console.WriteLine(@\"If we add the unique constraint in source table and then insert the duplicate   \nrows into the destination table, we will get the following error:\");  \n      InsertDuplicateData(clonedCourses);  \n      Console.WriteLine();  \n  \n      // Add the event of updating ForeignKeyConstraint into the source table.  \n      clonedResult.UpdateForeignKeyConstraint();  \n  \n      // Add the ForeignKeyConstraint into the source table.  \n      DataTable deparments = NewDeparmentDataTable();  \n      DataSet dataset = new DataSet();  \n  \n      dataset.Tables.Add(courses);  \n      dataset.Tables.Add(clonedCourses);  \n      dataset.Tables.Add(deparments);  \n  \n      ForeignKeyConstraint foreignKey = new ForeignKeyConstraint(deparments.Columns[\"DepartmentId\"], courses.Columns[\"DepartmentId\"]);  \n      courses.Constraints.Add(foreignKey);  \n  \n      Console.WriteLine(@\"If we add the foreign key constraint in source table and then insert a row   \nwithout the parent  into the destination table, we will get the following error:\");  \n      InsertNoParentRow(clonedCourses);  \n      Console.WriteLine();  \n  \n      Console.WriteLine(\"Please press any key to exit...\");  \n      Console.ReadKey();  \n   }  \n  \n   static private DataTable NewCourseDataTable() {  \n      DataTable newTable = new DataTable();  \n  \n      DataColumn[] columns ={   \n                                      new DataColumn(\"CourseId\", typeof(String)),  \n                                      new DataColumn(\"CourseName\",typeof(String)),                                        \n                                      new DataColumn(\"DepartmentId\", typeof(Int32))  \n                                  };  \n  \n      newTable.Columns.AddRange(columns);  \n  \n      newTable.Rows.Add(\"C1045\", \"Calculus\", 7);  \n      newTable.Rows.Add(\"C1061\", \"Physics\", 1);  \n      newTable.Rows.Add(\"C2021\", \"Composition\", 2);  \n      newTable.Rows.Add(\"C2042\", \"Literature\", 2);  \n  \n      return newTable;  \n   }  \n  \n   static private DataTable NewDeparmentDataTable() {  \n      DataTable newTable = new DataTable();  \n  \n      DataColumn[] columns ={   \n                                      new DataColumn(\"DepartmentId\", typeof(Int32)),  \n                                      new DataColumn(\"Name\",typeof(String)),  \n                                  };  \n  \n      newTable.Columns.AddRange(columns);  \n  \n      newTable.Rows.Add(1, \"Engineering\");  \n      newTable.Rows.Add(2, \"English\");  \n      newTable.Rows.Add(4, \"Economics\");  \n      newTable.Rows.Add(7, \"Mathematics\");  \n  \n      return newTable;  \n   }  \n  \n   static private void WriteDataTable(DataTable table) {  \n      if (table == null)  \n         return;  \n  \n      foreach (DataColumn column in table.Columns) {  \n         Console.Write(\"{0,-15}\", column.ColumnName);  \n      }  \n      Console.WriteLine();  \n  \n      foreach (DataRow row in table.Rows) {  \n         for (int i = 0; i < table.Columns.Count; i++)  \n            Console.Write(\"{0,-15}\", row[i].ToString());  \n         Console.WriteLine();  \n      }  \n  \n      Console.WriteLine();  \n   }  \n  \n   static private void InsertDuplicateData(DataTable table) {  \n      try {  \n         table.Rows.Add(\"C1045\", \"Calculus\", 7);  \n         table.Rows.Add(\"C1045\", \"Calculus\", 7);  \n      } catch (Exception e) {  \n         Console.WriteLine(\"\\\"\" + e.Message + \"\\\"\");  \n      }  \n   }  \n  \n   private static void InsertNoParentRow(DataTable table) {  \n      try {  \n         table.Rows.Add(\"C1061\", \"Physics\", 11);  \n      } catch (Exception e) {  \n         Console.WriteLine(\"\\\"\" + e.Message + \"\\\"\");  \n      }  \n   }  \n}  \n  \npublic class ClonedDataTable {  \n   private DataTable sourceTable;  \n   private DataTable destinationTable;  \n  \n   public ClonedDataTable(DataTable source) {  \n      sourceTable = source;  \n      // set the cloned result  \n      destinationTable = sourceTable.Clone();  \n   }  \n  \n   public void UpdateAddedColumn() {  \n      sourceTable.Columns.CollectionChanged += new CollectionChangeEventHandler(ColumnAdded);  \n   }  \n  \n   public void UpdateDeletedColumn() {  \n      sourceTable.Columns.CollectionChanged += new CollectionChangeEventHandler(ColumnDeleted);  \n   }  \n  \n   public void UpdateUniqueConstraint() {  \n      sourceTable.Constraints.CollectionChanged += new CollectionChangeEventHandler(UniqueConstraint_Changed);  \n   }  \n  \n   public void UpdateForeignKeyConstraint() {  \n      sourceTable.Constraints.CollectionChanged += new CollectionChangeEventHandler(ForeignKeyConstraint_Changed);  \n   }  \n  \n   // After the source table adds a column, the method will add the same column in the destination table.  \n   void ColumnAdded(object sender, System.ComponentModel.CollectionChangeEventArgs e) {  \n      if (e.Action == CollectionChangeAction.Add) {  \n         DataColumn column = e.Element as DataColumn;  \n  \n         if (column != null) {  \n            DataColumn newColumn = new DataColumn(column.ColumnName, column.DataType, column.Expression, column.ColumnMapping);  \n  \n            if (!destinationTable.Columns.Contains(newColumn.ColumnName))  \n               destinationTable.Columns.Add(newColumn);  \n         }  \n      }  \n   }  \n  \n   // After the source table deletes a column, the method will delete the same column in the destination table.  \n   void ColumnDeleted(object sender, CollectionChangeEventArgs e) {  \n      if (e.Action == CollectionChangeAction.Remove) {  \n         DataColumn column = e.Element as DataColumn;  \n  \n         if (column != null)  \n            if (destinationTable.Columns.Contains(column.ColumnName))  \n               destinationTable.Columns.Remove(column.ColumnName);  \n      }  \n   }  \n  \n   // After the source table changes the UniqueConstraint, this method changes the same UniqueConstraint in destination table.        \n   void UniqueConstraint_Changed(object sender, CollectionChangeEventArgs e) {  \n      UniqueConstraint constraint = e.Element as UniqueConstraint;  \n  \n      if (constraint == null)  \n         return;  \n  \n      String constraintName = constraint.ConstraintName;  \n  \n      if (e.Action == CollectionChangeAction.Add) {  \n         DataColumn[] columns = new DataColumn[constraint.Columns.Count()];  \n         Boolean isPrimaryKey = constraint.IsPrimaryKey;  \n  \n         // Get the columns used in new constraint from the destiantion table.  \n         for (Int32 i = 0; i < constraint.Columns.Count(); i++) {  \n            String columnName = constraint.Columns[i].ColumnName;  \n  \n            if (destinationTable.Columns.Contains(columnName))  \n               columns[i] = destinationTable.Columns[columnName];  \n            else  \n               return;  \n         }  \n  \n         UniqueConstraint newConstraint = new UniqueConstraint(constraintName, columns, isPrimaryKey);  \n  \n         if (!destinationTable.Constraints.Contains(constraintName))  \n            destinationTable.Constraints.Add(newConstraint);  \n  \n      } else if (e.Action == CollectionChangeAction.Remove)  \n         if (destinationTable.Constraints.Contains(constraintName))  \n            destinationTable.Constraints.Remove(constraintName);  \n   }  \n  \n   // After the source table changes the ForeignKeyConstraint, this method changes    \n   // the same ForeignKeyConstraint in the destination table.  \n   void ForeignKeyConstraint_Changed(object sender, CollectionChangeEventArgs e) {  \n      ForeignKeyConstraint constraint = e.Element as ForeignKeyConstraint;  \n  \n      if (constraint == null)  \n         return;  \n  \n      // If the source and destination are not in the same DataSet, don't change the ForeignKeyConstraint.  \n      if (sourceTable.DataSet != destinationTable.DataSet)  \n         return;  \n  \n      String constraintName = constraint.ConstraintName;  \n  \n      if (e.Action == CollectionChangeAction.Add) {  \n         DataColumn[] columns = new DataColumn[constraint.Columns.Count()];  \n         DataColumn[] parentColumns = constraint.RelatedColumns;  \n  \n         // Get the columns used in new constraint from the destination table.  \n         for (int i = 0; i < constraint.Columns.Count(); i++) {  \n            String columnName = constraint.Columns[i].ColumnName;  \n  \n            if (destinationTable.Columns.Contains(columnName))  \n               columns[i] = destinationTable.Columns[columnName];  \n            else  \n               return;  \n         }  \n  \n         ForeignKeyConstraint newConstraint = new ForeignKeyConstraint(constraintName, parentColumns, columns);  \n         newConstraint.AcceptRejectRule = constraint.AcceptRejectRule;  \n         newConstraint.DeleteRule = constraint.DeleteRule;  \n         newConstraint.UpdateRule = constraint.UpdateRule;  \n  \n         if (!destinationTable.Constraints.Contains(constraintName))  \n            destinationTable.Constraints.Add(newConstraint);  \n      } else if (e.Action == CollectionChangeAction.Remove)  \n         if (destinationTable.Constraints.Contains(constraintName))  \n            destinationTable.Constraints.Remove(constraintName);  \n   }  \n  \n   // return the destination table.  \n   public DataTable DestinationTable {  \n      get { return destinationTable; }  \n   }  \n}  \n```  \n  \n This sample shows how to modify data in a DataTable and update the data source.  \n  \n First, create a database:  \n  \n```  \nUSE [master]  \nGO  \n  \nCREATE DATABASE [MySchool]   \n  \nGO  \n  \nUSE [MySchool]  \nGO  \n  \nSET ANSI_NULLS ON  \nGO  \nSET QUOTED_IDENTIFIER ON  \nGO  \nCREATE TABLE [dbo].[Course](~/add/includes/ajax-current-ext-md.md [nvarchar](10) NOT NULL,  \n[Year] [smallint] NOT NULL,  \n[Title] [nvarchar](100) NOT NULL,  \n[Credits] [int] NOT NULL,  \n[DepartmentID] [int] NOT NULL,  \n CONSTRAINT [PK_Course] PRIMARY KEY CLUSTERED   \n(  \n[CourseID] ASC,  \n[Year] ASC  \n)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]  \n  \nGO  \n  \nSET ANSI_NULLS ON  \nGO  \nSET QUOTED_IDENTIFIER ON  \nGO  \nCREATE TABLE [dbo].[Department](~/add/includes/ajax-current-ext-md.md [int] IDENTITY(1,1) NOT NULL,  \n[Name] [nvarchar](50) NOT NULL,  \n[Budget] [money] NOT NULL,  \n[StartDate] [datetime] NOT NULL,  \n[Administrator] [int] NULL,  \n CONSTRAINT [PK_Department] PRIMARY KEY CLUSTERED   \n(  \n[DepartmentID] ASC  \n)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]  \n  \nGO  \n  \nINSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C1045', 2012, N'Calculus', 4, 7)  \nINSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C1061', 2012, N'Physics', 4, 1)  \nINSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C2021', 2012, N'Composition', 3, 2)  \nINSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C2042', 2012, N'Literature', 4, 2)  \n  \nSET IDENTITY_INSERT [dbo].[Department] ON   \n  \nINSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (1, N'Engineering', 350000.0000, CAST(0x0000999C00000000 AS DateTime), 2)  \nINSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (2, N'English', 120000.0000, CAST(0x0000999C00000000 AS DateTime), 6)  \nINSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (4, N'Economics', 200000.0000, CAST(0x0000999C00000000 AS DateTime), 4)  \nINSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (7, N'Mathematics', 250024.0000, CAST(0x0000999C00000000 AS DateTime), 3)  \nSET IDENTITY_INSERT [dbo].[Department] OFF  \n  \nALTER TABLE [dbo].[Course]  WITH CHECK ADD  CONSTRAINT [FK_Course_Department] FOREIGN KEY([DepartmentID])  \nREFERENCES [dbo].[Department] ([DepartmentID])  \nGO  \nALTER TABLE [dbo].[Course] CHECK CONSTRAINT [FK_Course_Department]  \nGO  \n```  \n  \n You can now compile and run the sample. [How to modify data in DataTable and update to the data source](http://code.msdn.microsoft.com/How-to-modify-data-in-c68d35f4) has Visual Basic and C# projects of this sample.  \n  \n```  \nusing System;  \nusing System.Data;  \nusing System.Data.SqlClient;  \n  \nclass Program {  \n   static void Main(string[] args) {  \n  \n   string MySchoolConnectionString = \"Data Source=(local);Initial Catalog=MySchool;Integrated Security=True\";  \n  \n      // Get Data  \n      String selectString =  \n       @\"Select [CourseID],[Year],[Title],[Credits],[DepartmentID] From [dbo].[Course];  \n               Select [DepartmentID],[Name],[Budget],[StartDate],[Administrator] From [dbo].[Department] \";  \n  \n      DataSet dataSet = new DataSet();  \n      DataTable course = dataSet.Tables.Add(\"Course\");  \n      DataTable department = dataSet.Tables.Add(\"Department\");  \n  \n      Console.WriteLine(\"Get data from database:\");  \n      GetDataTables(MySchoolConnectionString, selectString, dataSet, course, department);  \n      Console.WriteLine();  \n  \n      // Use DataTable Edits to edit the data  \n      String updateString =  \n              @\"Update [dbo].[Course] Set [Credits]=@Credits Where [CourseID]=@CourseID;\";  \n  \n      course.ColumnChanged += OnColumnChanged;  \n  \n      // Set the Credits of first row is negative value, and set the Credits of second row is plus.  \n      ChangeCredits(course, course.Rows[0], -1);  \n      ChangeCredits(course, course.Rows[1], 11);  \n  \n      UpdateDataTables(MySchoolConnectionString, updateString, dataSet, \"Course\",  \n          new SqlParameter(\"@CourseID\", SqlDbType.NVarChar, 10, \"CourseID\"),  \n          new SqlParameter(\"@Credits\", SqlDbType.Int, 4, \"Credits\"));  \n      Console.WriteLine(\"Only the Credits of second row is changed.\");  \n      ShowDataTable(course);  \n      Console.WriteLine();  \n  \n      // Delete and Remove from DataTable  \n      // Create the foreign key constraint, and set the DeleteRule with Cascade.  \n      ForeignKeyConstraint courseDepartFK = new ForeignKeyConstraint(\"CourseDepartFK\", department.Columns[\"DepartmentID\"], course.Columns[\"DepartmentID\"]);  \n      courseDepartFK.DeleteRule = Rule.Cascade;  \n      courseDepartFK.UpdateRule = Rule.Cascade;  \n      courseDepartFK.AcceptRejectRule = AcceptRejectRule.None;  \n      course.Constraints.Add(courseDepartFK);  \n  \n      String deleteString = @\"Delete From [dbo].[Course] Where [CourseID]=@CourseID;\";  \n  \n      department.Rows[0].Delete();  \n      Console.WriteLine(\"If One row in Department table is deleted, the related rows in Course table will also be deleted.\");  \n      Console.WriteLine(\"Department DataTable:\");  \n      ShowDataTable(department);  \n      Console.WriteLine();  \n      Console.WriteLine(\"Course DataTable:\");  \n      ShowDataTable(course);  \n      Console.WriteLine();  \n      // Update the delete operation  \n      DeleteDataTables(MySchoolConnectionString, deleteString, dataSet, \"Course\",  \n          new SqlParameter(\"@CourseID\", SqlDbType.NVarChar, 10, \"CourseID\"));  \n      Console.WriteLine(\"After delete operation:\");  \n      Console.WriteLine(\"Course DataTable:\");  \n      ShowDataTable(course);  \n      Console.WriteLine();  \n  \n      course.Rows.RemoveAt(0);  \n      Console.WriteLine(\"Now we remove one row from Course:\");  \n      ShowDataTable(course);  \n      DeleteDataTables(MySchoolConnectionString, deleteString, dataSet, \"Course\",  \n          new SqlParameter(\"@CourseID\", SqlDbType.NVarChar, 10, \"CourseID\"));  \n   }  \n  \n   // Use SqlDataAdapter to get data.  \n   private static void GetDataTables(String connectionString, String selectString,  \n       DataSet dataSet, params DataTable[] tables) {  \n      using (SqlDataAdapter adapter = new SqlDataAdapter()) {  \n         adapter.SelectCommand = new SqlCommand(selectString);  \n         adapter.SelectCommand.Connection = new SqlConnection(connectionString);  \n  \n         adapter.Fill(0, 0, tables);  \n  \n         foreach (DataTable table in dataSet.Tables) {  \n            Console.WriteLine(\"Data in {0}:\", table.TableName);  \n            ShowDataTable(table);  \n            Console.WriteLine();  \n         }  \n      }  \n   }  \n  \n   // Use SqlDataAdapter to update the updata operation.  \n   private static void UpdateDataTables(String connectionString, String updateString,  \n       DataSet dataSet, String tableName, params SqlParameter[] parameters) {  \n      using (SqlDataAdapter adapter = new SqlDataAdapter()) {  \n         adapter.UpdateCommand = new SqlCommand(updateString);  \n         adapter.UpdateCommand.Parameters.AddRange(parameters);  \n         adapter.UpdateCommand.Connection = new SqlConnection(connectionString);  \n  \n         adapter.Update(dataSet, tableName);  \n      }  \n   }  \n  \n   // Use SqlDataAdapter to update delete operation.  \n   private static void DeleteDataTables(String connectionString, String deleteString,  \n       DataSet dataSet, String tableName, params SqlParameter[] parameters) {  \n      using (SqlDataAdapter adapter = new SqlDataAdapter()) {  \n         adapter.DeleteCommand = new SqlCommand(deleteString);  \n         adapter.DeleteCommand.Parameters.AddRange(parameters);  \n         adapter.DeleteCommand.Connection = new SqlConnection(connectionString);  \n  \n         adapter.Update(dataSet, tableName);  \n      }  \n   }  \n  \n   // Use DataTable Edits to modify the data.  \n   private static void ChangeCredits(DataTable table, DataRow row, Int32 credits) {  \n      row.BeginEdit();  \n      Console.WriteLine(\"We change row {0}\", table.Rows.IndexOf(row));  \n      row[\"Credits\"] = credits;  \n      row.EndEdit();  \n   }  \n  \n   // The method will be invoked when the value in DataTable is changed.  \n   private static void OnColumnChanged(Object sender, DataColumnChangeEventArgs args) {  \n      Int32 credits = 0;  \n      // If Credits is changed and the value is negative, we'll cancel the edit.  \n      if ((args.Column.ColumnName == \"Credits\") &&  \n          (!Int32.TryParse(args.ProposedValue.ToString(), out credits) || credits < 0)) {  \n         Console.WriteLine(\"The value of Credits is invalid. Edit canceled.\");  \n         args.Row.CancelEdit();  \n      }  \n   }  \n  \n   // Display the column and value of DataTable.  \n   private static void ShowDataTable(DataTable table) {  \n      foreach (DataColumn col in table.Columns) {  \n         Console.Write(\"{0,-14}\", col.ColumnName);  \n      }  \n      Console.WriteLine(\"{0,-14}\", \"RowState\");  \n  \n      foreach (DataRow row in table.Rows) {  \n         if (row.RowState == DataRowState.Deleted) {  \n            foreach (DataColumn col in table.Columns) {  \n               if (col.DataType.Equals(typeof(DateTime)))  \n                  Console.Write(\"{0,-14:d}\", row[col, DataRowVersion.Original]);  \n               else if (col.DataType.Equals(typeof(Decimal)))  \n                  Console.Write(\"{0,-14:C}\", row[col, DataRowVersion.Original]);  \n               else  \n                  Console.Write(\"{0,-14}\", row[col, DataRowVersion.Original]);  \n            }  \n         }  \n         else {  \n            foreach (DataColumn col in table.Columns) {  \n               if (col.DataType.Equals(typeof(DateTime)))  \n                  Console.Write(\"{0,-14:d}\", row[col]);  \n               else if (col.DataType.Equals(typeof(Decimal)))  \n                  Console.Write(\"{0,-14:C}\", row[col]);  \n               else  \n                  Console.Write(\"{0,-14}\", row[col]);  \n            }  \n         }  \n         Console.WriteLine(\"{0,-14}\", row.RowState);  \n      }  \n   }  \n}  \n```"
  syntax:
    content: public virtual System.Data.DataTable Clone ();
    parameters: []
    return:
      type: System.Data.DataTable
      description: "A new <xref href=&quot;System.Data.DataTable&quot;></xref> with the same schema as the current <xref href=&quot;System.Data.DataTable&quot;></xref>."
  overload: System.Data.DataTable.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.ColumnChanged
  id: ColumnChanged
  parent: System.Data.DataTable
  langs:
  - csharp
  name: ColumnChanged
  nameWithType: DataTable.ColumnChanged
  fullName: System.Data.DataTable.ColumnChanged
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Occurs after a value has been changed for the specified <xref href=&quot;System.Data.DataColumn&quot;></xref> in a <xref href=&quot;System.Data.DataRow&quot;></xref>."
  remarks: "For more information, see [Handling DataTable Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - >-
    [!code-vb[Classic WebData DataTable.ColumnChanged Example#1](~/add/codesnippet/visualbasic/e-system.data.datatable._4_1.vb)]
     [!code-cs[Classic WebData DataTable.ColumnChanged Example#1](~/add/codesnippet/csharp/e-system.data.datatable._4_1.cs)]
  syntax:
    content: public event System.Data.DataColumnChangeEventHandler ColumnChanged;
    return:
      type: System.Data.DataColumnChangeEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.ColumnChanging
  id: ColumnChanging
  parent: System.Data.DataTable
  langs:
  - csharp
  name: ColumnChanging
  nameWithType: DataTable.ColumnChanging
  fullName: System.Data.DataTable.ColumnChanging
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Occurs when a value is being changed for the specified <xref href=&quot;System.Data.DataColumn&quot;></xref> in a <xref href=&quot;System.Data.DataRow&quot;></xref>."
  remarks: "For more information, see [Handling DataTable Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - >-
    [!code-cs[Classic WebData DataTable.ColumnChanging Example#1](~/add/codesnippet/csharp/e-system.data.datatable._5_1.cs)]
     [!code-vb[Classic WebData DataTable.ColumnChanging Example#1](~/add/codesnippet/visualbasic/e-system.data.datatable._5_1.vb)]
  syntax:
    content: public event System.Data.DataColumnChangeEventHandler ColumnChanging;
    return:
      type: System.Data.DataColumnChangeEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Columns
  id: Columns
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Columns
  nameWithType: DataTable.Columns
  fullName: System.Data.DataTable.Columns
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Gets the collection of columns that belong to this table."
  remarks: "The <xref:System.Data.DataColumnCollection> determines the schema of a table by defining the data type of each column."
  example:
  - "The following example prints each value of each row in a table using the Columns property.  \n  \n [!code-vb[Classic WebData DataTable.Columns Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._12_1.vb)]\n [!code-cs[Classic WebData DataTable.Columns Example#1](~/add/codesnippet/csharp/p-system.data.datatable._12_1.cs)]"
  syntax:
    content: public System.Data.DataColumnCollection Columns { get; }
    return:
      type: System.Data.DataColumnCollection
      description: "A <xref href=&quot;System.Data.DataColumnCollection&quot;></xref> that contains the collection of <xref href=&quot;System.Data.DataColumn&quot;></xref> objects for the table. An empty collection is returned if no <xref href=&quot;System.Data.DataColumn&quot;></xref> objects exist."
  overload: System.Data.DataTable.Columns*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Compute(System.String,System.String)
  id: Compute(System.String,System.String)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Compute(String,String)
  nameWithType: DataTable.Compute(String,String)
  fullName: System.Data.DataTable.Compute(String,String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Computes the given expression on the current rows that pass the filter criteria."
  remarks: "The `expression` parameter requires an aggregate function. For example, the following is a legal expression:       `Count(Quantity)`       But this expression is not:       `Sum (Quantity * UnitPrice)`       If you must perform an operation on two or more columns, you should create a <xref:System.Data.DataColumn>, set its <xref:System.Data.DataColumn.Expression%2A> property to an appropriate expression, and use an aggregate expression on the resulting column. In that case, given a <xref:System.Data.DataColumn> with the name &quot;total&quot;, and the <xref:System.Data.DataColumn.Expression%2A> property set to this:       `&quot;Quantity * UnitPrice&quot;`       The expression argument for the Compute method would then be this:       `Sum(total)`       The second parameter, `filter`, determines which rows are used in the expression. For example, if the table contains a date column named &quot;colDate&quot;, you could limit the rows with the following expression:       `colDate > 1/1/99 AND colDate < 17/1/99`       For rules on creating expressions for both parameters, see the <xref:System.Data.DataColumn.Expression%2A?displayProperty=fullName> property."
  example:
  - "The following example sums the values of a column named \"Total\", for the salesperson whose identification number is five.  \n  \n [!code-cs[Classic WebData DataTable.Compute Example#1](~/add/codesnippet/csharp/m-system.data.datatable._24_1.cs)]\n [!code-vb[Classic WebData DataTable.Compute Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._24_1.vb)]"
  syntax:
    content: public object Compute (string expression, string filter);
    parameters:
    - id: expression
      type: System.String
      description: "The expression to compute."
    - id: filter
      type: System.String
      description: "The filter to limit the rows that evaluate in the expression."
    return:
      type: System.Object
      description: "An <xref:System.Object>, set to the result of the computation. If the expression evaluates to null, the return value will be <xref href=&quot;System.DBNull.Value&quot;></xref>."
  overload: System.Data.DataTable.Compute*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Constraints
  id: Constraints
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Constraints
  nameWithType: DataTable.Constraints
  fullName: System.Data.DataTable.Constraints
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Gets the collection of constraints maintained by this table."
  remarks: "A <xref:System.Data.ForeignKeyConstraint> restricts the action performed when a value in a column (or columns) is either deleted or updated. Such a constraint is intended to be used with primary key columns. In a parent/child relationship between two tables, deleting a value from the parent table can affect the child rows in one of the following ways.      -   The child rows can also be deleted (a cascading action).      -   The values in the child column (or columns) can be set to null values.      -   The values in the child column (or columns) can be set to default values.      -   An exception can be generated.       A <xref:System.Data.UniqueConstraint> becomes active when attempting to set a value in a primary key to a non-unique value."
  example:
  - "The following example adds a <xref:System.Data.ForeignKeyConstraint> to the collection of constraints.  \n  \n [!code-vb[Classic WebData DataTable.Constraints Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._3_1.vb)]\n [!code-cs[Classic WebData DataTable.Constraints Example#1](~/add/codesnippet/csharp/p-system.data.datatable._3_1.cs)]"
  syntax:
    content: public System.Data.ConstraintCollection Constraints { get; }
    return:
      type: System.Data.ConstraintCollection
      description: "A <xref href=&quot;System.Data.ConstraintCollection&quot;></xref> that contains the collection of <xref href=&quot;System.Data.Constraint&quot;></xref> objects for the table. An empty collection is returned if no <xref href=&quot;System.Data.Constraint&quot;></xref> objects exist."
  overload: System.Data.DataTable.Constraints*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Copy
  id: Copy
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Copy()
  nameWithType: DataTable.Copy()
  fullName: System.Data.DataTable.Copy()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Copies both the structure and data for this <xref href=&quot;System.Data.DataTable&quot;></xref>."
  remarks: ''
  example:
  - "The following example uses the Copy method to create a copy of the original <xref:System.Data.DataTable>. The namespace name is not retained if it is inherited from a parent <xref:System.Data.DataTable> or <xref:System.Data.DataSet>.  \n  \n [!code-cs[Classic WebData DataTable.Copy Example#1](~/add/codesnippet/csharp/m-system.data.datatable._5_1.cs)]\n [!code-vb[Classic WebData DataTable.Copy Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._5_1.vb)]"
  syntax:
    content: public System.Data.DataTable Copy ();
    parameters: []
    return:
      type: System.Data.DataTable
      description: "A new <xref href=&quot;System.Data.DataTable&quot;></xref> with the same structure (table schemas and constraints) and data as this <xref href=&quot;System.Data.DataTable&quot;></xref>.       If these classes have been derived, the copy will also be of the same derived classes.       Copy creates a new <xref href=&quot;System.Data.DataTable&quot;></xref> with the same structure and data as the original <xref href=&quot;System.Data.DataTable&quot;></xref>. To copy the structure to a new <xref href=&quot;System.Data.DataTable&quot;></xref>, but not the data, use <xref:System.Data.DataTable.Clone*>."
  overload: System.Data.DataTable.Copy*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.CreateDataReader
  id: CreateDataReader
  parent: System.Data.DataTable
  langs:
  - csharp
  name: CreateDataReader()
  nameWithType: DataTable.CreateDataReader()
  fullName: System.Data.DataTable.CreateDataReader()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Returns a <xref href=&quot;System.Data.DataTableReader&quot;></xref> corresponding to the data within this <xref href=&quot;System.Data.DataTable&quot;></xref>."
  remarks: ''
  example:
  - "The following console application creates a <xref:System.Data.DataTable> instance. The example then passes the filled <xref:System.Data.DataTable>to a procedure that calls the CreateDataReader method, which iterates through the results contained within the <xref:System.Data.DataTableReader>.  \n  \n [!code-vb[DataWorks DataTable.CreateDataReader#1](~/add/codesnippet/visualbasic/m-system.data.datatable._9_1.vb)]\n [!code-cs[DataWorks DataTable.CreateDataReader#1](~/add/codesnippet/csharp/m-system.data.datatable._9_1.cs)]  \n  \n The example displays the following output in the console window:  \n  \n `1 Mary`  \n  \n `2 Andy`  \n  \n `3 Peter`  \n  \n `4 Russ`"
  syntax:
    content: public System.Data.DataTableReader CreateDataReader ();
    parameters: []
    return:
      type: System.Data.DataTableReader
      description: "A <xref href=&quot;System.Data.DataTableReader&quot;></xref> containing one result set, corresponding to the source <xref href=&quot;System.Data.DataTable&quot;></xref> instance."
  overload: System.Data.DataTable.CreateDataReader*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.CreateInstance
  id: CreateInstance
  parent: System.Data.DataTable
  langs:
  - csharp
  name: CreateInstance()
  nameWithType: DataTable.CreateInstance()
  fullName: System.Data.DataTable.CreateInstance()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Creates a new instance of <xref href=&quot;System.Data.DataTable&quot;></xref>."
  syntax:
    content: protected virtual System.Data.DataTable CreateInstance ();
    parameters: []
    return:
      type: System.Data.DataTable
      description: "The new expression."
  overload: System.Data.DataTable.CreateInstance*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.DataSet
  id: DataSet
  parent: System.Data.DataTable
  langs:
  - csharp
  name: DataSet
  nameWithType: DataTable.DataSet
  fullName: System.Data.DataTable.DataSet
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Gets the <xref href=&quot;System.Data.DataSet&quot;></xref> to which this table belongs."
  remarks: "If a control is data bound to a <xref:System.Data.DataTable>, and the table belongs to a <xref:System.Data.DataSet>, you can get to the <xref:System.Data.DataSet> through this property."
  example:
  - "The following example returns the parent <xref:System.Data.DataSet> of a given table through the DataSet property.  \n  \n [!code-vb[Classic WebData DataTable.DataSet Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._10_1.vb)]\n [!code-cs[Classic WebData DataTable.DataSet Example#1](~/add/codesnippet/csharp/p-system.data.datatable._10_1.cs)]"
  syntax:
    content: public System.Data.DataSet DataSet { get; }
    return:
      type: System.Data.DataSet
      description: "The <xref href=&quot;System.Data.DataSet&quot;></xref> to which this table belongs."
  overload: System.Data.DataTable.DataSet*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.DefaultView
  id: DefaultView
  parent: System.Data.DataTable
  langs:
  - csharp
  name: DefaultView
  nameWithType: DataTable.DefaultView
  fullName: System.Data.DataTable.DefaultView
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Gets a customized view of the table that may include a filtered view, or a cursor position."
  remarks: "The DefaultView property returns a <xref:System.Data.DataView> you can use to sort, filter, and search a <xref:System.Data.DataTable>."
  example:
  - "The following example sets a property of the <xref:System.Data.DataTable> object's <xref:System.Data.DataView> through the DefaultView property. The example also shows the binding of a <xref:System.Windows.Forms.DataGridView> control to a <xref:System.Data.DataTable> named \"Suppliers\" that includes a column named \"CompanyName.\"  \n  \n [!code-cs[Classic WebData DataTable.DefaultView Example#1](~/add/codesnippet/csharp/p-system.data.datatable._11_1.cs)]\n [!code-vb[Classic WebData DataTable.DefaultView Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._11_1.vb)]"
  syntax:
    content: public System.Data.DataView DefaultView { get; }
    return:
      type: System.Data.DataView
      description: "The <xref href=&quot;System.Data.DataView&quot;></xref> associated with the <xref href=&quot;System.Data.DataTable&quot;></xref>."
  overload: System.Data.DataTable.DefaultView*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.DisplayExpression
  id: DisplayExpression
  parent: System.Data.DataTable
  langs:
  - csharp
  name: DisplayExpression
  nameWithType: DataTable.DisplayExpression
  fullName: System.Data.DataTable.DisplayExpression
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Gets or sets the expression that returns a value used to represent this table in the user interface. The <xref uid=&quot;langword_csharp_DisplayExpression&quot; name=&quot;DisplayExpression&quot; href=&quot;&quot;></xref> property lets you display the name of this table in a user interface."
  syntax:
    content: public string DisplayExpression { get; set; }
    return:
      type: System.String
      description: "A display string."
  overload: System.Data.DataTable.DisplayExpression*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.EndInit
  id: EndInit
  parent: System.Data.DataTable
  langs:
  - csharp
  name: EndInit()
  nameWithType: DataTable.EndInit()
  fullName: System.Data.DataTable.EndInit()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ends the initialization of a <xref href=&quot;System.Data.DataTable&quot;></xref> that is used on a form or used by another component. The initialization occurs at run time."
  remarks: "The Visual Studio .NET design environment uses this method to end the initialization of a component that is used on a form or used by another component. The <xref:System.Data.DataTable.BeginInit%2A> method starts the initialization. Using the <xref:System.Data.DataTable.BeginInit%2A> and EndInit methods prevents the control from being used before it is fully initialized."
  syntax:
    content: public virtual void EndInit ();
    parameters: []
  overload: System.Data.DataTable.EndInit*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.EndLoadData
  id: EndLoadData
  parent: System.Data.DataTable
  langs:
  - csharp
  name: EndLoadData()
  nameWithType: DataTable.EndLoadData()
  fullName: System.Data.DataTable.EndLoadData()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Turns on notifications, index maintenance, and constraints after loading data."
  remarks: "Use EndLoadData in conjunction with <xref:System.Data.DataTable.LoadDataRow%2A> and <xref:System.Data.DataTable.BeginLoadData%2A>."
  syntax:
    content: public void EndLoadData ();
    parameters: []
  overload: System.Data.DataTable.EndLoadData*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.ExtendedProperties
  id: ExtendedProperties
  parent: System.Data.DataTable
  langs:
  - csharp
  name: ExtendedProperties
  nameWithType: DataTable.ExtendedProperties
  fullName: System.Data.DataTable.ExtendedProperties
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Gets the collection of customized user information."
  remarks: "Use the ExtendedProperties to add custom information to a <xref:System.Data.DataTable>. Add information with the `Add` method. Retrieve information with the `Item` method.       Extended properties must be of type <xref:System.String>. Properties that are not of type String are not persisted when the <xref:System.Data.DataTable> is written as XML."
  example:
  - "The following example adds a timestamp value to the <xref:System.Data.DataTable> through the ExtendedProperties property.  \n  \n [!code-cs[Classic WebData DataTable.ExtendedProperties Example#1](~/add/codesnippet/csharp/p-system.data.datatable._7_1.cs)]\n [!code-vb[Classic WebData DataTable.ExtendedProperties Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._7_1.vb)]"
  syntax:
    content: public System.Data.PropertyCollection ExtendedProperties { get; }
    return:
      type: System.Data.PropertyCollection
      description: "A <xref href=&quot;System.Data.PropertyCollection&quot;></xref> that contains custom user information."
  overload: System.Data.DataTable.ExtendedProperties*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.fInitInProgress
  id: fInitInProgress
  parent: System.Data.DataTable
  langs:
  - csharp
  name: fInitInProgress
  nameWithType: DataTable.fInitInProgress
  fullName: System.Data.DataTable.fInitInProgress
  type: Field
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Checks whether initialization is in progress. The initialization occurs at run time."
  syntax:
    content: protected bool fInitInProgress;
    return:
      type: System.Boolean
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.GetChanges
  id: GetChanges
  parent: System.Data.DataTable
  langs:
  - csharp
  name: GetChanges()
  nameWithType: DataTable.GetChanges()
  fullName: System.Data.DataTable.GetChanges()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Gets a copy of the <xref href=&quot;System.Data.DataTable&quot;></xref> that contains all changes made to it since it was loaded or <xref:System.Data.DataTable.AcceptChanges*> was last called."
  remarks: "Creates a new <xref:System.Data.DataSet> containing a copy of all rows in the original <xref:System.Data.DataSet> that have pending changes. Relationship constraints can cause additional unchanged rows to be added to the new <xref:System.Data.DataSet> if the unchanged rows contain primary keys corresponding to foreign keys in the changed rows. The method returns `null` (`Nothing` in Visual Basic) if there are no rows in the original <xref:System.Data.DataSet> with pending changes."
  example:
  - >-
    [!code-cs[Classic WebData DataTable.GetChanges Example#1](~/add/codesnippet/csharp/m-system.data.datatable._25_1.cs)]
     [!code-vb[Classic WebData DataTable.GetChanges Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._25_1.vb)]
  syntax:
    content: public System.Data.DataTable GetChanges ();
    parameters: []
    return:
      type: System.Data.DataTable
      description: "A copy of the changes from this <xref href=&quot;System.Data.DataTable&quot;></xref>, or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> if no changes are found."
  overload: System.Data.DataTable.GetChanges*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.GetChanges(System.Data.DataRowState)
  id: GetChanges(System.Data.DataRowState)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: GetChanges(DataRowState)
  nameWithType: DataTable.GetChanges(DataRowState)
  fullName: System.Data.DataTable.GetChanges(DataRowState)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Gets a copy of the <xref href=&quot;System.Data.DataTable&quot;></xref> containing all changes made to it since it was last loaded, or since <xref:System.Data.DataTable.AcceptChanges*> was called, filtered by <xref href=&quot;System.Data.DataRowState&quot;></xref>."
  remarks: "The <xref:System.Data.DataTable.GetChanges%2A> method is used to produce a second <xref:System.Data.DataTable> object that contains only the changes introduced into the original. Use the `rowStates` argument to specify the type of changes the new object should include.       Relationship constraints may cause unchanged parent rows to be included."
  example:
  - >-
    [!code-cs[Classic WebData DataTable.GetChanges1 Example#1](~/add/codesnippet/csharp/m-system.data.datatable._15_1.cs)]
     [!code-vb[Classic WebData DataTable.GetChanges1 Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._15_1.vb)]
  syntax:
    content: public System.Data.DataTable GetChanges (System.Data.DataRowState rowStates);
    parameters:
    - id: rowStates
      type: System.Data.DataRowState
      description: "One of the <xref href=&quot;System.Data.DataRowState&quot;></xref> values."
    return:
      type: System.Data.DataTable
      description: "A filtered copy of the <xref href=&quot;System.Data.DataTable&quot;></xref> that can have actions performed on it, and later be merged back in the <xref href=&quot;System.Data.DataTable&quot;></xref> using <xref:System.Data.DataSet.Merge*>. If no rows of the desired <xref href=&quot;System.Data.DataRowState&quot;></xref> are found, the method returns <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Data.DataTable.GetChanges*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.GetDataTableSchema(System.Xml.Schema.XmlSchemaSet)
  id: GetDataTableSchema(System.Xml.Schema.XmlSchemaSet)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: GetDataTableSchema(XmlSchemaSet)
  nameWithType: DataTable.GetDataTableSchema(XmlSchemaSet)
  fullName: System.Data.DataTable.GetDataTableSchema(XmlSchemaSet)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "This method returns an <xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;></xref> instance containing the Web Services Description Language (WSDL) that describes the <xref href=&quot;System.Data.DataTable&quot;></xref> for Web Services."
  syntax:
    content: public static System.Xml.Schema.XmlSchemaComplexType GetDataTableSchema (System.Xml.Schema.XmlSchemaSet schemaSet);
    parameters:
    - id: schemaSet
      type: System.Xml.Schema.XmlSchemaSet
      description: "An <xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;></xref> instance."
    return:
      type: System.Xml.Schema.XmlSchemaComplexType
      description: "The <xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;></xref> instance."
  overload: System.Data.DataTable.GetDataTableSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.GetErrors
  id: GetErrors
  parent: System.Data.DataTable
  langs:
  - csharp
  name: GetErrors()
  nameWithType: DataTable.GetErrors()
  fullName: System.Data.DataTable.GetErrors()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Gets an array of <xref href=&quot;System.Data.DataRow&quot;></xref> objects that contain errors."
  remarks: "Returns the list of <xref:System.Data.DataRow> objects that have <xref:System.Data.DataRow.RowError%2A> set. For example, errors can occur when calling <xref:System.Data.Common.DataAdapter.Update%2A> with <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> set to **true**. Do not invoke <xref:System.Data.DataTable.AcceptChanges%2A> on the <xref:System.Data.DataTable> until you resolve all errors and resubmit the <xref:System.Data.DataSet> for updating."
  example:
  - "The following example uses the GetErrors method to return an array of <xref:System.Data.DataRow> objects that have errors.  \n  \n [!code-vb[Classic WebData DataTable.GetErrors Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._18_1.vb)]\n [!code-cs[Classic WebData DataTable.GetErrors Example#1](~/add/codesnippet/csharp/m-system.data.datatable._18_1.cs)]"
  syntax:
    content: public System.Data.DataRow[] GetErrors ();
    parameters: []
    return:
      type: System.Data.DataRow[]
      description: "An array of <xref href=&quot;System.Data.DataRow&quot;></xref> objects that have errors."
  overload: System.Data.DataTable.GetErrors*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: DataTable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Data.DataTable.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Populates a serialization information object with the data needed to serialize the <xref href=&quot;System.Data.DataTable&quot;></xref>."
  syntax:
    content: public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "A <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;></xref> object that holds the serialized data associated with the <xref href=&quot;System.Data.DataTable&quot;></xref>."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "A <xref:System.Runtime.Serialization.StreamingContext> object that contains the source and destination of the serialized stream associated with the <xref href=&quot;System.Data.DataTable&quot;></xref>."
  overload: System.Data.DataTable.GetObjectData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>info</code> parameter is a null reference (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> in Visual Basic)."
  platform:
  - net462
- uid: System.Data.DataTable.GetRowType
  id: GetRowType
  parent: System.Data.DataTable
  langs:
  - csharp
  name: GetRowType()
  nameWithType: DataTable.GetRowType()
  fullName: System.Data.DataTable.GetRowType()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Gets the row type."
  syntax:
    content: protected virtual Type GetRowType ();
    parameters: []
    return:
      type: System.Type
      description: "Returns the type of the <xref href=&quot;System.Data.DataRow&quot;></xref>."
  overload: System.Data.DataTable.GetRowType*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.GetSchema
  id: GetSchema
  parent: System.Data.DataTable
  langs:
  - csharp
  name: GetSchema()
  nameWithType: DataTable.GetSchema()
  fullName: System.Data.DataTable.GetSchema()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "For a description of this member, see &lt;xref:System.Xml.Serialization.IXmlSerializable.GetSchema%2A?displayProperty=fullName&gt;."
  syntax:
    content: protected virtual System.Xml.Schema.XmlSchema GetSchema ();
    parameters: []
    return:
      type: System.Xml.Schema.XmlSchema
      description: "An <xref:System.Xml.Schema.XmlSchema> that describes the XML representation of the object that is produced by the <xref:System.Xml.Serialization.IXmlSerializable.WriteXml*> method and consumed by the <xref:System.Xml.Serialization.IXmlSerializable.ReadXml*> method."
  overload: System.Data.DataTable.GetSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.HasErrors
  id: HasErrors
  parent: System.Data.DataTable
  langs:
  - csharp
  name: HasErrors
  nameWithType: DataTable.HasErrors
  fullName: System.Data.DataTable.HasErrors
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Gets a value indicating whether there are errors in any of the rows in any of the tables of the <xref href=&quot;System.Data.DataSet&quot;></xref> to which the table belongs."
  remarks: "As users work on a set of data contained in a <xref:System.Data.DataTable>, you can mark each change with an error if the change causes some validation failure. You can mark an entire <xref:System.Data.DataRow> with an error message using the <xref:System.Data.DataRow.RowError%2A> property. You can also set errors on each column of the row with the <xref:System.Data.DataRow.SetColumnError%2A> method.       Before updating a data source with a <xref:System.Data.DataSet>, it&quot;s recommended that you first invoke the <xref:System.Data.DataSet.GetChanges%2A> method on the target <xref:System.Data.DataSet>. The method results in a <xref:System.Data.DataSet> that contains only the changes made to the original. Before sending the <xref:System.Data.DataSet> to the data source for updating, check the HasErrors property of each table to see if any errors have been attached to the rows or columns in the rows.       After reconciling each error, clear the errors with the <xref:System.Data.DataRow.ClearErrors%2A> method of the `DataRow`."
  example:
  - "The following example uses the HasErrors property to check if a table contains errors.  \n  \n [!code-cs[Classic WebData DataTable.HasErrors Example#1](~/add/codesnippet/csharp/p-system.data.datatable._8_1.cs)]\n [!code-vb[Classic WebData DataTable.HasErrors Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._8_1.vb)]"
  syntax:
    content: public bool HasErrors { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if errors exist; otherwise <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Data.DataTable.HasErrors*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.ImportRow(System.Data.DataRow)
  id: ImportRow(System.Data.DataRow)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: ImportRow(DataRow)
  nameWithType: DataTable.ImportRow(DataRow)
  fullName: System.Data.DataTable.ImportRow(DataRow)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Copies a <xref href=&quot;System.Data.DataRow&quot;></xref> into a <xref href=&quot;System.Data.DataTable&quot;></xref>, preserving any property settings, as well as original and current values."
  remarks: "Calling <xref:System.Data.DataTable.NewRow%2A> adds a row to the table using the existing table schema, but with default values for the row, and sets the <xref:System.Data.DataRowState> to `Detached`. Calling ImportRow preserves the existing <xref:System.Data.DataRowState> along with other values in the row. If the `DataRow` that is passed as a parameter is in a detached state, it is ignored, and no exception is thrown.       The new row will be added to the end of the data table.       If the new row violates a Constraint it won’t be added to the data table.       You can get the index of the new row with as DataTable.Rows.Find and DataTable.Rows.IndexOf. See <xref:System.Data.DataRowCollection> and <xref:System.Data.DataTable.Rows%2A> for more information."
  syntax:
    content: public void ImportRow (System.Data.DataRow row);
    parameters:
    - id: row
      type: System.Data.DataRow
      description: "The <xref href=&quot;System.Data.DataRow&quot;></xref> to be imported."
  overload: System.Data.DataTable.ImportRow*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Initialized
  id: Initialized
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Initialized
  nameWithType: DataTable.Initialized
  fullName: System.Data.DataTable.Initialized
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Occurs after the <xref href=&quot;System.Data.DataTable&quot;></xref> is initialized."
  remarks: "For more information, see <xref:System.Data.DataTable.IsInitialized%2A>."
  syntax:
    content: public event EventHandler Initialized;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.IsInitialized
  id: IsInitialized
  parent: System.Data.DataTable
  langs:
  - csharp
  name: IsInitialized
  nameWithType: DataTable.IsInitialized
  fullName: System.Data.DataTable.IsInitialized
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Gets a value that indicates whether the <xref href=&quot;System.Data.DataTable&quot;></xref> is initialized."
  remarks: "Returns the status of the <xref:System.Data.DataTable> while it’s being constructed, for instance by Visual Studio. The <xref:System.Data.DataTable.BeginInit%2A> method sets it to `false` and <xref:System.Data.DataTable.EndInit%2A> method sets it to `true`."
  syntax:
    content: public bool IsInitialized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to indicate the component has completed initialization; otherwise <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Data.DataTable.IsInitialized*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Load(System.Data.IDataReader)
  id: Load(System.Data.IDataReader)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Load(IDataReader)
  nameWithType: DataTable.Load(IDataReader)
  fullName: System.Data.DataTable.Load(IDataReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Fills a <xref href=&quot;System.Data.DataTable&quot;></xref> with values from a data source using the supplied <xref href=&quot;System.Data.IDataReader&quot;></xref>. If the <xref href=&quot;System.Data.DataTable&quot;></xref> already contains rows, the incoming data from the data source is merged with the existing rows."
  remarks: "The Loadmethod consumes the first result set from the loaded <xref:System.Data.IDataReader>, and after successful completion, sets the reader's position to the next result set, if any. When converting data, the `Load` method uses the same conversion rules as the <xref:System.Data.Common.DbDataAdapter.Fill%2A?displayProperty=fullName> method.  \n  \n The Load method must take into account three specific issues when loading the data from an <xref:System.Data.IDataReader> instance: schema, data, and event operations. When working with the schema, the Load method may encounter conditions as described in the following table. The schema operations take place for all imported result sets, even those containing no data.  \n  \n|Condition|Behavior|  \n|---------------|--------------|  \n|The <xref:System.Data.DataTable> has no schema.|The Load method infers the schema based on the result set from the imported <xref:System.Data.IDataReader>.|  \n|The <xref:System.Data.DataTable> has a schema, but it is incompatible with the loaded schema.|The Load method throws an exception corresponding to the particular error that occurs when attempting to load data into the incompatible schema.|  \n|The schemas are compatible, but the loaded result set schema contains columns that do not exist in the <xref:System.Data.DataTable>.|The Load method adds the extra columns to `DataTable`'s schema. The method throws an exception if corresponding columns in the <xref:System.Data.DataTable> and the loaded result set are not value compatible. The method also retrieves constraint information from the result set for all added columns. Except for the case of Primary Key constraint, this constraint information is used only if the current <xref:System.Data.DataTable> does not contain any columns at the start of the load operation.|  \n|The schemas are compatible, but the loaded result set schema contains fewer columns than does the `DataTable`.|If a missing column has a default value defined or the column's data type is nullable, the Load method allows the rows to be added, substituting the default or `null` value for the missing column. If no default value or `null` can be used, then the `Load` method throws an exception. If no specific default value has been supplied, the `Load` method uses the `null` value as the implied default value.|  \n  \n Before considering the behavior of the `Load` method in terms of data operations, consider that each row within a <xref:System.Data.DataTable> maintains both the current value and the original value for each column. These values may be equivalent, or may be different if the data in the row has been changed since filling the `DataTable`.  For more information, see [Row States and Row Versions](~/add/includes/ajax-current-ext-md.md).  \n  \n This version of the `Load` method attempts to preserve the current values in each row, leaving the original value intact. (If you want finer control over the behavior of incoming data, see <xref:System.Data.DataTable.Load%2A?displayProperty=fullName>.) If the existing row and the incoming row contain corresponding primary key values, the row is processed using its current row state value, otherwise it's treated as a new row.  \n  \n In terms of event operations, the <xref:System.Data.DataTable.RowChanging> event occurs before each row is changed, and the <xref:System.Data.DataTable.RowChanged> event occurs after each row has been changed. In each case, the <xref:System.Data.DataRowChangeEventArgs.Action%2A> property of the <xref:System.Data.DataRowChangeEventArgs> instance passed to the event handler contains information about the particular action associated with the event. This action value depends on the state of the row before the load operation. In each case, both events occur, and the action is the same for each. The action may be applied to either the current or original version of each row, or both, depending on the current row state.  \n  \n The following table displays behavior for the `Load` method. The final row (labeled \"(Not present)\") describes the behavior for incoming rows that don't match any existing row. Each cell in this table describes the current and original value for a field within a row, along with the <xref:System.Data.DataRowState> for the value after the `Load` method has completed. In this case, the method doesn't allow you to indicate the load option, and uses the default, `PreserveChanges`.  \n  \n|Existing DataRowState|Values after `Load` method, and event action|  \n|---------------------------|--------------------------------------------------|  \n|Added|Current = \\<Existing><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Modified><br /><br /> RowAction = ChangeOriginal|  \n|Modified|Current = \\<Existing><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Modified><br /><br /> RowAction = ChangeOriginal|  \n|Deleted|Current = \\<Not available><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Deleted><br /><br /> RowAction = ChangeOriginal|  \n|Unchanged|Current = \\<Incoming><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|  \n|(Not present)|Current = \\<Incoming><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|  \n  \n Values in a <xref:System.Data.DataColumn> can be constrained through use of properties such as <xref:System.Data.DataColumn.ReadOnly%2A> and <xref:System.Data.DataColumn.AutoIncrement%2A>. The `Load` method handles such columns in a manner that is consistent with the behavior defined by the column's properties. The read only constraint on a <xref:System.Data.DataColumn> is applicable only for changes that occur in memory. The `Load` method's overwrites the read-only column values, if needed.  \n  \n To determine which version of the primary key field to use for comparing the current row with an incoming row, the `Load` method uses the original version of the primary key value within a row, if it exists. Otherwise, the `Load` method uses the current version of the primary key field."
  example:
  - "The following example demonstrates several of the issues involved with calling the Load method. First, the example focuses on schema issues, including inferring a schema from the loaded <xref:System.Data.IDataReader>, and then handling incompatible schemas, and schemas with missing or additional columns. The example then calls the `Load` method, displaying the data both before and after the load operation.  \n  \n [!code-cs[DataWorks DataTableLoad.IDataReader#1](~/add/codesnippet/csharp/m-system.data.datatable._13_1.cs)]\n [!code-vb[DataWorks DataTableLoad.IDataReader#1](~/add/codesnippet/visualbasic/m-system.data.datatable._13_1.vb)]"
  syntax:
    content: public void Load (System.Data.IDataReader reader);
    parameters:
    - id: reader
      type: System.Data.IDataReader
      description: "An <xref href=&quot;System.Data.IDataReader&quot;></xref> that provides a result set."
  overload: System.Data.DataTable.Load*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)
  id: Load(System.Data.IDataReader,System.Data.LoadOption)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Load(IDataReader,LoadOption)
  nameWithType: DataTable.Load(IDataReader,LoadOption)
  fullName: System.Data.DataTable.Load(IDataReader,LoadOption)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Fills a <xref href=&quot;System.Data.DataTable&quot;></xref> with values from a data source using the supplied <xref href=&quot;System.Data.IDataReader&quot;></xref>. If the <xref uid=&quot;langword_csharp_DataTable&quot; name=&quot;DataTable&quot; href=&quot;&quot;></xref> already contains rows, the incoming data from the data source is merged with the existing rows according to the value of the <code>loadOption</code> parameter."
  remarks: "The `Load` method consumes the first result set from the loaded <xref:System.Data.IDataReader>, and after successful completion, sets the reader's position to the next result set, if any. When converting data, the `Load` method uses the same conversion rules as the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method.  \n  \n The `Load` method must take into account three specific issues when loading the data from an <xref:System.Data.IDataReader> instance: schema, data, and event operations. When working with the schema, the `Load` method may encounter conditions as described in the following table. The schema operations take place for all imported result sets, even those containing no data.  \n  \n|Condition|Behavior|  \n|---------------|--------------|  \n|The <xref:System.Data.DataTable> has no schema.|The `Load` method infers the schema based on the result set from the imported <xref:System.Data.IDataReader>.|  \n|The <xref:System.Data.DataTable> has a schema, but it is incompatible with the loaded schema.|The `Load` method throws an exception corresponding to the particular error that occurs when attempting to load data into the incompatible schema.|  \n|The schemas are compatible, but the loaded result set schema contains columns that don't exist in the `DataTable`.|The `Load` method adds the extra columns to `DataTable`’s schema. The method throws an exception if corresponding columns in the <xref:System.Data.DataTable> and the loaded result set are not value compatible. The method also retrieves constraint information from the result set for all added columns. Except for the case of Primary Key constraint, this constraint information is used only if the current <xref:System.Data.DataTable> does not contain any columns at the start of the load operation.|  \n|The schemas are compatible, but the loaded result set schema contains fewer columns than does the `DataTable`.|If a missing column has a default value defined or the column's data type is nullable, the `Load` method allows the rows to be added, substituting the default or null value for the missing column. If no default value or null can be used, then the `Load` method throws an exception. If no specific default value has been supplied, the `Load` method uses the null value as the implied default value.|  \n  \n Before considering the behavior of the `Load` method in terms of data operations, consider that each row within a <xref:System.Data.DataTable> maintains both the current value and the original value for each column. These values may be equivalent, or may be different if the data in the row has been changed since filling the `DataTable`. See [Row States and Row Versions](~/add/includes/ajax-current-ext-md.md) for more information.  \n  \n In this method call, the specified <xref:System.Data.LoadOption> parameter influences the processing of the incoming data. How should the Load method handle loading rows that have the same primary key as existing rows? Should it modify current values, original values, or both? These issues, and more, are controlled by the `loadOption` parameter.  \n  \n If the existing row and the incoming row contain corresponding primary key values, the row is processed using its current row state value, otherwise it's treated as a new row.  \n  \n In terms of event operations, the <xref:System.Data.DataTable.RowChanging> event occurs before each row is changed, and the <xref:System.Data.DataTable.RowChanged> event occurs after each row has been changed. In each case, the <xref:System.Data.DataRowChangeEventArgs.Action%2A> property of the <xref:System.Data.DataRowChangeEventArgs> instance passed to the event handler contains information about the particular action associated with the event. This action value varies, depending on the state of the row before the load operation. In each case, both events occur, and the action is the same for each. The action may be applied to either the current or original version of each row, or both, depending on the current row state.  \n  \n The following table displays behavior for the Load method when called with each of the `LoadOption` values, and also shows how the values interact with the row state for the row being loaded. The final row (labeled \"(Not present)\") describes the behavior for incoming rows that don't match any existing row. Each cell in this table describes the current and original value for a field within a row, along with the <xref:System.Data.DataRowState> for the value after the `Load` method has completed.  \n  \n|Existing DataRowState|Upsert|OverwriteChanges|PreserveChanges (Default behavior)|  \n|---------------------------|------------|----------------------|------------------------------------------|  \n|Added|Current = \\<Incoming><br /><br /> Original = -\\<Not available><br /><br /> State = \\<Added><br /><br /> RowAction = Change|Current = \\<Incoming><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|Current = \\<Existing><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Modified><br /><br /> RowAction = ChangeOriginal|  \n|Modified|Current = \\<Incoming><br /><br /> Original = \\<Existing><br /><br /> State = \\<Modified><br /><br /> RowAction = Change|Current = \\<Incoming><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|Current = \\<Existing><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Modified><br /><br /> RowAction =ChangeOriginal|  \neleted|(Load does not affect deleted rows)<br /><br /> Current = ---<br /><br /> Original = \\<Existing><br /><br /> State = \\<Deleted><br /><br /> (New row is added with the following characteristics)<br /><br /> Current = \\<Incoming><br /><br /> Original = \\<Not available><br /><br /> State = \\<Added><br /><br /> RowAction = Add|Undo delete and<br /><br /> Current = \\<Incoming><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|Current = \\<Not available><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Deleted><br /><br /> RowAction = ChangeOriginal|  \n|Unchanged|Current = \\<Incoming><br /><br /> Original = \\<Existing><br /><br /> If new value is the same as the existing value then<br /><br /> State = \\<Unchanged><br /><br /> RowAction = Nothing<br /><br /> Else<br /><br /> State = \\<Modified><br /><br /> RowAction = Change|Current = \\<Incoming><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|Current = \\<Incoming><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|  \nNot present)|Current = \\<Incoming><br /><br /> Original = \\<Not available><br /><br /> State = \\<Added><br /><br /> RowAction = Add|Current = \\<Incoming><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|Current = \\<Incoming><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|  \n  \n Values in a <xref:System.Data.DataColumn> can be constrained through use of properties such as <xref:System.Data.DataColumn.ReadOnly%2A> and <xref:System.Data.DataColumn.AutoIncrement%2A>. The `Load` method handles such columns in a manner that is consistent with the behavior defined by the column's properties. The read only constraint on a <xref:System.Data.DataColumn> is applicable only for changes that occur in memory. The `Load` method's overwrites the read-only column values, if needed.  \n  \n If you specify the OverwriteChanges or PreserveChanges options when calling the `Load` method, then the assumption is made that the incoming data is coming from the `DataTable`'s primary data source, and the DataTable tracks changes and can propagate the changes back to the data source. If you select the Upsert option, it is assumed that the data is coming from one of a secondary data source, such as data provided by a middle-tier component, perhaps altered by a user. In this case, the assumption is that the intent is to aggregate data from one or more data sources in the `DataTable`, and then perhaps propagate the data back to the primary data source. The <xref:System.Data.LoadOption> parameter is used for determining the specific version of the row that is to be used for primary key comparison. The table below provides the details.  \n  \n|Load option|DataRow version used for primary key comparison|  \n|-----------------|-----------------------------------------------------|  \n|`OverwriteChanges`|Original version, if it exists, otherwise Current version|  \n|`PreserveChanges`|Original version, if it exists, otherwise Current version|  \n|`Upsert`|Current version, if it exists, otherwise Original version|"
  example:
  - "The following example demonstrates several of the issues involved with calling the Load method. First, the example focuses on schema issues, including inferring a schema from the loaded <xref:System.Data.IDataReader>, and then handling incompatible schemas, and schemas with missing or additional columns. The example then focuses on data issues, including handling the various loading options.  \n  \n [!code-cs[DataWorks DataTableLoad.LoadOption#1](~/add/codesnippet/csharp/m-system.data.datatable._29_1.cs)]\n [!code-vb[DataWorks DataTableLoad.LoadOption#1](~/add/codesnippet/visualbasic/m-system.data.datatable._29_1.vb)]"
  syntax:
    content: public void Load (System.Data.IDataReader reader, System.Data.LoadOption loadOption);
    parameters:
    - id: reader
      type: System.Data.IDataReader
      description: "An <xref href=&quot;System.Data.IDataReader&quot;></xref> that provides one or more result sets."
    - id: loadOption
      type: System.Data.LoadOption
      description: "A value from the <xref href=&quot;System.Data.LoadOption&quot;></xref> enumeration that indicates how rows already in the <xref href=&quot;System.Data.DataTable&quot;></xref> are combined with incoming rows that share the same primary key."
  overload: System.Data.DataTable.Load*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)
  id: Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Load(IDataReader,LoadOption,FillErrorEventHandler)
  nameWithType: DataTable.Load(IDataReader,LoadOption,FillErrorEventHandler)
  fullName: System.Data.DataTable.Load(IDataReader,LoadOption,FillErrorEventHandler)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Fills a <xref href=&quot;System.Data.DataTable&quot;></xref> with values from a data source using the supplied <xref href=&quot;System.Data.IDataReader&quot;></xref> using an error-handling delegate."
  remarks: "The `Load` method consumes the first result set from the loaded <xref:System.Data.IDataReader>, and after successful completion, sets the reader's position to the next result set, if any. When converting data, the `Load` method uses the same conversion rules as the <xref:System.Data.Common.DbDataAdapter.Fill%2A?displayProperty=fullName> method.  \n  \n The `Load` method must take into account three specific issues when loading the data from an <xref:System.Data.IDataReader> instance: schema, data, and event operations. When working with the schema, the `Load` method may encounter conditions as described in the following table. The schema operations take place for all imported result sets, even those containing no data.  \n  \n|Condition|Behavior|  \n|---------------|--------------|  \n|The <xref:System.Data.DataTable> has no schema.|The `Load` method infers the schema based on the result set from the imported <xref:System.Data.IDataReader>.|  \n|The <xref:System.Data.DataTable> has a schema, but it is incompatible with the loaded schema.|The `Load` method throws an exception corresponding to the particular error that occurs when attempting to load data into the incompatible schema.|  \n|The schemas are compatible, but the loaded result set schema contains columns that don't exist in the `DataTable`.|The `Load` method adds the extra column(s) to `DataTable`’s schema. The method throws an exception if corresponding columns in the <xref:System.Data.DataTable> and the loaded result set are not value compatible. The method also retrieves constraint information from the result set for all added columns. Except for the case of Primary Key constraint, this constraint information is used only if the current <xref:System.Data.DataTable> does not contain any columns at the start of the load operation.|  \n|The schemas are compatible, but the loaded result set schema contains fewer columns than does the `DataTable`.|If a missing column has a default value defined or the column's data type is nullable, the `Load` method allows the rows to be added, substituting the default or null value for the missing column. If no default value or null can be used, then the `Load` method throws an exception. If no specific default value has been supplied, the `Load` method uses the null value as the implied default value.|  \n  \n Before considering the behavior of the `Load` method in terms of data operations, consider that each row within a <xref:System.Data.DataTable> maintains both the current value and the original value for each column. These values may be equivalent, or may be different if the data in the row has been changed since filling the `DataTable`. See [Row States and Row Versions](~/add/includes/ajax-current-ext-md.md) for more information.  \n  \n In this method call, the specified <xref:System.Data.LoadOption> parameter influences the processing of the incoming data. How should the Load method handle loading rows that have the same primary key as existing rows? Should it modify current values, original values, or both? These issues, and more, are controlled by the `loadOption` parameter.  \n  \n If the existing row and the incoming row contain corresponding primary key values, the row is processed using its current row state value, otherwise it's treated as a new row.  \n  \n In terms of event operations, the <xref:System.Data.DataTable.RowChanging> event occurs before each row is changed, and the <xref:System.Data.DataTable.RowChanged> event occurs after each row has been changed. In each case, the <xref:System.Data.DataRowChangeEventArgs.Action%2A> property of the <xref:System.Data.DataRowChangeEventArgs> instance passed to the event handler contains information about the particular action associated with the event. This action value varies, depending on the state of the row before the load operation. In each case, both events occur, and the action is the same for each. The action may be applied to either the current or original version of each row, or both, depending on the current row state.  \n  \n The following table displays behavior for the Load method when called with each of the `LoadOption` values, and also shows how the values interact with the row state for the row being loaded. The final row (labeled \"(Not present)\") describes the behavior for incoming rows that don't match any existing row. Each cell in this table describes the current and original value for a field within a row, along with the <xref:System.Data.DataRowState> for the value after the `Load` method has completed.  \n  \n|Existing DataRowState|Upsert|OverwriteChanges|PreserveChanges (Default behavior)|  \n|---------------------------|------------|----------------------|------------------------------------------|  \n|Added|Current = \\<Incoming><br /><br /> Original = -\\<Not available><br /><br /> State = \\<Added><br /><br /> RowAction = Change|Current = \\<Incoming><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|Current = \\<Existing><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Modified><br /><br /> RowAction = ChangeOriginal|  \n|Modified|Current = \\<Incoming><br /><br /> Original = \\<Existing><br /><br /> State = \\<Modified><br /><br /> RowAction = Change|Current = \\<Incoming><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|Current = \\<Existing><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Modified><br /><br /> RowAction =ChangeOriginal|  \neleted|(Load does not affect deleted rows)<br /><br /> Current = ---<br /><br /> Original = \\<Existing><br /><br /> State = \\<Deleted><br /><br /> (New row is added with the following characteristics)<br /><br /> Current = \\<Incoming><br /><br /> Original = \\<Not available><br /><br /> State = \\<Added><br /><br /> RowAction = Add|Undo delete and<br /><br /> Current = \\<Incoming><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|Current = \\<Not available><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Deleted><br /><br /> RowAction = ChangeOriginal|  \n|Unchanged|Current = \\<Incoming><br /><br /> Original = \\<Existing><br /><br /> If new value is the same as the existing value then<br /><br /> State = \\<Unchanged><br /><br /> RowAction = Nothing<br /><br /> Else<br /><br /> State = \\<Modified><br /><br /> RowAction = Change|Current = \\<Incoming><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|Current = \\<Incoming><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|  \nNot present)|Current = \\<Incoming><br /><br /> Original = \\<Not available><br /><br /> State = \\<Added><br /><br /> RowAction = Add|Current = \\<Incoming><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|Current = \\<Incoming><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|  \n  \n Values in a <xref:System.Data.DataColumn> can be constrained through use of properties such as <xref:System.Data.DataColumn.ReadOnly%2A> and <xref:System.Data.DataColumn.AutoIncrement%2A>. The `Load` method handles such columns in a manner that is consistent with the behavior defined by the column's properties. The read only constraint on a <xref:System.Data.DataColumn> is applicable only for changes that occur in memory. The `Load` method's overwrites the read-only column values, if needed.  \n  \n If you specify the OverwriteChanges or PreserveChanges options when calling the `Load` method, then the assumption is made that the incoming data is coming from the `DataTable`'s primary data source, and the DataTable tracks changes and can propagate the changes back to the data source. If you select the Upsert option, it is assumed that the data is coming from one of a secondary data source, such as data provided by a middle-tier component, perhaps altered by a user. In this case, the assumption is that the intent is to aggregate data from one or more data sources in the `DataTable`, and then perhaps propagate the data back to the primary data source. The <xref:System.Data.LoadOption> parameter is used for determining the specific version of the row that is to be used for primary key comparison. The table below provides the details.  \n  \n|Load option|DataRow version used for primary key comparison|  \n|-----------------|-----------------------------------------------------|  \n|`OverwriteChanges`|Original version, if it exists, otherwise Current version|  \n|`PreserveChanges`|Original version, if it exists, otherwise Current version|  \n|`Upsert`|Current version, if it exists, otherwise Original version|  \n  \n The `errorHandler` parameter is a <xref:System.Data.FillErrorEventHandler> delegate that refers to a procedure that is called when an error occurs while loading data. The <xref:System.Data.FillErrorEventArgs> parameter passed to the procedure provides properties that allow you to retrieve information about the error that occurred, the current row of data, and the <xref:System.Data.DataTable> being filled. Using this delegate mechanism, rather than a simpler try/catch block, allows you to determine the error, handle the situation, and continue processing if you like. The <xref:System.Data.FillErrorEventArgs> parameter supplies a <xref:System.Data.FillErrorEventArgs.Continue%2A> property: set this property to `true` to indicate that you have handled the error and wish to continue processing. Set the property to `false` to indicate that you wish to halt processing. Be aware that setting the property to `false` causes the code that triggered the problem to throw an exception."
  example:
  - >-
    [!code-vb[DataWorks DataTableLoad.ErrorEventHandler#1](~/add/codesnippet/visualbasic/e9f1029e-2520-490c-8397-_1.vb)]
     [!code-cs[DataWorks DataTableLoad.ErrorEventHandler#1](~/add/codesnippet/csharp/e9f1029e-2520-490c-8397-_1.cs)]
  syntax:
    content: public virtual void Load (System.Data.IDataReader reader, System.Data.LoadOption loadOption, System.Data.FillErrorEventHandler errorHandler);
    parameters:
    - id: reader
      type: System.Data.IDataReader
      description: "A <xref href=&quot;System.Data.IDataReader&quot;></xref> that provides a result set."
    - id: loadOption
      type: System.Data.LoadOption
      description: "A value from the <xref href=&quot;System.Data.LoadOption&quot;></xref> enumeration that indicates how rows already in the <xref href=&quot;System.Data.DataTable&quot;></xref> are combined with incoming rows that share the same primary key."
    - id: errorHandler
      type: System.Data.FillErrorEventHandler
      description: "A <xref href=&quot;System.Data.FillErrorEventHandler&quot;></xref> delegate to call when an error occurs while loading data."
  overload: System.Data.DataTable.Load*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.LoadDataRow(System.Object[],System.Boolean)
  id: LoadDataRow(System.Object[],System.Boolean)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: LoadDataRow(Object[],Boolean)
  nameWithType: DataTable.LoadDataRow(Object[],Boolean)
  fullName: System.Data.DataTable.LoadDataRow(Object[],Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Finds and updates a specific row. If no matching row is found, a new row is created using the given values."
  remarks: "The LoadDataRow method takes an array of values and finds the matching value(s) in the primary key column(s).       If a column has a default value, pass a null value in the array to set the default value for that column. Similarly, if a column has its <xref:System.Data.DataColumn.AutoIncrement%2A> property set to true, pass a null value in the array to set the automatically generated value for the row.       If the `fAcceptChanges` parameter is `true` or not specified, the new data is added and then <xref:System.Data.DataTable.AcceptChanges%2A> is called to accept all changes in the <xref:System.Data.DataTable>; if the argument is `false`, newly added rows are marked as insertions, and changes to existing rows are marked as modifications.       Exceptions can also occur during either a <xref:System.Data.DataTable.ColumnChanging> or <xref:System.Data.DataTable.RowChanging> event. If an exception occurs, the row is not added to the table.       Use LoadDataRow in conjunction with <xref:System.Data.DataTable.BeginLoadData%2A> and <xref:System.Data.DataTable.EndLoadData%2A>."
  example:
  - "The following example uses the LoadDataRow method to attempt to find a row. If no such row is found, the values are used to create a new row.  \n  \n [!code-vb[Classic WebData DataTable.LoadDataRow Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._23_1.vb)]\n [!code-cs[Classic WebData DataTable.LoadDataRow Example#1](~/add/codesnippet/csharp/m-system.data.datatable._23_1.cs)]"
  syntax:
    content: public System.Data.DataRow LoadDataRow (object[] values, bool fAcceptChanges);
    parameters:
    - id: values
      type: System.Object[]
      description: "An array of values used to create the new row."
    - id: fAcceptChanges
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to accept changes; otherwise <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Data.DataRow
      description: "The new <xref href=&quot;System.Data.DataRow&quot;></xref>."
  overload: System.Data.DataTable.LoadDataRow*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The array is larger than the number of columns in the table."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "A value doesn&quot;t match its respective column type."
  - type: System.Data.ConstraintException
    commentId: T:System.Data.ConstraintException
    description: "Adding the row invalidates a constraint."
  - type: System.Data.NoNullAllowedException
    commentId: T:System.Data.NoNullAllowedException
    description: "Attempting to put a null in a column where <xref:System.Data.DataColumn.AllowDBNull*> is false."
  platform:
  - net462
- uid: System.Data.DataTable.LoadDataRow(System.Object[],System.Data.LoadOption)
  id: LoadDataRow(System.Object[],System.Data.LoadOption)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: LoadDataRow(Object[],LoadOption)
  nameWithType: DataTable.LoadDataRow(Object[],LoadOption)
  fullName: System.Data.DataTable.LoadDataRow(Object[],LoadOption)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Finds and updates a specific row. If no matching row is found, a new row is created using the given values."
  remarks: "The <xref:System.Data.DataTable.LoadDataRow%2A> method takes an array of values and finds the matching value(s) in the primary key column(s).       If a column has a default value, pass a null value in the array to set the default value for that column. Similarly, if a column has its <xref:System.Data.DataColumn.AutoIncrement%2A> property set to true, pass a null value in the array to set the automatically generated value for the row.       The value of the `loadOption` parameter is used to determine how the values in the array are applied to an existing row. For example, if `loadOption` is set to `OverwriteChanges`, the `Original` and `Current` values of each column are replaced with the values in the incoming row and the `RowState` property is set to `Unchanged`.       Exceptions can also occur during either a <xref:System.Data.DataTable.ColumnChanging> or <xref:System.Data.DataTable.RowChanging> event. If an exception occurs, the row is not added to the table.       Use <xref:System.Data.DataTable.LoadDataRow%2A> in conjunction with <xref:System.Data.DataTable.BeginLoadData%2A> and <xref:System.Data.DataTable.EndLoadData%2A>."
  syntax:
    content: public System.Data.DataRow LoadDataRow (object[] values, System.Data.LoadOption loadOption);
    parameters:
    - id: values
      type: System.Object[]
      description: "An array of values used to create the new row."
    - id: loadOption
      type: System.Data.LoadOption
      description: "Used to determine how the array values are applied to the corresponding values in an existing row."
    return:
      type: System.Data.DataRow
      description: "The new <xref href=&quot;System.Data.DataRow&quot;></xref>."
  overload: System.Data.DataTable.LoadDataRow*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Locale
  id: Locale
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Locale
  nameWithType: DataTable.Locale
  fullName: System.Data.DataTable.Locale
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Gets or sets the locale information used to compare strings within the table."
  remarks: "A <xref:System.Globalization.CultureInfo> represents the software preferences of a particular culture or community.       When used for string comparisons, the <xref:System.Globalization.CultureInfo> affects sorting, comparisons, and filtering.      > [!NOTE] >  In columns that contain expressions, the <xref:System.StringComparison> is used. The <xref:System.StringComparison> is ignored."
  example:
  - "The following example sets the <xref:System.Globalization.CultureInfo> through the Locale and prints the ISO language name.  \n  \n [!code-cs[Classic WebData DataTable.Locale Example#1](~/add/codesnippet/csharp/p-system.data.datatable._5_1.cs)]\n [!code-vb[Classic WebData DataTable.Locale Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._5_1.vb)]"
  syntax:
    content: public System.Globalization.CultureInfo Locale { get; set; }
    return:
      type: System.Globalization.CultureInfo
      description: "A <xref:System.Globalization.CultureInfo> that contains data about the user&quot;s machine locale. The default is the <xref href=&quot;System.Data.DataSet&quot;></xref> object&quot;s <xref:System.Globalization.CultureInfo> (returned by the <xref:System.Data.DataSet.Locale*> property) to which the <xref href=&quot;System.Data.DataTable&quot;></xref> belongs; if the table doesn&quot;t belong to a <xref href=&quot;System.Data.DataSet&quot;></xref>, the default is the current system <xref:System.Globalization.CultureInfo>."
  overload: System.Data.DataTable.Locale*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Merge(System.Data.DataTable)
  id: Merge(System.Data.DataTable)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Merge(DataTable)
  nameWithType: DataTable.Merge(DataTable)
  fullName: System.Data.DataTable.Merge(DataTable)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Merge the specified <xref href=&quot;System.Data.DataTable&quot;></xref> with the current <xref href=&quot;System.Data.DataTable&quot;></xref>."
  remarks: "The Merge method is used to merge two <xref:System.Data.DataTable> objects that have largely similar schemas. A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataTable>. This allows the client application to have a refreshed <xref:System.Data.DataTable> with the latest data from the data source.       The merge operation takes into account only the original table, and the table to be merged. Child tables are not affected or included. If a table has one or more child tables, defined as part of a relationship, each child table must be merged individually.       The `Merge` method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataTable>.       When performing a merge, changes made to the existing data before the merge are preserved by default during the merge operation. Developers can modify this behavior by calling one of the other two overloads for this method, and specifying a false value for the `preserveChanges` parameter.       In a client application, it is usual to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle tier component. In this scenario, the <xref:System.Data.DataTable.GetChanges%2A> method is first invoked. That method returns a second <xref:System.Data.DataTable> optimized for validating and merging. This second <xref:System.Data.DataTable> object contains only the <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataTable>. This subset is generally smaller and thus more efficiently passed back to a middle tier component. The middle tier component then updates the original data source with the changes through stored procedures. The middle tier can then send back either a new <xref:System.Data.DataTable> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source. (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataTable> can be merged back into the client application&quot;s original <xref:System.Data.DataTable> with the Merge method.       When merging a new source <xref:System.Data.DataTable> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted`, is matched to target rows with the same primary key values. Source rows with a <xref:System.Data.DataRowState> value of `Added` are matched to new target rows with the same primary key values as the new source rows."
  example:
  - "The following console application creates a simple <xref:System.Data.DataTable> and adds data to the table. The example then creates a copy of the table, adding rows to the copy. Finally, the example calls the Merge method to merge the data in the second table with the data in the first table.  \n  \n [!code-vb[DataWorks DataTable.Merge#1](~/add/codesnippet/visualbasic/m-system.data.datatable._4_1.vb)]\n [!code-cs[DataWorks DataTable.Merge#1](~/add/codesnippet/csharp/m-system.data.datatable._4_1.cs)]"
  syntax:
    content: public void Merge (System.Data.DataTable table);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: "The <xref href=&quot;System.Data.DataTable&quot;></xref> to be merged with the current <xref href=&quot;System.Data.DataTable&quot;></xref>."
  overload: System.Data.DataTable.Merge*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean)
  id: Merge(System.Data.DataTable,System.Boolean)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Merge(DataTable,Boolean)
  nameWithType: DataTable.Merge(DataTable,Boolean)
  fullName: System.Data.DataTable.Merge(DataTable,Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Merge the specified <xref href=&quot;System.Data.DataTable&quot;></xref> with the current <xref uid=&quot;langword_csharp_DataTable&quot; name=&quot;DataTable&quot; href=&quot;&quot;></xref>, indicating whether to preserve changes in the current <xref uid=&quot;langword_csharp_DataTable&quot; name=&quot;DataTable&quot; href=&quot;&quot;></xref>."
  remarks: "The Merge method is used to merge two <xref:System.Data.DataTable> objects that have largely similar schemas. A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataTable>. This allows the client application to have a refreshed <xref:System.Data.DataTable> with the latest data from the data source.       The merge operation takes into account only the original table, and the table to be merged. Child tables are not affected or included. If a table has one or more child tables, defined as part of a relationship, each child table must be merged individually.       The `Merge` method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataTable>.       When performing a merge, changes made to the existing data before the merge are preserved during the merge operation unless the developer specifies false for the `preserveChanges` parameter. If the `preserveChanges` parameter is set to `true`, incoming values do not overwrite existing values in the Current row version of the existing row. If the `preserveChanges` parameter is set to `false`, incoming values do overwrite the existing values in the Current row version of the existing row. For more information about row versions, see [Row States and Row Versions](~/add/includes/ajax-current-ext-md.md).       In a client application, it is usual to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle tier component. In this scenario, the <xref:System.Data.DataTable.GetChanges%2A> method is first invoked. That method returns a second <xref:System.Data.DataTable> optimized for validating and merging. This second <xref:System.Data.DataTable> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataTable>. This subset is generally smaller, and thus this subset is more efficiently passed back to a middle tier component. The middle tier component then updates the original data source with the changes through stored procedures. The middle tier can then send back either a new <xref:System.Data.DataTable> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source. (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataTable> can be merged back into the client application&quot;s original <xref:System.Data.DataTable> with the <xref:System.Data.DataTable.Merge%2A> method.       When merging a new source <xref:System.Data.DataTable> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values. Source rows with a <xref:System.Data.DataRowState> value of `Added` are matched to new target rows with the same primary key values as the new source rows."
  example:
  - "The following console application creates a <xref:System.Data.DataTable> containing rows, modifies some of the data in those rows, and attempts to merge data from a different <xref:System.Data.DataTable>. The example demonstrates the different behaviors for the `preserveChanges` parameter.  \n  \n [!code-vb[DataWorks DataTable.MergePreserveChanges#1](~/add/codesnippet/visualbasic/m-system.data.datatable._2_1.vb)]\n [!code-cs[DataWorks DataTable.MergePreserveChanges#1](~/add/codesnippet/csharp/m-system.data.datatable._2_1.cs)]"
  syntax:
    content: public void Merge (System.Data.DataTable table, bool preserveChanges);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: "The <xref uid=&quot;langword_csharp_DataTable&quot; name=&quot;DataTable&quot; href=&quot;&quot;></xref> to be merged with the current <xref uid=&quot;langword_csharp_DataTable&quot; name=&quot;DataTable&quot; href=&quot;&quot;></xref>."
    - id: preserveChanges
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>, to preserve changes in the current <xref uid=&quot;langword_csharp_DataTable&quot; name=&quot;DataTable&quot; href=&quot;&quot;></xref>; otherwise <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>.<xref uid=&quot;langword_csharp_&quot; name=&quot;&quot; href=&quot;&quot;></xref>"
  overload: System.Data.DataTable.Merge*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)
  id: Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Merge(DataTable,Boolean,MissingSchemaAction)
  nameWithType: DataTable.Merge(DataTable,Boolean,MissingSchemaAction)
  fullName: System.Data.DataTable.Merge(DataTable,Boolean,MissingSchemaAction)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Merge the specified <xref href=&quot;System.Data.DataTable&quot;></xref> with the current <xref uid=&quot;langword_csharp_DataTable&quot; name=&quot;DataTable&quot; href=&quot;&quot;></xref>, indicating whether to preserve changes and how to handle missing schema in the current <xref uid=&quot;langword_csharp_DataTable&quot; name=&quot;DataTable&quot; href=&quot;&quot;></xref>."
  remarks: "The `Merge` method is used to merge two <xref:System.Data.DataTable> objects that have largely similar schemas. A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataTable>. This allows the client application to have a refreshed <xref:System.Data.DataTable> with the latest data from the data source.       The merge operation takes into account only the original table, and the table to be merged. Child tables are not affected or included. If a table has one or more child tables, defined as part of a relationship, each child table must be merged individually.       The `Merge` method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataTable>.       When performing a merge, changes made to the existing data before the merge are preserved during the merge operation unless the developer specifies false for the `preserveChanges` parameter. If the `preserveChanges` parameter is set to `true`, incoming values do not overwrite existing values in the Current row version of the existing row. If the `preserveChanges` parameter is set to `false`, incoming values do overwrite the existing values in the Current row version of the existing row. For more information about row versions, see [Row States and Row Versions](~/add/includes/ajax-current-ext-md.md).       In a client application, it is usual to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle tier component. In this scenario, the <xref:System.Data.DataTable.GetChanges%2A> method is first invoked. That method returns a second <xref:System.Data.DataTable> optimized for validating and merging. This second <xref:System.Data.DataTable> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataTable>. This subset is generally smaller, and thus this subset is more efficiently passed back to a middle tier component. The middle tier component then updates the original data source with the changes through stored procedures. The middle tier can then send back either a new <xref:System.Data.DataTable> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source. (For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataTable> can be merged back into the client application&quot;s original <xref:System.Data.DataTable> with the <xref:System.Data.DataTable.Merge%2A> method.       When the <xref:System.Data.DataTable.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataTable> objects are compared, because it is possible that the schemas may have been changed. For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process. If the source <xref:System.Data.DataTable> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`. In that case, the merged <xref:System.Data.DataTable> contains the added schema and data.       After merging schemas, the data is merged.       When merging a new source <xref:System.Data.DataTable> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values. Source rows with a <xref:System.Data.DataRowState> value of `Added` are matched to new target rows with the same primary key values as the new source rows."
  example:
  - "The following console application demonstrates the behavior of the `missingSchemaAction` parameter of the Merge method. This example creates two versions of the same table, modifying the schema for the second version. The code then attempts to merge the second table into the first.  \n  \n [!code-cs[DataWorks DataTable.MergeMissingSchemaAction#1](~/add/codesnippet/csharp/0a34dc2a-14c3-4d65-b78d-_1.cs)]\n [!code-vb[DataWorks DataTable.MergeMissingSchemaAction#1](~/add/codesnippet/visualbasic/0a34dc2a-14c3-4d65-b78d-_1.vb)]"
  syntax:
    content: public void Merge (System.Data.DataTable table, bool preserveChanges, System.Data.MissingSchemaAction missingSchemaAction);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: "The <xref href=&quot;System.Data.DataTable&quot;></xref> to be merged with the current <xref href=&quot;System.Data.DataTable&quot;></xref>."
    - id: preserveChanges
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>, to preserve changes in the current <xref href=&quot;System.Data.DataTable&quot;></xref>; otherwise <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
    - id: missingSchemaAction
      type: System.Data.MissingSchemaAction
      description: "One of the <xref href=&quot;System.Data.MissingSchemaAction&quot;></xref> values."
  overload: System.Data.DataTable.Merge*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.MinimumCapacity
  id: MinimumCapacity
  parent: System.Data.DataTable
  langs:
  - csharp
  name: MinimumCapacity
  nameWithType: DataTable.MinimumCapacity
  fullName: System.Data.DataTable.MinimumCapacity
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Gets or sets the initial starting size for this table."
  remarks: "The MinimumCapacity allows the system to create an appropriate set of resources before fetching data. In a situation when performance is critical, setting this property can optimize performance."
  example:
  - "The following example sets the MinimumCapacity of a <xref:System.Data.DataTable>.  \n  \n [!code-vb[Classic WebData DataTable.MinimumCapacity Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._6_1.vb)]\n [!code-cs[Classic WebData DataTable.MinimumCapacity Example#1](~/add/codesnippet/csharp/p-system.data.datatable._6_1.cs)]"
  syntax:
    content: public int MinimumCapacity { get; set; }
    return:
      type: System.Int32
      description: "The initial starting size in rows of this table. The default is 50."
  overload: System.Data.DataTable.MinimumCapacity*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Namespace
  id: Namespace
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Namespace
  nameWithType: DataTable.Namespace
  fullName: System.Data.DataTable.Namespace
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Gets or sets the namespace for the XML representation of the data stored in the <xref href=&quot;System.Data.DataTable&quot;></xref>."
  syntax:
    content: public string Namespace { get; set; }
    return:
      type: System.String
      description: "The namespace of the <xref href=&quot;System.Data.DataTable&quot;></xref>."
  overload: System.Data.DataTable.Namespace*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.NewRow
  id: NewRow
  parent: System.Data.DataTable
  langs:
  - csharp
  name: NewRow()
  nameWithType: DataTable.NewRow()
  fullName: System.Data.DataTable.NewRow()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Creates a new <xref href=&quot;System.Data.DataRow&quot;></xref> with the same schema as the table."
  remarks: "You must use the NewRow method to create new <xref:System.Data.DataRow> objects with the same schema as the <xref:System.Data.DataTable>. After creating a <xref:System.Data.DataRow>, you can add it to the <xref:System.Data.DataRowCollection>, through the <xref:System.Data.DataTable> object&quot;s <xref:System.Data.DataTable.Rows%2A> property. When you use NewRow to create new rows, the rows must be added to or deleted from the data table before you call <xref:System.Data.DataTable.Clear%2A>."
  example:
  - "The following example creates a <xref:System.Data.DataTable>, adds two <xref:System.Data.DataColumn> objects that determine the table's schema, and creates several new <xref:System.Data.DataRow> objects using the NewRow method. Those <xref:System.Data.DataRow> objects are then added to the <xref:System.Data.DataRowCollection> using the <xref:System.Data.DataRowCollection.Add%2A> method.  \n  \n [!code-vb[Classic WebData DataTable.NewRow Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._27_1.vb)]\n [!code-cs[Classic WebData DataTable.NewRow Example#1](~/add/codesnippet/csharp/m-system.data.datatable._27_1.cs)]"
  syntax:
    content: public System.Data.DataRow NewRow ();
    parameters: []
    return:
      type: System.Data.DataRow
      description: "A <xref href=&quot;System.Data.DataRow&quot;></xref> with the same schema as the <xref href=&quot;System.Data.DataTable&quot;></xref>."
  overload: System.Data.DataTable.NewRow*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.NewRowArray(System.Int32)
  id: NewRowArray(System.Int32)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: NewRowArray(Int32)
  nameWithType: DataTable.NewRowArray(Int32)
  fullName: System.Data.DataTable.NewRowArray(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Returns an array of <xref href=&quot;System.Data.DataRow&quot;></xref>."
  syntax:
    content: protected System.Data.DataRow[] NewRowArray (int size);
    parameters:
    - id: size
      type: System.Int32
      description: "A <xref:System.Int32> value that describes the size of the array."
    return:
      type: System.Data.DataRow[]
      description: "The new array."
  overload: System.Data.DataTable.NewRowArray*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.NewRowFromBuilder(System.Data.DataRowBuilder)
  id: NewRowFromBuilder(System.Data.DataRowBuilder)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: NewRowFromBuilder(DataRowBuilder)
  nameWithType: DataTable.NewRowFromBuilder(DataRowBuilder)
  fullName: System.Data.DataTable.NewRowFromBuilder(DataRowBuilder)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Creates a new row from an existing row."
  syntax:
    content: protected virtual System.Data.DataRow NewRowFromBuilder (System.Data.DataRowBuilder builder);
    parameters:
    - id: builder
      type: System.Data.DataRowBuilder
      description: "A <xref href=&quot;System.Data.DataRowBuilder&quot;></xref> object."
    return:
      type: System.Data.DataRow
      description: "A <xref href=&quot;System.Data.DataRow&quot;></xref> derived class."
  overload: System.Data.DataTable.NewRowFromBuilder*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.OnColumnChanged(System.Data.DataColumnChangeEventArgs)
  id: OnColumnChanged(System.Data.DataColumnChangeEventArgs)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: OnColumnChanged(DataColumnChangeEventArgs)
  nameWithType: DataTable.OnColumnChanged(DataColumnChangeEventArgs)
  fullName: System.Data.DataTable.OnColumnChanged(DataColumnChangeEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Raises the <xref href=&quot;System.Data.DataTable.ColumnChanged&quot;></xref> event."
  remarks: 'Raising an event invokes the event handler through a delegate. For an overview, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).'
  syntax:
    content: protected virtual void OnColumnChanged (System.Data.DataColumnChangeEventArgs e);
    parameters:
    - id: e
      type: System.Data.DataColumnChangeEventArgs
      description: "A <xref href=&quot;System.Data.DataColumnChangeEventArgs&quot;></xref> that contains the event data."
  overload: System.Data.DataTable.OnColumnChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.OnColumnChanging(System.Data.DataColumnChangeEventArgs)
  id: OnColumnChanging(System.Data.DataColumnChangeEventArgs)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: OnColumnChanging(DataColumnChangeEventArgs)
  nameWithType: DataTable.OnColumnChanging(DataColumnChangeEventArgs)
  fullName: System.Data.DataTable.OnColumnChanging(DataColumnChangeEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Raises the <xref href=&quot;System.Data.DataTable.ColumnChanging&quot;></xref> event."
  remarks: 'Raising an event invokes the event handler through a delegate. For an overview, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).'
  syntax:
    content: protected virtual void OnColumnChanging (System.Data.DataColumnChangeEventArgs e);
    parameters:
    - id: e
      type: System.Data.DataColumnChangeEventArgs
      description: "A <xref href=&quot;System.Data.DataColumnChangeEventArgs&quot;></xref> that contains the event data."
  overload: System.Data.DataTable.OnColumnChanging*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)
  id: OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: OnPropertyChanging(PropertyChangedEventArgs)
  nameWithType: DataTable.OnPropertyChanging(PropertyChangedEventArgs)
  fullName: System.Data.DataTable.OnPropertyChanging(PropertyChangedEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Raises the <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged> event."
  remarks: 'Raising an event invokes the event handler through a delegate. For an overview, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).'
  syntax:
    content: protected virtual void OnPropertyChanging (System.ComponentModel.PropertyChangedEventArgs pcevent);
    parameters:
    - id: pcevent
      type: System.ComponentModel.PropertyChangedEventArgs
      description: "A <xref:System.ComponentModel.PropertyChangedEventArgs> that contains the event data."
  overload: System.Data.DataTable.OnPropertyChanging*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.OnRemoveColumn(System.Data.DataColumn)
  id: OnRemoveColumn(System.Data.DataColumn)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: OnRemoveColumn(DataColumn)
  nameWithType: DataTable.OnRemoveColumn(DataColumn)
  fullName: System.Data.DataTable.OnRemoveColumn(DataColumn)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Notifies the <xref href=&quot;System.Data.DataTable&quot;></xref> that a <xref href=&quot;System.Data.DataColumn&quot;></xref> is being removed."
  remarks: 'Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).'
  syntax:
    content: protected virtual void OnRemoveColumn (System.Data.DataColumn column);
    parameters:
    - id: column
      type: System.Data.DataColumn
      description: "The <xref href=&quot;System.Data.DataColumn&quot;></xref> being removed."
  overload: System.Data.DataTable.OnRemoveColumn*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.OnRowChanged(System.Data.DataRowChangeEventArgs)
  id: OnRowChanged(System.Data.DataRowChangeEventArgs)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: OnRowChanged(DataRowChangeEventArgs)
  nameWithType: DataTable.OnRowChanged(DataRowChangeEventArgs)
  fullName: System.Data.DataTable.OnRowChanged(DataRowChangeEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Raises the <xref href=&quot;System.Data.DataTable.RowChanged&quot;></xref> event."
  remarks: 'Raising an event invokes the event handler through a delegate. For an overview, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).'
  syntax:
    content: protected virtual void OnRowChanged (System.Data.DataRowChangeEventArgs e);
    parameters:
    - id: e
      type: System.Data.DataRowChangeEventArgs
      description: "A <xref href=&quot;System.Data.DataRowChangeEventArgs&quot;></xref> that contains the event data."
  overload: System.Data.DataTable.OnRowChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.OnRowChanging(System.Data.DataRowChangeEventArgs)
  id: OnRowChanging(System.Data.DataRowChangeEventArgs)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: OnRowChanging(DataRowChangeEventArgs)
  nameWithType: DataTable.OnRowChanging(DataRowChangeEventArgs)
  fullName: System.Data.DataTable.OnRowChanging(DataRowChangeEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Raises the <xref href=&quot;System.Data.DataTable.RowChanging&quot;></xref> event."
  remarks: 'Raising an event invokes the event handler through a delegate. For an overview, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).'
  syntax:
    content: protected virtual void OnRowChanging (System.Data.DataRowChangeEventArgs e);
    parameters:
    - id: e
      type: System.Data.DataRowChangeEventArgs
      description: "A <xref href=&quot;System.Data.DataRowChangeEventArgs&quot;></xref> that contains the event data."
  overload: System.Data.DataTable.OnRowChanging*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.OnRowDeleted(System.Data.DataRowChangeEventArgs)
  id: OnRowDeleted(System.Data.DataRowChangeEventArgs)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: OnRowDeleted(DataRowChangeEventArgs)
  nameWithType: DataTable.OnRowDeleted(DataRowChangeEventArgs)
  fullName: System.Data.DataTable.OnRowDeleted(DataRowChangeEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Raises the <xref href=&quot;System.Data.DataTable.RowDeleted&quot;></xref> event."
  remarks: 'Raising an event invokes the event handler through a delegate. For an overview, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).'
  syntax:
    content: protected virtual void OnRowDeleted (System.Data.DataRowChangeEventArgs e);
    parameters:
    - id: e
      type: System.Data.DataRowChangeEventArgs
      description: "A <xref href=&quot;System.Data.DataRowChangeEventArgs&quot;></xref> that contains the event data."
  overload: System.Data.DataTable.OnRowDeleted*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.OnRowDeleting(System.Data.DataRowChangeEventArgs)
  id: OnRowDeleting(System.Data.DataRowChangeEventArgs)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: OnRowDeleting(DataRowChangeEventArgs)
  nameWithType: DataTable.OnRowDeleting(DataRowChangeEventArgs)
  fullName: System.Data.DataTable.OnRowDeleting(DataRowChangeEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Raises the <xref href=&quot;System.Data.DataTable.RowDeleting&quot;></xref> event."
  remarks: 'Raising an event invokes the event handler through a delegate. For an overview, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).'
  syntax:
    content: protected virtual void OnRowDeleting (System.Data.DataRowChangeEventArgs e);
    parameters:
    - id: e
      type: System.Data.DataRowChangeEventArgs
      description: "A <xref href=&quot;System.Data.DataRowChangeEventArgs&quot;></xref> that contains the event data."
  overload: System.Data.DataTable.OnRowDeleting*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.OnTableCleared(System.Data.DataTableClearEventArgs)
  id: OnTableCleared(System.Data.DataTableClearEventArgs)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: OnTableCleared(DataTableClearEventArgs)
  nameWithType: DataTable.OnTableCleared(DataTableClearEventArgs)
  fullName: System.Data.DataTable.OnTableCleared(DataTableClearEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Raises the <xref href=&quot;System.Data.DataTable.TableCleared&quot;></xref> event."
  remarks: "Raises the <xref:System.Data.DataTable.TableCleared> event, which is fired immediately after all rows have been successfully cleared but before the <xref:System.Data.DataTable.Clear%2A> method returns control back to the caller.       Raising an event invokes the event handler through a delegate. For an overview, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)."
  syntax:
    content: protected virtual void OnTableCleared (System.Data.DataTableClearEventArgs e);
    parameters:
    - id: e
      type: System.Data.DataTableClearEventArgs
      description: "A <xref href=&quot;System.Data.DataTableClearEventArgs&quot;></xref> that contains the event data."
  overload: System.Data.DataTable.OnTableCleared*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.OnTableClearing(System.Data.DataTableClearEventArgs)
  id: OnTableClearing(System.Data.DataTableClearEventArgs)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: OnTableClearing(DataTableClearEventArgs)
  nameWithType: DataTable.OnTableClearing(DataTableClearEventArgs)
  fullName: System.Data.DataTable.OnTableClearing(DataTableClearEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Raises the <xref href=&quot;System.Data.DataTable.TableClearing&quot;></xref> event."
  remarks: "Raises the <xref:System.Data.DataTable.TableClearing> event, which is fired before processing of the <xref:System.Data.DataTable.Clear%2A> operation begins.       Raising an event invokes the event handler through a delegate. For an overview, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)."
  syntax:
    content: protected virtual void OnTableClearing (System.Data.DataTableClearEventArgs e);
    parameters:
    - id: e
      type: System.Data.DataTableClearEventArgs
      description: "A <xref href=&quot;System.Data.DataTableClearEventArgs&quot;></xref> that contains the event data."
  overload: System.Data.DataTable.OnTableClearing*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.OnTableNewRow(System.Data.DataTableNewRowEventArgs)
  id: OnTableNewRow(System.Data.DataTableNewRowEventArgs)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: OnTableNewRow(DataTableNewRowEventArgs)
  nameWithType: DataTable.OnTableNewRow(DataTableNewRowEventArgs)
  fullName: System.Data.DataTable.OnTableNewRow(DataTableNewRowEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Raises the <xref href=&quot;System.Data.DataTable.TableNewRow&quot;></xref> event."
  remarks: "Raises the <xref:System.Data.DataTable.TableNewRow> event, which fires after a new <xref:System.Data.DataRow> has been created using <xref:System.Data.DataTable.NewRow%2A>.       Raising an event invokes the event handler through a delegate. For an overview, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)."
  syntax:
    content: protected virtual void OnTableNewRow (System.Data.DataTableNewRowEventArgs e);
    parameters:
    - id: e
      type: System.Data.DataTableNewRowEventArgs
      description: "A <xref href=&quot;System.Data.DataTableNewRowEventArgs&quot;></xref> that contains the event data."
  overload: System.Data.DataTable.OnTableNewRow*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.ParentRelations
  id: ParentRelations
  parent: System.Data.DataTable
  langs:
  - csharp
  name: ParentRelations
  nameWithType: DataTable.ParentRelations
  fullName: System.Data.DataTable.ParentRelations
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Gets the collection of parent relations for this <xref href=&quot;System.Data.DataTable&quot;></xref>."
  remarks: ''
  example:
  - "The following example uses the ParentRelations property to return each parent <xref:System.Data.DataRelation> in a <xref:System.Data.DataTable>. Each relation is then used as an argument in the <xref:System.Data.DataRow.GetParentRows%2A> method of the <xref:System.Data.DataRow> to return an array of rows. The value of each column in the row is then printed.  \n  \n [!code-cs[Classic WebData DataTable.ParentRelations Example#1](~/add/codesnippet/csharp/p-system.data.datatable._9_1.cs)]\n [!code-vb[Classic WebData DataTable.ParentRelations Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._9_1.vb)]"
  syntax:
    content: public System.Data.DataRelationCollection ParentRelations { get; }
    return:
      type: System.Data.DataRelationCollection
      description: "A <xref href=&quot;System.Data.DataRelationCollection&quot;></xref> that contains the parent relations for the table. An empty collection is returned if no <xref href=&quot;System.Data.DataRelation&quot;></xref> objects exist."
  overload: System.Data.DataTable.ParentRelations*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Prefix
  id: Prefix
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Prefix
  nameWithType: DataTable.Prefix
  fullName: System.Data.DataTable.Prefix
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Gets or sets the namespace for the XML representation of the data stored in the <xref href=&quot;System.Data.DataTable&quot;></xref>."
  syntax:
    content: public string Prefix { get; set; }
    return:
      type: System.String
      description: "The prefix of the <xref href=&quot;System.Data.DataTable&quot;></xref>."
  overload: System.Data.DataTable.Prefix*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.PrimaryKey
  id: PrimaryKey
  parent: System.Data.DataTable
  langs:
  - csharp
  name: PrimaryKey
  nameWithType: DataTable.PrimaryKey
  fullName: System.Data.DataTable.PrimaryKey
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Gets or sets an array of columns that function as primary keys for the data table."
  remarks: "The primary key of a table must be unique to identify the record in the table. It&quot;s also possible to have a table with a primary key made up of two or more columns. This occurs when a single column can&quot;t contain enough unique values. For example, a two column primary key might consist of a &quot;FirstName&quot; and &quot;LastName&quot; column. Because primary keys can be made up of more than one column, the PrimaryKey property consists of an array of <xref:System.Data.DataColumn> objects."
  example:
  - "The first example shows how to return the primary key columns for a <xref:System.Data.DataTable> displayed in a `DataGrid`. The second example demonstrates how to set the primary key columns for a <xref:System.Data.DataTable>.  \n  \n [!code-cs[Classic WebData DataTable.PrimaryKey Example#1](~/add/codesnippet/csharp/p-system.data.datatable._4_1.cs)]\n [!code-vb[Classic WebData DataTable.PrimaryKey Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._4_1.vb)]"
  syntax:
    content: public System.Data.DataColumn[] PrimaryKey { get; set; }
    return:
      type: System.Data.DataColumn[]
      description: "An array of <xref href=&quot;System.Data.DataColumn&quot;></xref> objects."
  overload: System.Data.DataTable.PrimaryKey*
  exceptions:
  - type: System.Data.DataException
    commentId: T:System.Data.DataException
    description: "The key is a foreign key."
  platform:
  - net462
- uid: System.Data.DataTable.ReadXml(System.IO.Stream)
  id: ReadXml(System.IO.Stream)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: ReadXml(Stream)
  nameWithType: DataTable.ReadXml(Stream)
  fullName: System.Data.DataTable.ReadXml(Stream)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Reads XML schema and data into the <xref href=&quot;System.Data.DataTable&quot;></xref> using the specified <xref:System.IO.Stream>."
  remarks: "The current <xref:System.Data.DataTable> and its descendents are loaded with the data from the supplied <xref:System.IO.Stream>. The behavior of this method is identical to that of the <xref:System.Data.DataSet.ReadXml%2A?displayProperty=fullName> method, except that in this case, data is loaded only for the current table and its descendants.       The ReadXml method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataTable> from an XML document, whereas the <xref:System.Data.DataTable.ReadXmlSchema%2A> method reads only the schema.       Note that the same is true for the <xref:System.Data.DataTable.WriteXml%2A> and <xref:System.Data.DataTable.WriteXmlSchema%2A> methods, respectively. To write XML data, or both schema and data from the `DataTable`, use the `WriteXml` method. To write just the schema, use the `WriteXmlSchema` method.      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.       If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.       If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.      > [!NOTE] >  The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (&quot;_&quot;) are escaped in the serialized XML. The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing."
  example:
  - "The following example creates a <xref:System.Data.DataTable> containing two columns and ten rows. The example writes the <xref:System.Data.DataTable> schema and data to a memory stream, by invoking the <xref:System.Data.DataTable.WriteXml%2A> method. The example creates a second <xref:System.Data.DataTable> and calls the ReadXml method to fill it with schema and data.  \n  \n [!code-cs[DataWorks DataTable.ReadXml#1](~/add/codesnippet/csharp/m-system.data.datatable._19_1.cs)]\n [!code-vb[DataWorks DataTable.ReadXml#1](~/add/codesnippet/visualbasic/m-system.data.datatable._19_1.vb)]"
  syntax:
    content: public System.Data.XmlReadMode ReadXml (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "An object that derives from <xref:System.IO.Stream>"
    return:
      type: System.Data.XmlReadMode
      description: "The <xref href=&quot;System.Data.XmlReadMode&quot;></xref> used to read the data."
  overload: System.Data.DataTable.ReadXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.ReadXml(System.IO.TextReader)
  id: ReadXml(System.IO.TextReader)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: ReadXml(TextReader)
  nameWithType: DataTable.ReadXml(TextReader)
  fullName: System.Data.DataTable.ReadXml(TextReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Reads XML schema and data into the <xref href=&quot;System.Data.DataTable&quot;></xref> using the specified <xref:System.IO.TextReader>."
  remarks: "The current <xref:System.Data.DataTable> and its descendents are loaded with the data from the supplied <xref:System.IO.TextReader>. The behavior of this method is identical to that of the <xref:System.Data.DataSet.ReadXml%2A?displayProperty=fullName> method, except that in this case, data is loaded only for the current table and its descendants.       The ReadXml method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataTable> from an XML document, whereas the <xref:System.Data.DataTable.ReadXmlSchema%2A> method reads only the schema.       Note that the same is true for the <xref:System.Data.DataTable.WriteXml%2A> and <xref:System.Data.DataTable.WriteXmlSchema%2A> methods, respectively. To write XML data, or both schema and data from the `DataTable`, use the `WriteXml` method. To write just the schema, use the `WriteXmlSchema` method.      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.       If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.       If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.      > [!NOTE] >  The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (&quot;_&quot;) are escaped in the serialized XML. The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing."
  example:
  - "The following example creates a <xref:System.Data.DataTable> containing two columns and ten rows. The example writes the <xref:System.Data.DataTable> schema and data to a memory stream, by invoking the <xref:System.Data.DataTable.WriteXml%2A> method. The example creates a second <xref:System.Data.DataTable> and calls the ReadXml method to fill it with schema and data.  \n  \n [!code-vb[DataWorks DataTable.ReadXmlText#1](~/add/codesnippet/visualbasic/m-system.data.datatable._26_1.vb)]\n [!code-cs[DataWorks DataTable.ReadXmlText#1](~/add/codesnippet/csharp/m-system.data.datatable._26_1.cs)]"
  syntax:
    content: public System.Data.XmlReadMode ReadXml (System.IO.TextReader reader);
    parameters:
    - id: reader
      type: System.IO.TextReader
      description: "The <xref:System.IO.TextReader> that will be used to read the data."
    return:
      type: System.Data.XmlReadMode
      description: "The <xref href=&quot;System.Data.XmlReadMode&quot;></xref> used to read the data."
  overload: System.Data.DataTable.ReadXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.ReadXml(System.String)
  id: ReadXml(System.String)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: ReadXml(String)
  nameWithType: DataTable.ReadXml(String)
  fullName: System.Data.DataTable.ReadXml(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Reads XML schema and data into the <xref href=&quot;System.Data.DataTable&quot;></xref> from the specified file."
  remarks: "The current <xref:System.Data.DataTable> and its descendents are loaded with the data from the file named in the supplied <xref:System.String>. The behavior of this method is identical to that of the <xref:System.Data.DataSet.ReadXml%2A?displayProperty=fullName> method, except that in this case, data is loaded only for the current table and its descendants.       The ReadXml method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataTable> from an XML document, whereas the <xref:System.Data.DataTable.ReadXmlSchema%2A> method reads only the schema.       Note that the same is true for the <xref:System.Data.DataTable.WriteXml%2A> and <xref:System.Data.DataTable.WriteXmlSchema%2A> methods, respectively. To write XML data, or both schema and data from the `DataTable`, use the `WriteXml` method. To write just the schema, use the `WriteXmlSchema` method.      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.       If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.       If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.      > [!NOTE] >  The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (&quot;_&quot;) are escaped in the serialized XML. The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing.      ```   using System.Data;   public class A {      static void Main(string[] args) {         DataTable tabl = new DataTable(&quot;mytable&quot;);         tabl.Columns.Add(new DataColumn(&quot;id&quot;, typeof(int)));         for (int i = 0; i < 10; i++) {            DataRow row = tabl.NewRow();            row[&quot;id&quot;] = i;            tabl.Rows.Add(row);         }         tabl.WriteXml(&quot;f.xml&quot;, XmlWriteMode.WriteSchema);         DataTable newt = new DataTable();         newt.ReadXml(&quot;f.xml&quot;);      }   }   ```"
  example:
  - "The following example creates a <xref:System.Data.DataTable> containing two columns and ten rows. The example writes the <xref:System.Data.DataTable> schema and data to disk. The example creates a second <xref:System.Data.DataTable> and calls the ReadXml method to fill it with schema and data.  \n  \n [!code-cs[DataWorks DataTable.ReadXmlString#1](~/add/codesnippet/csharp/m-system.data.datatable._14_1.cs)]\n [!code-vb[DataWorks DataTable.ReadXmlString#1](~/add/codesnippet/visualbasic/m-system.data.datatable._14_1.vb)]"
  syntax:
    content: public System.Data.XmlReadMode ReadXml (string fileName);
    parameters:
    - id: fileName
      type: System.String
      description: "The name of the file from which to read the data."
    return:
      type: System.Data.XmlReadMode
      description: "The <xref href=&quot;System.Data.XmlReadMode&quot;></xref> used to read the data."
  overload: System.Data.DataTable.ReadXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.ReadXml(System.Xml.XmlReader)
  id: ReadXml(System.Xml.XmlReader)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: ReadXml(XmlReader)
  nameWithType: DataTable.ReadXml(XmlReader)
  fullName: System.Data.DataTable.ReadXml(XmlReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Reads XML Schema and Data into the <xref href=&quot;System.Data.DataTable&quot;></xref> using the specified <xref:System.Xml.XmlReader>."
  remarks: "The current <xref:System.Data.DataTable> and its descendents are loaded with the data from the file named in the supplied <xref:System.Xml.XmlReader>. The behavior of this method is identical to that of the ReadXml method, except that in this case, data is loaded only for the current table and its descendants.       The ReadXml method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataTable> from an XML document, whereas the <xref:System.Data.DataTable.ReadXmlSchema%2A> method reads only the schema.       Note that the same is true for the <xref:System.Data.DataTable.WriteXml%2A> and <xref:System.Data.DataTable.WriteXmlSchema%2A> methods, respectively. To write XML data, or both schema and data from the `DataTable`, use the `WriteXml` method. To write just the schema, use the `WriteXmlSchema` method.      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.       If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data. If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.       If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document. If the schema cannot be extended through inference in order to expose all data, an exception is raised.      > [!NOTE] >  The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like (&quot;_&quot;) are escaped in the serialized XML. The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same. When legal characters in XML element name are escaped, the element is ignored while processing."
  example:
  - "The following example creates a <xref:System.Data.DataTable> containing two columns and ten rows. The example writes the <xref:System.Data.DataTable> schema and data to an <xref:System.Xml.XmlReader>. The example creates a second <xref:System.Data.DataTable> and calls the ReadXml method to fill it with schema and data from the <xref:System.Xml.XmlReader> instance.  \n  \n [!code-cs[DataWorks DataTable.ReadXmlXmlReader#1](~/add/codesnippet/csharp/m-system.data.datatable._10_1.cs)]\n [!code-vb[DataWorks DataTable.ReadXmlXmlReader#1](~/add/codesnippet/visualbasic/m-system.data.datatable._10_1.vb)]"
  syntax:
    content: public System.Data.XmlReadMode ReadXml (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "The <xref:System.Xml.XmlReader> that will be used to read the data."
    return:
      type: System.Data.XmlReadMode
      description: "The <xref href=&quot;System.Data.XmlReadMode&quot;></xref> used to read the data."
  overload: System.Data.DataTable.ReadXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.ReadXmlSchema(System.IO.Stream)
  id: ReadXmlSchema(System.IO.Stream)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: ReadXmlSchema(Stream)
  nameWithType: DataTable.ReadXmlSchema(Stream)
  fullName: System.Data.DataTable.ReadXmlSchema(Stream)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Reads an XML schema into the <xref href=&quot;System.Data.DataTable&quot;></xref> using the specified stream."
  remarks: "Use the ReadXmlSchema method to create the schema for a <xref:System.Data.DataTable>. The schema includes table, relation, and constraint definitions.       To write a schema to an XML document, use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method.       The XML schema is interpreted according to the XSD standard.       Data corruption can occur if the msdata:DataType and the xs:type types do not match. No exception will be thrown.       The `ReadXmlSchema` method is generally invoked before invoking the <xref:System.Data.DataTable.ReadXml%2A> method which is used to fill the <xref:System.Data.DataTable>.       To create a nested relation using XML schema, use implicit nested elements. You can also configure the nested relation to use explicit column names. Elements must be implicitly nested in order for the corresponding DataTables to participate in a nested relation."
  example:
  - "The following console application creates a new <xref:System.Data.DataTable>, and writes the schema for that table to a <xref:System.IO.MemoryStream>. Then, the example creates a new <xref:System.Data.DataTable> and reads its schema from the saved XML schema.  \n  \n [!code-cs[DataWorks DataTable.ReadXmlIOStream#1](~/add/codesnippet/csharp/m-system.data.datatable._8_1.cs)]\n [!code-vb[DataWorks DataTable.ReadXmlIOStream#1](~/add/codesnippet/visualbasic/m-system.data.datatable._8_1.vb)]"
  syntax:
    content: public void ReadXmlSchema (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "The stream used to read the schema."
  overload: System.Data.DataTable.ReadXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.ReadXmlSchema(System.IO.TextReader)
  id: ReadXmlSchema(System.IO.TextReader)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: ReadXmlSchema(TextReader)
  nameWithType: DataTable.ReadXmlSchema(TextReader)
  fullName: System.Data.DataTable.ReadXmlSchema(TextReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Reads an XML schema into the <xref href=&quot;System.Data.DataTable&quot;></xref> using the specified <xref:System.IO.TextReader>."
  remarks: "Use the ReadXmlSchema method to create the schema for a <xref:System.Data.DataTable>. The schema includes table, relation, and constraint definitions.       To write a schema to an XML document, use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method.       The XML schema is interpreted according to the XSD standard.       Data corruption can occur if the msdata:DataType and the xs:type types do not match. No exception will be thrown.       The `ReadXmlSchema` method is generally invoked before invoking the <xref:System.Data.DataTable.ReadXml%2A> method which is used to fill the <xref:System.Data.DataTable>.       To create a nested relation using XML schema, use implicit nested elements. You can also reconfigure the nested relation to use explicit column names. Elements must be implicitly nested in order for the corresponding DataTables to participate in a nested relation."
  example:
  - "The following console application creates a new <xref:System.Data.DataTable>, and writes the schema for that table to a <xref:System.IO.MemoryStream>. Then, the example creates a new <xref:System.Data.DataTable> and reads its schema from the saved XML schema, using a <xref:System.IO.StreamReader> (which inherits from <xref:System.IO.TextReader>) as its source.  \n  \n [!code-cs[DataWorks DataTable.ReadXmlSchema#1](~/add/codesnippet/csharp/m-system.data.datatable._12_1.cs)]\n [!code-vb[DataWorks DataTable.ReadXmlSchema#1](~/add/codesnippet/visualbasic/m-system.data.datatable._12_1.vb)]"
  syntax:
    content: public void ReadXmlSchema (System.IO.TextReader reader);
    parameters:
    - id: reader
      type: System.IO.TextReader
      description: "The <xref:System.IO.TextReader> used to read the schema information."
  overload: System.Data.DataTable.ReadXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.ReadXmlSchema(System.String)
  id: ReadXmlSchema(System.String)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: ReadXmlSchema(String)
  nameWithType: DataTable.ReadXmlSchema(String)
  fullName: System.Data.DataTable.ReadXmlSchema(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Reads an XML schema into the <xref href=&quot;System.Data.DataTable&quot;></xref> from the specified file."
  remarks: "Use the ReadXmlSchema method to create the schema for a <xref:System.Data.DataTable>. The schema includes table, relation, and constraint definitions.       To write a schema to an XML document, use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method.       The XML schema is interpreted according to the XSD standard.       Data corruption can occur if the msdata:DataType and the xs:type types do not match. No exception will be thrown.       The `ReadXmlSchema` method is generally invoked before invoking the <xref:System.Data.DataTable.ReadXml%2A> method which is used to fill the `DataTable`.       To create a nested relation using XML schema, use implicit nested elements. You can also reconfigure the nested relation to use explicit column names. Elements must be implicitly nested in order for the corresponding DataTables to participate in a nested relation."
  example:
  - "The following console application creates a new <xref:System.Data.DataTable>, and writes the schema for that table to a file. Then, the example creates a new <xref:System.Data.DataTable> and reads its schema from the saved XML schema, using the file as its source.  \n  \n [!code-cs[DataWorks DataTable.ReadXmlSchemaString#1](~/add/codesnippet/csharp/m-system.data.datatable._16_1.cs)]\n [!code-vb[DataWorks DataTable.ReadXmlSchemaString#1](~/add/codesnippet/visualbasic/m-system.data.datatable._16_1.vb)]"
  syntax:
    content: public void ReadXmlSchema (string fileName);
    parameters:
    - id: fileName
      type: System.String
      description: "The name of the file from which to read the schema information."
  overload: System.Data.DataTable.ReadXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.ReadXmlSchema(System.Xml.XmlReader)
  id: ReadXmlSchema(System.Xml.XmlReader)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: ReadXmlSchema(XmlReader)
  nameWithType: DataTable.ReadXmlSchema(XmlReader)
  fullName: System.Data.DataTable.ReadXmlSchema(XmlReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Reads an XML schema into the <xref href=&quot;System.Data.DataTable&quot;></xref> using the specified <xref:System.Xml.XmlReader>."
  remarks: "Use the ReadXmlSchema method to create the schema for a <xref:System.Data.DataTable>. The schema includes table, relation, and constraint definitions.       To write a schema to an XML document, use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method.       The XML schema is interpreted according to the XSD standard.       Data corruption can occur if the msdata:DataType and the xs:type types do not match. No exception will be thrown.       The `ReadXmlSchema` method is generally invoked before invoking the <xref:System.Data.DataTable.ReadXml%2A> method which is used to fill the <xref:System.Data.DataTable>.      > [!NOTE] >  The way to create a nested relation using XML schema is to have implicit nested elements. Additionally, the nested relation could be re-wired, to use explicit column names. It is mandatory for elements to be implicitly nested for the corresponding DataTables to participate in a nested relation."
  example:
  - "The following console application creates a new <xref:System.Data.DataTable>, and writes the schema for that table to a <xref:System.IO.MemoryStream>. Then, the example creates a new <xref:System.Data.DataTable> and reads its schema from the saved XML schema, using a <xref:System.Xml.XmlTextReader> (which inherits from <xref:System.Xml.XmlReader>) as its source.  \n  \n [!code-cs[DataWorks DataTable.ReadXmlSchemaReader#1](~/add/codesnippet/csharp/m-system.data.datatable._17_1.cs)]\n [!code-vb[DataWorks DataTable.ReadXmlSchemaReader#1](~/add/codesnippet/visualbasic/m-system.data.datatable._17_1.vb)]"
  syntax:
    content: public void ReadXmlSchema (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "The <xref:System.Xml.XmlReader> used to read the schema information."
  overload: System.Data.DataTable.ReadXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.ReadXmlSerializable(System.Xml.XmlReader)
  id: ReadXmlSerializable(System.Xml.XmlReader)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: ReadXmlSerializable(XmlReader)
  nameWithType: DataTable.ReadXmlSerializable(XmlReader)
  fullName: System.Data.DataTable.ReadXmlSerializable(XmlReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Reads from an XML stream."
  syntax:
    content: protected virtual void ReadXmlSerializable (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "A <xref:System.Xml.XmlReader> object."
  overload: System.Data.DataTable.ReadXmlSerializable*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.RejectChanges
  id: RejectChanges
  parent: System.Data.DataTable
  langs:
  - csharp
  name: RejectChanges()
  nameWithType: DataTable.RejectChanges()
  fullName: System.Data.DataTable.RejectChanges()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Rolls back all changes that have been made to the table since it was loaded, or the last time <xref:System.Data.DataTable.AcceptChanges*> was called."
  remarks: "When RejectChanges is called, any <xref:System.Data.DataRow> objects that are still in edit-mode cancel their edits. New rows are removed. Rows with the <xref:System.Data.DataRowState> set to `Modified` or `Deleted` return back to their original state."
  example:
  - "The following example makes several changes to a <xref:System.Data.DataTable>, but rejects the changes by invoking the RejectChanges method.  \n  \n [!code-cs[Classic WebData DataTable.RejectChanges Example#1](~/add/codesnippet/csharp/m-system.data.datatable._3_1.cs)]\n [!code-vb[Classic WebData DataTable.RejectChanges Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._3_1.vb)]"
  syntax:
    content: public void RejectChanges ();
    parameters: []
  overload: System.Data.DataTable.RejectChanges*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.RemotingFormat
  id: RemotingFormat
  parent: System.Data.DataTable
  langs:
  - csharp
  name: RemotingFormat
  nameWithType: DataTable.RemotingFormat
  fullName: System.Data.DataTable.RemotingFormat
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Gets or sets the serialization format."
  syntax:
    content: public System.Data.SerializationFormat RemotingFormat { get; set; }
    return:
      type: System.Data.SerializationFormat
      description: "A <xref href=&quot;System.Data.SerializationFormat&quot;></xref> enumeration specifying either <xref uid=&quot;langword_csharp_Binary&quot; name=&quot;Binary&quot; href=&quot;&quot;></xref> or <xref uid=&quot;langword_csharp_Xml&quot; name=&quot;Xml&quot; href=&quot;&quot;></xref> serialization."
  overload: System.Data.DataTable.RemotingFormat*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Reset
  id: Reset
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Reset()
  nameWithType: DataTable.Reset()
  fullName: System.Data.DataTable.Reset()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Resets the <xref href=&quot;System.Data.DataTable&quot;></xref> to its original state. Reset removes all data, indexes, relations, and columns of the table. If a DataSet includes a DataTable, the table will still be part of the DataSet after the table is reset."
  syntax:
    content: public virtual void Reset ();
    parameters: []
  overload: System.Data.DataTable.Reset*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.RowChanged
  id: RowChanged
  parent: System.Data.DataTable
  langs:
  - csharp
  name: RowChanged
  nameWithType: DataTable.RowChanged
  fullName: System.Data.DataTable.RowChanged
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Occurs after a <xref href=&quot;System.Data.DataRow&quot;></xref> has been changed successfully."
  remarks: "For more information, see [Handling DataTable Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - >-
    [!code-vb[Classic WebData DataTable.RowChanged Example#1](~/add/codesnippet/visualbasic/e-system.data.datatable._0_1.vb)]
     [!code-cs[Classic WebData DataTable.RowChanged Example#1](~/add/codesnippet/csharp/e-system.data.datatable._0_1.cs)]
  syntax:
    content: public event System.Data.DataRowChangeEventHandler RowChanged;
    return:
      type: System.Data.DataRowChangeEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.RowChanging
  id: RowChanging
  parent: System.Data.DataTable
  langs:
  - csharp
  name: RowChanging
  nameWithType: DataTable.RowChanging
  fullName: System.Data.DataTable.RowChanging
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Occurs when a <xref href=&quot;System.Data.DataRow&quot;></xref> is changing."
  remarks: "For more information, see [Handling DataTable Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - >-
    [!code-cs[Classic WebData DataTable.RowChanging Example#1](~/add/codesnippet/csharp/e-system.data.datatable._1_1.cs)]
     [!code-vb[Classic WebData DataTable.RowChanging Example#1](~/add/codesnippet/visualbasic/e-system.data.datatable._1_1.vb)]
  syntax:
    content: public event System.Data.DataRowChangeEventHandler RowChanging;
    return:
      type: System.Data.DataRowChangeEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.RowDeleted
  id: RowDeleted
  parent: System.Data.DataTable
  langs:
  - csharp
  name: RowDeleted
  nameWithType: DataTable.RowDeleted
  fullName: System.Data.DataTable.RowDeleted
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Occurs after a row in the table has been deleted."
  remarks: "For more information, see [Handling DataTable Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - >-
    [!code-vb[Classic WebData DataTable.RowDeleted Example#1](~/add/codesnippet/visualbasic/e-system.data.datatable._3_1.vb)]
     [!code-cs[Classic WebData DataTable.RowDeleted Example#1](~/add/codesnippet/csharp/e-system.data.datatable._3_1.cs)]
  syntax:
    content: public event System.Data.DataRowChangeEventHandler RowDeleted;
    return:
      type: System.Data.DataRowChangeEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.RowDeleting
  id: RowDeleting
  parent: System.Data.DataTable
  langs:
  - csharp
  name: RowDeleting
  nameWithType: DataTable.RowDeleting
  fullName: System.Data.DataTable.RowDeleting
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Occurs before a row in the table is about to be deleted."
  remarks: "For more information, see [Handling DataTable Events](~/add/includes/ajax-current-ext-md.md)."
  example:
  - >-
    [!code-cs[Classic WebData DataTable.RowDeleting Example#1](~/add/codesnippet/csharp/e-system.data.datatable._2_1.cs)]
     [!code-vb[Classic WebData DataTable.RowDeleting Example#1](~/add/codesnippet/visualbasic/e-system.data.datatable._2_1.vb)]
  syntax:
    content: public event System.Data.DataRowChangeEventHandler RowDeleting;
    return:
      type: System.Data.DataRowChangeEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Rows
  id: Rows
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Rows
  nameWithType: DataTable.Rows
  fullName: System.Data.DataTable.Rows
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Gets the collection of rows that belong to this table."
  remarks: "To create a new <xref:System.Data.DataRow>, you must use the <xref:System.Data.DataTable.NewRow%2A> method to return a new object. Such an object is automatically configured according to the schema defined for the <xref:System.Data.DataTable> through its collection of <xref:System.Data.DataColumn> objects. After creating a new row and setting the values for each column in the row, add the row to the <xref:System.Data.DataRowCollection> using the `Add` method.       Each <xref:System.Data.DataRow> in the collection represents a row of data in the table. To commit a change to the value of a column in the row, you must invoke the <xref:System.Data.DataTable.AcceptChanges%2A> method."
  example:
  - "The following shows two examples of returning and setting rows. The first example uses the Rows property and prints the value of each column for every row. The second example uses the <xref:System.Data.DataTable> object's <xref:System.Data.DataTable.NewRow%2A> method to create a new <xref:System.Data.DataRow> object with the schema of the <xref:System.Data.DataTable>. After setting the row values, the row is added to the <xref:System.Data.DataRowCollection> through the `Add` method.  \n  \n [!code-cs[Classic WebData DataTable.Rows Example#1](~/add/codesnippet/csharp/p-system.data.datatable._1_1.cs)]\n [!code-vb[Classic WebData DataTable.Rows Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._1_1.vb)]"
  syntax:
    content: public System.Data.DataRowCollection Rows { get; }
    return:
      type: System.Data.DataRowCollection
      description: "A <xref href=&quot;System.Data.DataRowCollection&quot;></xref> that contains <xref href=&quot;System.Data.DataRow&quot;></xref> objects; otherwise a null value if no <xref href=&quot;System.Data.DataRow&quot;></xref> objects exist."
  overload: System.Data.DataTable.Rows*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Select
  id: Select
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Select()
  nameWithType: DataTable.Select()
  fullName: System.Data.DataTable.Select()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Gets an array of all <xref href=&quot;System.Data.DataRow&quot;></xref> objects."
  remarks: "To ensure the proper sort order, specify sort criteria with <xref:System.Data.DataTable.Select%2A> or <xref:System.Data.DataTable.Select%2A>."
  example:
  - "The following example returns an array of <xref:System.Data.DataRow> objects through the Select method.  \n  \n [!code-cs[Classic WebData DataTable.Select Example#1](~/add/codesnippet/csharp/m-system.data.datatable._6_1.cs)]\n [!code-vb[Classic WebData DataTable.Select Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._6_1.vb)]"
  syntax:
    content: public System.Data.DataRow[] Select ();
    parameters: []
    return:
      type: System.Data.DataRow[]
      description: "An array of <xref href=&quot;System.Data.DataRow&quot;></xref> objects."
  overload: System.Data.DataTable.Select*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Select(System.String)
  id: Select(System.String)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Select(String)
  nameWithType: DataTable.Select(String)
  fullName: System.Data.DataTable.Select(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Gets an array of all <xref href=&quot;System.Data.DataRow&quot;></xref> objects that match the filter criteria."
  remarks: "To create the `filterExpression` argument, use the same rules that apply to the <xref:System.Data.DataColumn> class&quot;s <xref:System.Data.DataColumn.Expression%2A> property value for creating filters.       To ensure the proper sort order, specify sort criteria with <xref:System.Data.DataTable.Select%2A> or <xref:System.Data.DataTable.Select%2A>.       If the column on the filter contains a null value, it will not be part of the result."
  example:
  - "The following example uses a filter expression to return an array of <xref:System.Data.DataRow> objects.  \n  \n [!code-cs[Classic WebData DataTable.Select1 Example#1](~/add/codesnippet/csharp/m-system.data.datatable._7_1.cs)]\n [!code-vb[Classic WebData DataTable.Select1 Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._7_1.vb)]"
  syntax:
    content: public System.Data.DataRow[] Select (string filterExpression);
    parameters:
    - id: filterExpression
      type: System.String
      description: "The criteria to use to filter the rows. For examples on how to filter rows, see [DataView RowFilter Syntax \\[C#\\]](http://www.csharp-examples.net/dataview-rowfilter/)."
    return:
      type: System.Data.DataRow[]
      description: "An array of <xref href=&quot;System.Data.DataRow&quot;></xref> objects."
  overload: System.Data.DataTable.Select*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Select(System.String,System.String)
  id: Select(System.String,System.String)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Select(String,String)
  nameWithType: DataTable.Select(String,String)
  fullName: System.Data.DataTable.Select(String,String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Gets an array of all <xref href=&quot;System.Data.DataRow&quot;></xref> objects that match the filter criteria, in the specified sort order."
  remarks: "To form the `filterExpression` argument, use the same rules for creating the <xref:System.Data.DataColumn> class&quot;s <xref:System.Data.DataColumn.Expression%2A> property value. The `Sort` argument also uses the same rules for creating class&quot;s <xref:System.Data.DataColumn.Expression%2A> strings.       If the column on the filter contains a null value, it will not be part of the result."
  example:
  - "The following example uses a filter expression to return an array of <xref:System.Data.DataRow> objects.  \n  \n [!code-cs[Classic WebData DataTable.Select2 Example#1](~/add/codesnippet/csharp/m-system.data.datatable._11_1.cs)]\n [!code-vb[Classic WebData DataTable.Select2 Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._11_1.vb)]"
  syntax:
    content: public System.Data.DataRow[] Select (string filterExpression, string sort);
    parameters:
    - id: filterExpression
      type: System.String
      description: "The criteria to use to filter the rows. For examples on how to filter rows, see [DataView RowFilter Syntax \\[C#\\]](http://www.csharp-examples.net/dataview-rowfilter/)."
    - id: sort
      type: System.String
      description: "A string specifying the column and sort direction."
    return:
      type: System.Data.DataRow[]
      description: "An array of <xref href=&quot;System.Data.DataRow&quot;></xref> objects matching the filter expression."
  overload: System.Data.DataTable.Select*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Select(System.String,System.String,System.Data.DataViewRowState)
  id: Select(System.String,System.String,System.Data.DataViewRowState)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Select(String,String,DataViewRowState)
  nameWithType: DataTable.Select(String,String,DataViewRowState)
  fullName: System.Data.DataTable.Select(String,String,DataViewRowState)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Gets an array of all <xref href=&quot;System.Data.DataRow&quot;></xref> objects that match the filter in the order of the sort that match the specified state."
  remarks: "To form the `filterExpression` argument, use the same rules for creating the <xref:System.Data.DataColumn> class&quot;s <xref:System.Data.DataColumn.Expression%2A> property value. The `Sort` argument also uses the same rules for creating class&quot;s <xref:System.Data.DataColumn.Expression%2A> strings.       If the column on the filter contains a null value, it will not be part of the result."
  example:
  - "The following example uses a filter expression and record state to return an array of <xref:System.Data.DataRow> objects.  \n  \n [!code-cs[Classic WebData DataTable.Select3 Example#1](~/add/codesnippet/csharp/c72cdab9-f58a-41a1-a322-_1.cs)]\n [!code-vb[Classic WebData DataTable.Select3 Example#1](~/add/codesnippet/visualbasic/c72cdab9-f58a-41a1-a322-_1.vb)]"
  syntax:
    content: public System.Data.DataRow[] Select (string filterExpression, string sort, System.Data.DataViewRowState recordStates);
    parameters:
    - id: filterExpression
      type: System.String
      description: "The criteria to use to filter the rows. For examples on how to filter rows, see [DataView RowFilter Syntax \\[C#\\]](http://www.csharp-examples.net/dataview-rowfilter/)."
    - id: sort
      type: System.String
      description: "A string specifying the column and sort direction."
    - id: recordStates
      type: System.Data.DataViewRowState
      description: "One of the <xref href=&quot;System.Data.DataViewRowState&quot;></xref> values."
    return:
      type: System.Data.DataRow[]
      description: "An array of <xref href=&quot;System.Data.DataRow&quot;></xref> objects."
  overload: System.Data.DataTable.Select*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Site
  id: Site
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Site
  nameWithType: DataTable.Site
  fullName: System.Data.DataTable.Site
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Gets or sets an <xref href=&quot;System.ComponentModel.ISite&quot;></xref> for the <xref href=&quot;System.Data.DataTable&quot;></xref>."
  remarks: "Sites bind a <xref:System.ComponentModel.Component> to a <xref:System.ComponentModel.Container> and enable communication between them, as well as provide a way for the container to manage its components."
  syntax:
    content: public override System.ComponentModel.ISite Site { get; set; }
    return:
      type: System.ComponentModel.ISite
      description: "An <xref href=&quot;System.ComponentModel.ISite&quot;></xref> for the <xref href=&quot;System.Data.DataTable&quot;></xref>."
  overload: System.Data.DataTable.Site*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.System#ComponentModel#IListSource#ContainsListCollection
  id: System#ComponentModel#IListSource#ContainsListCollection
  isEii: true
  parent: System.Data.DataTable
  langs:
  - csharp
  name: System.ComponentModel.IListSource.ContainsListCollection
  nameWithType: DataTable.System.ComponentModel.IListSource.ContainsListCollection
  fullName: System.Data.DataTable.System.ComponentModel.IListSource.ContainsListCollection
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "For a description of this member, see &lt;xref:System.ComponentModel.IListSource.ContainsListCollection%2A?displayProperty=fullName&gt;."
  remarks: "This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.DataTable> instance is cast to an <xref:System.ComponentModel.IListSource> interface."
  syntax:
    content: bool System.ComponentModel.IListSource.ContainsListCollection { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the collection is a collection of <xref:System.Collections.IList> objects; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Data.DataTable.System#ComponentModel#IListSource#ContainsListCollection*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.System#ComponentModel#IListSource#GetList
  id: System#ComponentModel#IListSource#GetList
  isEii: true
  parent: System.Data.DataTable
  langs:
  - csharp
  name: System.ComponentModel.IListSource.GetList()
  nameWithType: DataTable.System.ComponentModel.IListSource.GetList()
  fullName: System.Data.DataTable.System.ComponentModel.IListSource.GetList()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "For a description of this member, see &lt;xref:System.ComponentModel.IListSource.GetList%2A?displayProperty=fullName&gt;."
  remarks: "This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.DataTable> instance is cast to an <xref:System.ComponentModel.IListSource> interface."
  syntax:
    content: System.Collections.IList IListSource.GetList ();
    parameters: []
    return:
      type: System.Collections.IList
      description: "An <xref:System.Collections.IList> that can be bound to a data source from the object."
  overload: System.Data.DataTable.System#ComponentModel#IListSource#GetList*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#GetSchema
  id: System#Xml#Serialization#IXmlSerializable#GetSchema
  isEii: true
  parent: System.Data.DataTable
  langs:
  - csharp
  name: System.Xml.Serialization.IXmlSerializable.GetSchema()
  nameWithType: DataTable.System.Xml.Serialization.IXmlSerializable.GetSchema()
  fullName: System.Data.DataTable.System.Xml.Serialization.IXmlSerializable.GetSchema()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "For a description of this member, see &lt;xref:System.Xml.Serialization.IXmlSerializable.GetSchema%2A?displayProperty=fullName&gt;."
  remarks: "This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.Xml.Serialization.IXmlSerializable> interface."
  syntax:
    content: System.Xml.Schema.XmlSchema IXmlSerializable.GetSchema ();
    parameters: []
    return:
      type: System.Xml.Schema.XmlSchema
      description: "An <xref:System.Xml.Schema.XmlSchema> that describes the XML representation of the object that is produced by the <xref:System.Xml.Serialization.IXmlSerializable.WriteXml*> method and consumed by the <xref:System.Xml.Serialization.IXmlSerializable.ReadXml*> method."
  overload: System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#GetSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  id: System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  isEii: true
  parent: System.Data.DataTable
  langs:
  - csharp
  name: System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
  nameWithType: DataTable.System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
  fullName: System.Data.DataTable.System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "For a description of this member, see &lt;xref:System.Xml.Serialization.IXmlSerializable.ReadXml%2A?displayProperty=fullName&gt;."
  remarks: "This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.Xml.Serialization.IXmlSerializable> interface."
  syntax:
    content: void IXmlSerializable.ReadXml (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "An XmlReader."
  overload: System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#ReadXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  id: System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  isEii: true
  parent: System.Data.DataTable
  langs:
  - csharp
  name: System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
  nameWithType: DataTable.System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
  fullName: System.Data.DataTable.System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "For a description of this member, see &lt;xref:System.Xml.Serialization.IXmlSerializable.WriteXml%2A?displayProperty=fullName&gt;."
  remarks: "This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.Xml.Serialization.IXmlSerializable> interface."
  syntax:
    content: void IXmlSerializable.WriteXml (System.Xml.XmlWriter writer);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "An XmlWriter."
  overload: System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.TableCleared
  id: TableCleared
  parent: System.Data.DataTable
  langs:
  - csharp
  name: TableCleared
  nameWithType: DataTable.TableCleared
  fullName: System.Data.DataTable.TableCleared
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Occurs after a <xref href=&quot;System.Data.DataTable&quot;></xref> is cleared."
  remarks: "The TableCleared event is fired immediately after all rows have been successfully cleared but before the <xref:System.Data.DataTable.Clear%2A> method returns control back to the caller. The TableCleared event is not fired if there are any exceptions during the clear operation."
  syntax:
    content: public event System.Data.DataTableClearEventHandler TableCleared;
    return:
      type: System.Data.DataTableClearEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.TableClearing
  id: TableClearing
  parent: System.Data.DataTable
  langs:
  - csharp
  name: TableClearing
  nameWithType: DataTable.TableClearing
  fullName: System.Data.DataTable.TableClearing
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Occurs when a <xref href=&quot;System.Data.DataTable&quot;></xref> is cleared."
  remarks: "The TableClearing event is fired before processing of the <xref:System.Data.DataTable.Clear%2A> operation begins. This event is always fired when the <xref:System.Data.DataTable.Clear%2A> method is invoked, even if the table contains zero rows."
  syntax:
    content: public event System.Data.DataTableClearEventHandler TableClearing;
    return:
      type: System.Data.DataTableClearEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.TableName
  id: TableName
  parent: System.Data.DataTable
  langs:
  - csharp
  name: TableName
  nameWithType: DataTable.TableName
  fullName: System.Data.DataTable.TableName
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Gets or sets the name of the <xref href=&quot;System.Data.DataTable&quot;></xref>."
  remarks: "The TableName is used to return this table from the parent <xref:System.Data.DataSet> object&quot;s <xref:System.Data.DataTableCollection> (returned by the <xref:System.Data.DataSet.Tables%2A> property)."
  example:
  - "The following example prints the TableName for each table in a collection of <xref:System.Data.DataTable> objects.  \n  \n [!code-cs[Classic WebData DataTable.TableName Example#1](~/add/codesnippet/csharp/p-system.data.datatable._2_1.cs)]\n [!code-vb[Classic WebData DataTable.TableName Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._2_1.vb)]"
  syntax:
    content: public string TableName { get; set; }
    return:
      type: System.String
      description: "The name of the <xref href=&quot;System.Data.DataTable&quot;></xref>."
  overload: System.Data.DataTable.TableName*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> or empty string (&quot;&quot;) is passed in and this table belongs to a collection."
  - type: System.Data.DuplicateNameException
    commentId: T:System.Data.DuplicateNameException
    description: "The table belongs to a collection that already has a table with the same name. (Comparison is case-sensitive)."
  platform:
  - net462
- uid: System.Data.DataTable.TableNewRow
  id: TableNewRow
  parent: System.Data.DataTable
  langs:
  - csharp
  name: TableNewRow
  nameWithType: DataTable.TableNewRow
  fullName: System.Data.DataTable.TableNewRow
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Occurs when a new <xref href=&quot;System.Data.DataRow&quot;></xref> is inserted."
  remarks: "Fires after a new <xref:System.Data.DataRow> has been created using <xref:System.Data.DataTable.NewRow%2A>. This event is fired before the invoked `NewRow` method returns. The new <xref:System.Data.DataRow> instance is detached; it has not been added to the collection."
  syntax:
    content: public event System.Data.DataTableNewRowEventHandler TableNewRow;
    return:
      type: System.Data.DataTableNewRowEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.ToString
  id: ToString
  parent: System.Data.DataTable
  langs:
  - csharp
  name: ToString()
  nameWithType: DataTable.ToString()
  fullName: System.Data.DataTable.ToString()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Gets the <xref:System.Data.DataTable.TableName*> and <xref:System.Data.DataTable.DisplayExpression*>, if there is one as a concatenated string."
  remarks: "Gets the <xref:System.Data.DataTable.TableName%2A> and <xref:System.Data.DataTable.DisplayExpression%2A> for the <xref:System.Data.DataTable>."
  example:
  - "The following example returns the <xref:System.Data.DataTable.TableName%2A> and <xref:System.Data.DataTable.DisplayExpression%2A> using the ToString method.  \n  \n [!code-cs[Classic WebData DataTable.ToString Example#1](~/add/codesnippet/csharp/m-system.data.datatable._28_1.cs)]\n [!code-vb[Classic WebData DataTable.ToString Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._28_1.vb)]"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "A string consisting of the <xref:System.Data.DataTable.TableName*> and the <xref:System.Data.DataTable.DisplayExpression*> values."
  overload: System.Data.DataTable.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXml(System.IO.Stream)
  id: WriteXml(System.IO.Stream)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXml(Stream)
  nameWithType: DataTable.WriteXml(Stream)
  fullName: System.Data.DataTable.WriteXml(Stream)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Writes the current contents of the <xref href=&quot;System.Data.DataTable&quot;></xref> as XML using the specified <xref:System.IO.Stream>."
  remarks: "The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that includes the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`.       Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>."
  syntax:
    content: public void WriteXml (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "The stream to which the data will be written."
  overload: System.Data.DataTable.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXml(System.IO.TextWriter)
  id: WriteXml(System.IO.TextWriter)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXml(TextWriter)
  nameWithType: DataTable.WriteXml(TextWriter)
  fullName: System.Data.DataTable.WriteXml(TextWriter)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Writes the current contents of the <xref href=&quot;System.Data.DataTable&quot;></xref> as XML using the specified <xref:System.IO.TextWriter>."
  remarks: "The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that includes the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`.       Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>."
  syntax:
    content: public void WriteXml (System.IO.TextWriter writer);
    parameters:
    - id: writer
      type: System.IO.TextWriter
      description: "The <xref:System.IO.TextWriter> with which to write the content."
  overload: System.Data.DataTable.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXml(System.String)
  id: WriteXml(System.String)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXml(String)
  nameWithType: DataTable.WriteXml(String)
  fullName: System.Data.DataTable.WriteXml(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Writes the current contents of the <xref href=&quot;System.Data.DataTable&quot;></xref> as XML using the specified file."
  remarks: "The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that includes the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`.       Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>."
  syntax:
    content: public void WriteXml (string fileName);
    parameters:
    - id: fileName
      type: System.String
      description: "The file to which to write the XML data."
  overload: System.Data.DataTable.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXml(System.Xml.XmlWriter)
  id: WriteXml(System.Xml.XmlWriter)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXml(XmlWriter)
  nameWithType: DataTable.WriteXml(XmlWriter)
  fullName: System.Data.DataTable.WriteXml(XmlWriter)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Writes the current contents of the <xref href=&quot;System.Data.DataTable&quot;></xref> as XML using the specified <xref:System.Xml.XmlWriter>."
  remarks: "The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that include the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`.       Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>."
  syntax:
    content: public void WriteXml (System.Xml.XmlWriter writer);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "The <xref:System.Xml.XmlWriter> with which to write the contents."
  overload: System.Data.DataTable.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXml(System.IO.Stream,System.Boolean)
  id: WriteXml(System.IO.Stream,System.Boolean)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXml(Stream,Boolean)
  nameWithType: DataTable.WriteXml(Stream,Boolean)
  fullName: System.Data.DataTable.WriteXml(Stream,Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Writes the current contents of the <xref href=&quot;System.Data.DataTable&quot;></xref> as XML using the specified <xref:System.IO.Stream>. To save the data for the table and all its descendants, set the <code>writeHierarchy</code> parameter to <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  remarks: "Use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataTable> to an XML document. The schema includes table, relation, and constraint definitions.       The XML schema is written using the XSD standard.       To write the data to an XML document, use the <xref:System.Data.DataTable.WriteXml%2A> method.       Normally the `WriteXml` method writes the data only for the current table. To write the data for the current table and all of its descendant, related tables, call the method with the `writeHierarchy` parameter set to `true`.      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>."
  syntax:
    content: public void WriteXml (System.IO.Stream stream, bool writeHierarchy);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "The stream to which the data will be written."
    - id: writeHierarchy
      type: System.Boolean
      description: "If <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>, write the contents of the current table and all its descendants. If <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> (the default value), write the data for the current table only."
  overload: System.Data.DataTable.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)
  id: WriteXml(System.IO.Stream,System.Data.XmlWriteMode)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXml(Stream,XmlWriteMode)
  nameWithType: DataTable.WriteXml(Stream,XmlWriteMode)
  fullName: System.Data.DataTable.WriteXml(Stream,XmlWriteMode)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Writes the current data, and optionally the schema, for the <xref href=&quot;System.Data.DataTable&quot;></xref> to the specified file using the specified <xref href=&quot;System.Data.XmlWriteMode&quot;></xref>. To write the schema, set the value for the <code>mode</code> parameter to <xref uid=&quot;langword_csharp_WriteSchema&quot; name=&quot;WriteSchema&quot; href=&quot;&quot;></xref>."
  remarks: "The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that includes the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`.       Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>."
  syntax:
    content: public void WriteXml (System.IO.Stream stream, System.Data.XmlWriteMode mode);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "The stream to which the data will be written."
    - id: mode
      type: System.Data.XmlWriteMode
      description: "One of the <xref href=&quot;System.Data.XmlWriteMode&quot;></xref> values."
  overload: System.Data.DataTable.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Boolean)
  id: WriteXml(System.IO.TextWriter,System.Boolean)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXml(TextWriter,Boolean)
  nameWithType: DataTable.WriteXml(TextWriter,Boolean)
  fullName: System.Data.DataTable.WriteXml(TextWriter,Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Writes the current contents of the <xref href=&quot;System.Data.DataTable&quot;></xref> as XML using the specified <xref:System.IO.TextWriter>. To save the data for the table and all its descendants, set the <code>writeHierarchy</code> parameter to <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  remarks: "The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that includes the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`.       Normally the `WriteXml` method writes the data only for the current table. To write the data for the current table and all its descendant, related tables, call the method with the `writeHierarchy` parameter set to `true`.      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>."
  example:
  - "The following console application creates two <xref:System.Data.DataTable> instances, adds each to a <xref:System.Data.DataSet>, creates a <xref:System.Data.DataRelation> relating the two tables, and then uses the WriteXml method to write the data contained within the parent table to a <xref:System.IO.TextWriter>. The example demonstrates the behavior when setting the `writeHierarchy` parameter to `true`.  \n  \n [!code-cs[DataWorks DataTable.WriteXml#1](~/add/codesnippet/csharp/m-system.data.datatable._1_1.cs)]\n [!code-vb[DataWorks DataTable.WriteXml#1](~/add/codesnippet/visualbasic/m-system.data.datatable._1_1.vb)]"
  syntax:
    content: public void WriteXml (System.IO.TextWriter writer, bool writeHierarchy);
    parameters:
    - id: writer
      type: System.IO.TextWriter
      description: "The <xref:System.IO.TextWriter> with which to write the content."
    - id: writeHierarchy
      type: System.Boolean
      description: "If <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>, write the contents of the current table and all its descendants. If <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> (the default value), write the data for the current table only."
  overload: System.Data.DataTable.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)
  id: WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXml(TextWriter,XmlWriteMode)
  nameWithType: DataTable.WriteXml(TextWriter,XmlWriteMode)
  fullName: System.Data.DataTable.WriteXml(TextWriter,XmlWriteMode)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Writes the current data, and optionally the schema, for the <xref href=&quot;System.Data.DataTable&quot;></xref> using the specified <xref:System.IO.TextWriter> and <xref href=&quot;System.Data.XmlWriteMode&quot;></xref>. To write the schema, set the value for the <code>mode</code> parameter to <xref uid=&quot;langword_csharp_WriteSchema&quot; name=&quot;WriteSchema&quot; href=&quot;&quot;></xref>."
  remarks: "The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that includes the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`.       Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>."
  syntax:
    content: public void WriteXml (System.IO.TextWriter writer, System.Data.XmlWriteMode mode);
    parameters:
    - id: writer
      type: System.IO.TextWriter
      description: "The <xref:System.IO.TextWriter> used to write the document."
    - id: mode
      type: System.Data.XmlWriteMode
      description: "One of the <xref href=&quot;System.Data.XmlWriteMode&quot;></xref> values."
  overload: System.Data.DataTable.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXml(System.String,System.Boolean)
  id: WriteXml(System.String,System.Boolean)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXml(String,Boolean)
  nameWithType: DataTable.WriteXml(String,Boolean)
  fullName: System.Data.DataTable.WriteXml(String,Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Writes the current contents of the <xref href=&quot;System.Data.DataTable&quot;></xref> as XML using the specified file. To save the data for the table and all its descendants, set the <code>writeHierarchy</code> parameter to <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  remarks: "The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that includes the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`.       Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.       Normally the `WriteXml` method writes the data only for the current table. To write the data for the current table and all of its descendant, related tables, call the method with the `writeHierarchy` parameter set to `true`.      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>."
  syntax:
    content: public void WriteXml (string fileName, bool writeHierarchy);
    parameters:
    - id: fileName
      type: System.String
      description: "The file to which to write the XML data."
    - id: writeHierarchy
      type: System.Boolean
      description: "If <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>, write the contents of the current table and all its descendants. If <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> (the default value), write the data for the current table only."
  overload: System.Data.DataTable.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode)
  id: WriteXml(System.String,System.Data.XmlWriteMode)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXml(String,XmlWriteMode)
  nameWithType: DataTable.WriteXml(String,XmlWriteMode)
  fullName: System.Data.DataTable.WriteXml(String,XmlWriteMode)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Writes the current data, and optionally the schema, for the <xref href=&quot;System.Data.DataTable&quot;></xref> using the specified file and <xref href=&quot;System.Data.XmlWriteMode&quot;></xref>. To write the schema, set the value for the <code>mode</code> parameter to <xref uid=&quot;langword_csharp_WriteSchema&quot; name=&quot;WriteSchema&quot; href=&quot;&quot;></xref>."
  remarks: "The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that include the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`.       Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>."
  syntax:
    content: public void WriteXml (string fileName, System.Data.XmlWriteMode mode);
    parameters:
    - id: fileName
      type: System.String
      description: "The name of the file to which the data will be written."
    - id: mode
      type: System.Data.XmlWriteMode
      description: "One of the <xref href=&quot;System.Data.XmlWriteMode&quot;></xref> values."
  overload: System.Data.DataTable.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Boolean)
  id: WriteXml(System.Xml.XmlWriter,System.Boolean)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXml(XmlWriter,Boolean)
  nameWithType: DataTable.WriteXml(XmlWriter,Boolean)
  fullName: System.Data.DataTable.WriteXml(XmlWriter,Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Writes the current contents of the <xref href=&quot;System.Data.DataTable&quot;></xref> as XML using the specified <xref:System.Xml.XmlWriter>."
  remarks: "The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that include the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`.       Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.       Normally the `WriteXml` method writes the data only for the current table. To write the data for the current table and its entire descendant, related tables, call the method with the `writeHierarchy` parameter set to `true`.      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>."
  syntax:
    content: public void WriteXml (System.Xml.XmlWriter writer, bool writeHierarchy);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "The <xref:System.Xml.XmlWriter> with which to write the contents."
    - id: writeHierarchy
      type: System.Boolean
      description: "If <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>, write the contents of the current table and all its descendants. If <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> (the default value), write the data for the current table only."
  overload: System.Data.DataTable.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)
  id: WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXml(XmlWriter,XmlWriteMode)
  nameWithType: DataTable.WriteXml(XmlWriter,XmlWriteMode)
  fullName: System.Data.DataTable.WriteXml(XmlWriter,XmlWriteMode)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Writes the current data, and optionally the schema, for the <xref href=&quot;System.Data.DataTable&quot;></xref> using the specified <xref:System.Xml.XmlWriter> and <xref href=&quot;System.Data.XmlWriteMode&quot;></xref>. To write the schema, set the value for the <code>mode</code> parameter to <xref uid=&quot;langword_csharp_WriteSchema&quot; name=&quot;WriteSchema&quot; href=&quot;&quot;></xref>."
  remarks: "The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that include the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`.       Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>."
  syntax:
    content: public void WriteXml (System.Xml.XmlWriter writer, System.Data.XmlWriteMode mode);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "The <xref:System.Xml.XmlWriter> used to write the document."
    - id: mode
      type: System.Data.XmlWriteMode
      description: "One of the <xref href=&quot;System.Data.XmlWriteMode&quot;></xref> values."
  overload: System.Data.DataTable.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode,System.Boolean)
  id: WriteXml(System.IO.Stream,System.Data.XmlWriteMode,System.Boolean)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXml(Stream,XmlWriteMode,Boolean)
  nameWithType: DataTable.WriteXml(Stream,XmlWriteMode,Boolean)
  fullName: System.Data.DataTable.WriteXml(Stream,XmlWriteMode,Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Writes the current data, and optionally the schema, for the <xref href=&quot;System.Data.DataTable&quot;></xref> to the specified file using the specified <xref href=&quot;System.Data.XmlWriteMode&quot;></xref>. To write the schema, set the value for the <code>mode</code> parameter to <xref uid=&quot;langword_csharp_WriteSchema&quot; name=&quot;WriteSchema&quot; href=&quot;&quot;></xref>. To save the data for the table and all its descendants, set the <code>writeHierarchy</code> parameter to <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  remarks: "The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a `DataTable` into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that includes the `XmlWriteMode` parameter, and set its value to `WriteSchema`.       Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.       Normally, the `WriteXml` method saves data only for the current table. The `WriteXml` method provides a way to write either data only, or both data and schema from a `DataTable` into an XML document, whereas the `WriteXmlSchema` method writes only the schema. To write both data and schema, use one of the overloads that includes the `XmlWriteMode` parameter, and set its value to `WriteSchema`.       Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.       Normally the `WriteXml` method writes the data only for the current table. To write the data for the current table and all of its descendant, related tables, call the method with the `writeHierarchy` parameter set to `true`.      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>."
  syntax:
    content: public void WriteXml (System.IO.Stream stream, System.Data.XmlWriteMode mode, bool writeHierarchy);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "The stream to which the data will be written."
    - id: mode
      type: System.Data.XmlWriteMode
      description: "One of the <xref href=&quot;System.Data.XmlWriteMode&quot;></xref> values."
    - id: writeHierarchy
      type: System.Boolean
      description: "If <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>, write the contents of the current table and all its descendants. If <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> (the default value), write the data for the current table only."
  overload: System.Data.DataTable.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode,System.Boolean)
  id: WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode,System.Boolean)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXml(TextWriter,XmlWriteMode,Boolean)
  nameWithType: DataTable.WriteXml(TextWriter,XmlWriteMode,Boolean)
  fullName: System.Data.DataTable.WriteXml(TextWriter,XmlWriteMode,Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Writes the current data, and optionally the schema, for the <xref href=&quot;System.Data.DataTable&quot;></xref> using the specified <xref:System.IO.TextWriter> and <xref href=&quot;System.Data.XmlWriteMode&quot;></xref>. To write the schema, set the value for the <code>mode</code> parameter to <xref uid=&quot;langword_csharp_WriteSchema&quot; name=&quot;WriteSchema&quot; href=&quot;&quot;></xref>. To save the data for the table and all its descendants, set the <code>writeHierarchy</code> parameter to <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  remarks: "The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that includes the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`.       Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.       Normally, the `WriteXml` method saves data only for the current table. The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that includes the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`.       Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.       Normally the `WriteXml` method writes the data only for the current table. To write the data for the current table and all of its descendant, related tables, call the method with the `writeHierarchy` parameter set to `true`.      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>."
  example:
  - "The following console application creates two <xref:System.Data.DataTable> instances, adds each to a <xref:System.Data.DataSet>, creates a <xref:System.Data.DataRelation> relating the two tables, and then uses the WriteXml method to write the data contained within the parent table to a <xref:System.IO.TextWriter>. The example demonstrates the behavior when setting the `writeHierarchy` parameter to each of its values.  \n  \n [!code-cs[DataWorks DataTable.WriteXmlIO#1](~/add/codesnippet/csharp/a21e26c1-61d0-4d79-88a3-_1.cs)]\n [!code-vb[DataWorks DataTable.WriteXmlIO#1](~/add/codesnippet/visualbasic/a21e26c1-61d0-4d79-88a3-_1.vb)]  \n  \n The example displays the following output in the console window:  \n  \n```  \n==============================  \nCustomer table, without hierarchy  \n==============================  \n<NewDataSet>  \n  <xs:schema id=\"NewDataSet\" xmlns=\"\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema  \n\" xmlns:msdata=\"urn:schemas-microsoft-com:xml-msdata\">  \n    <xs:element name=\"NewDataSet\" msdata:IsDataSet=\"true\" msdata:MainDataTable=\"Table1\">  \n      <xs:complexType>  \n        <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">  \n          <xs:element name=\"Table1\">  \n            <xs:complexType>  \n              <xs:sequence>  \n                <xs:element name=\"ID\" type=\"xs:int\" />  \n                <xs:element name=\"Name\" type=\"xs:string\" minOccurs=\"0\" />  \n              </xs:sequence>  \n            </xs:complexType>  \n          </xs:element>  \n        </xs:choice>  \n      </xs:complexType>  \n      <xs:unique name=\"Constraint1\" msdata:PrimaryKey=\"true\">  \n        <xs:selector xpath=\".//Table1\" />  \n        <xs:field xpath=\"ID\" />  \n      </xs:unique>  \n    </xs:element>  \n  </xs:schema>  \n  <Table1>  \n    <ID>1</ID>  \n    <Name>Mary</Name>  \n  </Table1>  \n  <Table1>  \n    <ID>2</ID>  \n    <Name>Andy</Name>  \n  </Table1>  \n  <Table1>  \n    <ID>3</ID>  \n    <Name>Peter</Name>  \n  </Table1>  \n  <Table1>  \n    <ID>4</ID>  \n    <Name>Russ</Name>  \n  </Table1>  \n</NewDataSet>  \n==============================  \nCustomer table, with hierarchy  \n==============================  \n<NewDataSet>  \n  <xs:schema id=\"NewDataSet\" xmlns=\"\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema  \n\" xmlns:msdata=\"urn:schemas-microsoft-com:xml-msdata\">  \n    <xs:element name=\"NewDataSet\" msdata:IsDataSet=\"true\" msdata:MainDataTable=\"Table1\">  \n      <xs:complexType>  \n        <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">  \n          <xs:element name=\"Table1\">  \n            <xs:complexType>  \n              <xs:sequence>  \n                <xs:element name=\"ID\" type=\"xs:int\" />  \n                <xs:element name=\"Name\" type=\"xs:string\" minOccurs=\"0\" />  \n              </xs:sequence>  \n            </xs:complexType>  \n          </xs:element>  \n          <xs:element name=\"Table2\">  \n            <xs:complexType>  \n              <xs:sequence>  \n                <xs:element name=\"OrderID\" type=\"xs:int\" />  \n                <xs:element name=\"CustomerID\" type=\"xs:int\" minOccurs=\"0\" />  \n                <xs:element name=\"OrderDate\" type=\"xs:dateTime\" minOccurs=\"0\" />  \n  \n              </xs:sequence>  \n            </xs:complexType>  \n          </xs:element>  \n        </xs:choice>  \n      </xs:complexType>  \n      <xs:unique name=\"Constraint1\" msdata:PrimaryKey=\"true\">  \n        <xs:selector xpath=\".//Table1\" />  \n        <xs:field xpath=\"ID\" />  \n      </xs:unique>  \n      <xs:unique name=\"Table2_Constraint1\" msdata:ConstraintName=\"Constraint1\" m  \nsdata:PrimaryKey=\"true\">  \n        <xs:selector xpath=\".//Table2\" />  \n        <xs:field xpath=\"OrderID\" />  \n      </xs:unique>  \n      <xs:keyref name=\"CustomerOrder\" refer=\"Constraint1\">  \n        <xs:selector xpath=\".//Table2\" />  \n        <xs:field xpath=\"CustomerID\" />  \n      </xs:keyref>  \n    </xs:element>  \n  </xs:schema>  \n  <Table1>  \n    <ID>1</ID>  \n    <Name>Mary</Name>  \n  </Table1>  \n  <Table1>  \n    <ID>2</ID>  \n    <Name>Andy</Name>  \n  </Table1>  \n  <Table1>  \n    <ID>3</ID>  \n    <Name>Peter</Name>  \n  </Table1>  \n  <Table1>  \n    <ID>4</ID>  \n    <Name>Russ</Name>  \n  </Table1>  \n  <Table2>  \n    <OrderID>1</OrderID>  \n    <CustomerID>1</CustomerID>  \n    <OrderDate>2003-12-02T00:00:00.0000000-08:00</OrderDate>  \n  </Table2>  \n  <Table2>  \n    <OrderID>2</OrderID>  \n    <CustomerID>1</CustomerID>  \n    <OrderDate>2004-01-03T00:00:00.0000000-08:00</OrderDate>  \n  </Table2>  \n  <Table2>  \n    <OrderID>3</OrderID>  \n    <CustomerID>2</CustomerID>  \n    <OrderDate>2004-11-13T00:00:00.0000000-08:00</OrderDate>  \n  </Table2>  \n  <Table2>  \n    <OrderID>4</OrderID>  \n    <CustomerID>3</CustomerID>  \n    <OrderDate>2004-05-16T00:00:00.0000000-07:00</OrderDate>  \n  </Table2>  \n  <Table2>  \n    <OrderID>5</OrderID>  \n    <CustomerID>3</CustomerID>  \n    <OrderDate>2004-05-22T00:00:00.0000000-07:00</OrderDate>  \n  </Table2>  \n  <Table2>  \n    <OrderID>6</OrderID>  \n    <CustomerID>4</CustomerID>  \n    <OrderDate>2004-06-15T00:00:00.0000000-07:00</OrderDate>  \n  </Table2>  \n</NewDataSet>  \n```"
  syntax:
    content: public void WriteXml (System.IO.TextWriter writer, System.Data.XmlWriteMode mode, bool writeHierarchy);
    parameters:
    - id: writer
      type: System.IO.TextWriter
      description: "The <xref:System.IO.TextWriter> used to write the document."
    - id: mode
      type: System.Data.XmlWriteMode
      description: "One of the <xref href=&quot;System.Data.XmlWriteMode&quot;></xref> values."
    - id: writeHierarchy
      type: System.Boolean
      description: "If <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>, write the contents of the current table and all its descendants. If <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> (the default value), write the data for the current table only."
  overload: System.Data.DataTable.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode,System.Boolean)
  id: WriteXml(System.String,System.Data.XmlWriteMode,System.Boolean)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXml(String,XmlWriteMode,Boolean)
  nameWithType: DataTable.WriteXml(String,XmlWriteMode,Boolean)
  fullName: System.Data.DataTable.WriteXml(String,XmlWriteMode,Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Writes the current data, and optionally the schema, for the <xref href=&quot;System.Data.DataTable&quot;></xref> using the specified file and <xref href=&quot;System.Data.XmlWriteMode&quot;></xref>. To write the schema, set the value for the <code>mode</code> parameter to <xref uid=&quot;langword_csharp_WriteSchema&quot; name=&quot;WriteSchema&quot; href=&quot;&quot;></xref>. To save the data for the table and all its descendants, set the <code>writeHierarchy</code> parameter to <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  remarks: "The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that include the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`.       Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.       Normally, the `WriteXml` method saves data only for the current table. If you want to save the data for the current table and all of schema, the <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that include the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`.       Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.       Normally the `WriteXml` method writes the data only for the current table. To write the data for the current table and all descendant, related tables, call the method with the `writeHierarchy` parameter set to `true`.      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>."
  syntax:
    content: public void WriteXml (string fileName, System.Data.XmlWriteMode mode, bool writeHierarchy);
    parameters:
    - id: fileName
      type: System.String
      description: "The name of the file to which the data will be written."
    - id: mode
      type: System.Data.XmlWriteMode
      description: "One of the <xref href=&quot;System.Data.XmlWriteMode&quot;></xref> values."
    - id: writeHierarchy
      type: System.Boolean
      description: "If <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>, write the contents of the current table and all its descendants. If <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> (the default value), write the data for the current table only."
  overload: System.Data.DataTable.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode,System.Boolean)
  id: WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode,System.Boolean)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXml(XmlWriter,XmlWriteMode,Boolean)
  nameWithType: DataTable.WriteXml(XmlWriter,XmlWriteMode,Boolean)
  fullName: System.Data.DataTable.WriteXml(XmlWriter,XmlWriteMode,Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Writes the current data, and optionally the schema, for the <xref href=&quot;System.Data.DataTable&quot;></xref> using the specified <xref:System.Xml.XmlWriter> and <xref href=&quot;System.Data.XmlWriteMode&quot;></xref>. To write the schema, set the value for the <code>mode</code> parameter to <xref uid=&quot;langword_csharp_WriteSchema&quot; name=&quot;WriteSchema&quot; href=&quot;&quot;></xref>. To save the data for the table and all its descendants, set the <code>writeHierarchy</code> parameter to <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  remarks: "The <xref:System.Data.DataTable.WriteXml%2A> method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataTable> into an XML document, whereas the <xref:System.Data.DataTable.WriteXmlSchema%2A> method writes only the schema. To write both data and schema, use one of the overloads that include the <xref:System.Data.XmlWriteMode> parameter, and set its value to `WriteSchema`.       Note that the same is true for the <xref:System.Data.DataTable.ReadXml%2A> and <xref:System.Data.DataTable.ReadXmlSchema%2A> methods, respectively. To read XML data, or both schema and data into the `DataTable`, use the `ReadXml` method. To read just the schema, use the `ReadXmlSchema` method.       Normally the `WriteXml` method writes the data only for the current table. To write the data for the current table and its entire descendant, related tables, call the method with the `writeHierarchy` parameter set to `true`.      > [!NOTE] >  An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>."
  syntax:
    content: public void WriteXml (System.Xml.XmlWriter writer, System.Data.XmlWriteMode mode, bool writeHierarchy);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "The <xref:System.Xml.XmlWriter> used to write the document."
    - id: mode
      type: System.Data.XmlWriteMode
      description: "One of the <xref href=&quot;System.Data.XmlWriteMode&quot;></xref> values."
    - id: writeHierarchy
      type: System.Boolean
      description: "If <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>, write the contents of the current table and all its descendants. If <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> (the default value), write the data for the current table only."
  overload: System.Data.DataTable.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXmlSchema(System.IO.Stream)
  id: WriteXmlSchema(System.IO.Stream)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXmlSchema(Stream)
  nameWithType: DataTable.WriteXmlSchema(Stream)
  fullName: System.Data.DataTable.WriteXmlSchema(Stream)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Writes the current data structure of the <xref href=&quot;System.Data.DataTable&quot;></xref> as an XML schema to the specified stream."
  remarks: "Use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataTable> to an XML document. The schema includes table, relation, and constraint definitions.       The XML schema is written using the XSD standard.       To write the data to an XML document, use the <xref:System.Data.DataTable.WriteXml%2A> method."
  syntax:
    content: public void WriteXmlSchema (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "The stream to which the XML schema will be written."
  overload: System.Data.DataTable.WriteXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter)
  id: WriteXmlSchema(System.IO.TextWriter)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXmlSchema(TextWriter)
  nameWithType: DataTable.WriteXmlSchema(TextWriter)
  fullName: System.Data.DataTable.WriteXmlSchema(TextWriter)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Writes the current data structure of the <xref href=&quot;System.Data.DataTable&quot;></xref> as an XML schema using the specified <xref:System.IO.TextWriter>."
  remarks: "Use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataTable> to an XML document. The schema includes table, relation, and constraint definitions.       The XML schema is written using the XSD standard.       To write the data to an XML document, use the <xref:System.Data.DataTable.WriteXml%2A> method."
  syntax:
    content: public void WriteXmlSchema (System.IO.TextWriter writer);
    parameters:
    - id: writer
      type: System.IO.TextWriter
      description: "The <xref:System.IO.TextWriter> with which to write."
  overload: System.Data.DataTable.WriteXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXmlSchema(System.String)
  id: WriteXmlSchema(System.String)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXmlSchema(String)
  nameWithType: DataTable.WriteXmlSchema(String)
  fullName: System.Data.DataTable.WriteXmlSchema(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Writes the current data structure of the <xref href=&quot;System.Data.DataTable&quot;></xref> as an XML schema to the specified file."
  remarks: "Use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataTable> to an XML document. The schema includes table, relation, and constraint definitions.       The XML schema is written using the XSD standard.       To write the data to an XML document, use the <xref:System.Data.DataTable.WriteXml%2A> method."
  syntax:
    content: public void WriteXmlSchema (string fileName);
    parameters:
    - id: fileName
      type: System.String
      description: "The name of the file to use."
  overload: System.Data.DataTable.WriteXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter)
  id: WriteXmlSchema(System.Xml.XmlWriter)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXmlSchema(XmlWriter)
  nameWithType: DataTable.WriteXmlSchema(XmlWriter)
  fullName: System.Data.DataTable.WriteXmlSchema(XmlWriter)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Writes the current data structure of the <xref href=&quot;System.Data.DataTable&quot;></xref> as an XML schema using the specified <xref:System.Xml.XmlWriter>."
  remarks: "Use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataTable> to an XML document. The schema includes table, relation, and constraint definitions.       The XML schema is written using the XSD standard.       To write the data to an XML document, use the <xref:System.Data.DataTable.WriteXml%2A> method."
  syntax:
    content: public void WriteXmlSchema (System.Xml.XmlWriter writer);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "The <xref:System.Xml.XmlWriter> to use."
  overload: System.Data.DataTable.WriteXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXmlSchema(System.IO.Stream,System.Boolean)
  id: WriteXmlSchema(System.IO.Stream,System.Boolean)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXmlSchema(Stream,Boolean)
  nameWithType: DataTable.WriteXmlSchema(Stream,Boolean)
  fullName: System.Data.DataTable.WriteXmlSchema(Stream,Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Writes the current data structure of the <xref href=&quot;System.Data.DataTable&quot;></xref> as an XML schema to the specified stream. To save the schema for the table and all its descendants, set the <code>writeHierarchy</code> parameter to <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  remarks: "Use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataTable> to an XML document. The schema includes table, relation, and constraint definitions.       The XML schema is written using the XSD standard.       To write the data to an XML document, use the <xref:System.Data.DataTable.WriteXml%2A> method.       Normally the `WriteXmlSchema` method writes the schema only for the current table. To write the schema for the current table and its entire descendant, related tables, call the method with the `writeHierarchy` parameter set to `true`."
  syntax:
    content: public void WriteXmlSchema (System.IO.Stream stream, bool writeHierarchy);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "The stream to which the XML schema will be written."
    - id: writeHierarchy
      type: System.Boolean
      description: "If <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>, write the schema of the current table and all its descendants. If <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> (the default value), write the schema for the current table only."
  overload: System.Data.DataTable.WriteXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter,System.Boolean)
  id: WriteXmlSchema(System.IO.TextWriter,System.Boolean)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXmlSchema(TextWriter,Boolean)
  nameWithType: DataTable.WriteXmlSchema(TextWriter,Boolean)
  fullName: System.Data.DataTable.WriteXmlSchema(TextWriter,Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Writes the current data structure of the <xref href=&quot;System.Data.DataTable&quot;></xref> as an XML schema using the specified <xref:System.IO.TextWriter>. To save the schema for the table and all its descendants, set the <code>writeHierarchy</code> parameter to <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  remarks: "Use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataTable> to an XML document. The schema includes table, relation, and constraint definitions.       The XML schema is written using the XSD standard.       To write the data to an XML document, use the <xref:System.Data.DataTable.WriteXml%2A> method.       Normally the `WriteXmlSchema` method writes the schema only for the current table. To write the schema for the current table and its entire descendant, related tables, call the method with the `writeHierarchy` parameter set to `true`."
  example:
  - "The following console application creates two <xref:System.Data.DataTable> instances, adds each to a <xref:System.Data.DataSet>, creates a <xref:System.Data.DataRelation> relating the two tables, and then uses the WriteXmlSchema method to write the data contained within the parent table to a <xref:System.IO.TextWriter>. The example demonstrates the behavior when setting the `writeHierarchy` parameter to each of its values.  \n  \n [!code-cs[DataWorks DataTable.WriteXmlSchema#1](~/add/codesnippet/csharp/m-system.data.datatable._30_1.cs)]\n [!code-vb[DataWorks DataTable.WriteXmlSchema#1](~/add/codesnippet/visualbasic/m-system.data.datatable._30_1.vb)]  \n  \n The example displays the following output in the console window:  \n  \n```  \n==============================  \nCustomer table, without hierarchy  \n==============================  \n<?xml version=\"1.0\" encoding=\"utf-16\"?>  \n<xs:schema id=\"NewDataSet\" xmlns=\"\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"  \nxmlns:msdata=\"urn:schemas-microsoft-com:xml-msdata\">  \n  <xs:element name=\"NewDataSet\" msdata:IsDataSet=\"true\" msdata:MainDataTable=\"Ta  \nble1\">  \n    <xs:complexType>  \n      <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">  \n        <xs:element name=\"Table1\">  \n          <xs:complexType>  \n            <xs:sequence>  \n              <xs:element name=\"ID\" type=\"xs:int\" />  \n              <xs:element name=\"Name\" type=\"xs:string\" minOccurs=\"0\" />  \n            </xs:sequence>  \n          </xs:complexType>  \n        </xs:element>  \n      </xs:choice>  \n    </xs:complexType>  \n    <xs:unique name=\"Constraint1\" msdata:PrimaryKey=\"true\">  \n      <xs:selector xpath=\".//Table1\" />  \n      <xs:field xpath=\"ID\" />  \n    </xs:unique>  \n  </xs:element>  \n</xs:schema>  \n==============================  \nCustomer table, with hierarchy  \n==============================  \n<?xml version=\"1.0\" encoding=\"utf-16\"?>  \n<xs:schema id=\"NewDataSet\" xmlns=\"\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"  \nxmlns:msdata=\"urn:schemas-microsoft-com:xml-msdata\">  \n  <xs:element name=\"NewDataSet\" msdata:IsDataSet=\"true\" msdata:MainDataTable=\"Table1\">  \n    <xs:complexType>  \n      <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">  \n        <xs:element name=\"Table1\">  \n          <xs:complexType>  \n            <xs:sequence>  \n              <xs:element name=\"ID\" type=\"xs:int\" />  \n              <xs:element name=\"Name\" type=\"xs:string\" minOccurs=\"0\" />  \n            </xs:sequence>  \n          </xs:complexType>  \n        </xs:element>  \n        <xs:element name=\"Table2\">  \n          <xs:complexType>  \n            <xs:sequence>  \n              <xs:element name=\"OrderID\" type=\"xs:int\" />  \n              <xs:element name=\"CustomerID\" type=\"xs:int\" minOccurs=\"0\" />  \n              <xs:element name=\"OrderDate\" type=\"xs:dateTime\" minOccurs=\"0\" />  \n            </xs:sequence>  \n          </xs:complexType>  \n        </xs:element>  \n      </xs:choice>  \n    </xs:complexType>  \n    <xs:unique name=\"Constraint1\" msdata:PrimaryKey=\"true\">  \n      <xs:selector xpath=\".//Table1\" />  \n      <xs:field xpath=\"ID\" />  \n    </xs:unique>  \n    <xs:unique name=\"Table2_Constraint1\" msdata:ConstraintName=\"Constraint1\" msdata:PrimaryKey=\"true\">  \n      <xs:selector xpath=\".//Table2\" />  \n      <xs:field xpath=\"OrderID\" />  \n    </xs:unique>  \n    <xs:keyref name=\"CustomerOrder\" refer=\"Constraint1\">  \n      <xs:selector xpath=\".//Table2\" />  \n      <xs:field xpath=\"CustomerID\" />  \n    </xs:keyref>  \n  </xs:element>  \n</xs:schema>  \n```"
  syntax:
    content: public void WriteXmlSchema (System.IO.TextWriter writer, bool writeHierarchy);
    parameters:
    - id: writer
      type: System.IO.TextWriter
      description: "The <xref:System.IO.TextWriter> with which to write."
    - id: writeHierarchy
      type: System.Boolean
      description: "If <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>, write the schema of the current table and all its descendants. If <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> (the default value), write the schema for the current table only."
  overload: System.Data.DataTable.WriteXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXmlSchema(System.String,System.Boolean)
  id: WriteXmlSchema(System.String,System.Boolean)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXmlSchema(String,Boolean)
  nameWithType: DataTable.WriteXmlSchema(String,Boolean)
  fullName: System.Data.DataTable.WriteXmlSchema(String,Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Writes the current data structure of the <xref href=&quot;System.Data.DataTable&quot;></xref> as an XML schema to the specified file. To save the schema for the table and all its descendants, set the <code>writeHierarchy</code> parameter to <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  remarks: "Use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataTable> to an XML document. The schema includes table, relation, and constraint definitions.       The XML schema is written using the XSD standard.       To write the data to an XML document, use the <xref:System.Data.DataTable.WriteXml%2A> method.       Normally the `WriteXmlSchema` method writes the schema only for the current table. To write the schema for the current table and its entire descendant, related tables, call the method with the `writeHierarchy` parameter set to `true`."
  syntax:
    content: public void WriteXmlSchema (string fileName, bool writeHierarchy);
    parameters:
    - id: fileName
      type: System.String
      description: "The name of the file to use."
    - id: writeHierarchy
      type: System.Boolean
      description: "If <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>, write the schema of the current table and all its descendants. If <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> (the default value), write the schema for the current table only."
  overload: System.Data.DataTable.WriteXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter,System.Boolean)
  id: WriteXmlSchema(System.Xml.XmlWriter,System.Boolean)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXmlSchema(XmlWriter,Boolean)
  nameWithType: DataTable.WriteXmlSchema(XmlWriter,Boolean)
  fullName: System.Data.DataTable.WriteXmlSchema(XmlWriter,Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Writes the current data structure of the <xref href=&quot;System.Data.DataTable&quot;></xref> as an XML schema using the specified <xref:System.Xml.XmlWriter>. To save the schema for the table and all its descendants, set the <code>writeHierarchy</code> parameter to <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  remarks: "Use the <xref:System.Data.DataTable.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataTable> to an XML document. The schema includes table, relation, and constraint definitions.       The XML schema is written using the XSD standard.       To write the data to an XML document, use the <xref:System.Data.DataTable.WriteXml%2A> method.       Normally the `WriteXmlSchema` method writes the schema only for the current table. To write the schema for the current table and its entire descendant, related tables, call the method with the `writeHierarchy` parameter set to `true`."
  syntax:
    content: public void WriteXmlSchema (System.Xml.XmlWriter writer, bool writeHierarchy);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "The <xref:System.Xml.XmlWriter> used to write the document."
    - id: writeHierarchy
      type: System.Boolean
      description: "If <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>, write the schema of the current table and all its descendants. If <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> (the default value), write the schema for the current table only."
  overload: System.Data.DataTable.WriteXmlSchema*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.MarshalByValueComponent
  isExternal: false
  name: System.ComponentModel.MarshalByValueComponent
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.Data.ConstraintException
  parent: System.Data
  isExternal: false
  name: ConstraintException
  nameWithType: ConstraintException
  fullName: System.Data.ConstraintException
- uid: System.Data.NoNullAllowedException
  parent: System.Data
  isExternal: false
  name: NoNullAllowedException
  nameWithType: NoNullAllowedException
  fullName: System.Data.NoNullAllowedException
- uid: System.Data.DataException
  parent: System.Data
  isExternal: false
  name: DataException
  nameWithType: DataException
  fullName: System.Data.DataException
- uid: System.Data.DuplicateNameException
  parent: System.Data
  isExternal: false
  name: DuplicateNameException
  nameWithType: DuplicateNameException
  fullName: System.Data.DuplicateNameException
- uid: System.Data.DataTable.#ctor
  parent: System.Data.DataTable
  isExternal: false
  name: DataTable()
  nameWithType: DataTable.DataTable()
  fullName: System.Data.DataTable.DataTable()
- uid: System.Data.DataTable.#ctor(System.String)
  parent: System.Data.DataTable
  isExternal: false
  name: DataTable(String)
  nameWithType: DataTable.DataTable(String)
  fullName: System.Data.DataTable.DataTable(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.DataTable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Data.DataTable
  isExternal: false
  name: DataTable(SerializationInfo,StreamingContext)
  nameWithType: DataTable.DataTable(SerializationInfo,StreamingContext)
  fullName: System.Data.DataTable.DataTable(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Data.DataTable.#ctor(System.String,System.String)
  parent: System.Data.DataTable
  isExternal: false
  name: DataTable(String,String)
  nameWithType: DataTable.DataTable(String,String)
  fullName: System.Data.DataTable.DataTable(String,String)
- uid: System.Data.DataTable.AcceptChanges
  parent: System.Data.DataTable
  isExternal: false
  name: AcceptChanges()
  nameWithType: DataTable.AcceptChanges()
  fullName: System.Data.DataTable.AcceptChanges()
- uid: System.Data.DataTable.BeginInit
  parent: System.Data.DataTable
  isExternal: false
  name: BeginInit()
  nameWithType: DataTable.BeginInit()
  fullName: System.Data.DataTable.BeginInit()
- uid: System.Data.DataTable.BeginLoadData
  parent: System.Data.DataTable
  isExternal: false
  name: BeginLoadData()
  nameWithType: DataTable.BeginLoadData()
  fullName: System.Data.DataTable.BeginLoadData()
- uid: System.Data.DataTable.CaseSensitive
  parent: System.Data.DataTable
  isExternal: false
  name: CaseSensitive
  nameWithType: DataTable.CaseSensitive
  fullName: System.Data.DataTable.CaseSensitive
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.DataTable.ChildRelations
  parent: System.Data.DataTable
  isExternal: false
  name: ChildRelations
  nameWithType: DataTable.ChildRelations
  fullName: System.Data.DataTable.ChildRelations
- uid: System.Data.DataRelationCollection
  parent: System.Data
  isExternal: false
  name: DataRelationCollection
  nameWithType: DataRelationCollection
  fullName: System.Data.DataRelationCollection
- uid: System.Data.DataTable.Clear
  parent: System.Data.DataTable
  isExternal: false
  name: Clear()
  nameWithType: DataTable.Clear()
  fullName: System.Data.DataTable.Clear()
- uid: System.Data.DataTable.Clone
  parent: System.Data.DataTable
  isExternal: false
  name: Clone()
  nameWithType: DataTable.Clone()
  fullName: System.Data.DataTable.Clone()
- uid: System.Data.DataTable
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Data.DataTable.ColumnChanged
  parent: System.Data.DataTable
  isExternal: false
  name: ColumnChanged
  nameWithType: DataTable.ColumnChanged
  fullName: System.Data.DataTable.ColumnChanged
- uid: System.Data.DataColumnChangeEventHandler
  parent: System.Data
  isExternal: false
  name: DataColumnChangeEventHandler
  nameWithType: DataColumnChangeEventHandler
  fullName: System.Data.DataColumnChangeEventHandler
- uid: System.Data.DataTable.ColumnChanging
  parent: System.Data.DataTable
  isExternal: false
  name: ColumnChanging
  nameWithType: DataTable.ColumnChanging
  fullName: System.Data.DataTable.ColumnChanging
- uid: System.Data.DataTable.Columns
  parent: System.Data.DataTable
  isExternal: false
  name: Columns
  nameWithType: DataTable.Columns
  fullName: System.Data.DataTable.Columns
- uid: System.Data.DataColumnCollection
  parent: System.Data
  isExternal: false
  name: DataColumnCollection
  nameWithType: DataColumnCollection
  fullName: System.Data.DataColumnCollection
- uid: System.Data.DataTable.Compute(System.String,System.String)
  parent: System.Data.DataTable
  isExternal: false
  name: Compute(String,String)
  nameWithType: DataTable.Compute(String,String)
  fullName: System.Data.DataTable.Compute(String,String)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.DataTable.Constraints
  parent: System.Data.DataTable
  isExternal: false
  name: Constraints
  nameWithType: DataTable.Constraints
  fullName: System.Data.DataTable.Constraints
- uid: System.Data.ConstraintCollection
  parent: System.Data
  isExternal: false
  name: ConstraintCollection
  nameWithType: ConstraintCollection
  fullName: System.Data.ConstraintCollection
- uid: System.Data.DataTable.Copy
  parent: System.Data.DataTable
  isExternal: false
  name: Copy()
  nameWithType: DataTable.Copy()
  fullName: System.Data.DataTable.Copy()
- uid: System.Data.DataTable.CreateDataReader
  parent: System.Data.DataTable
  isExternal: false
  name: CreateDataReader()
  nameWithType: DataTable.CreateDataReader()
  fullName: System.Data.DataTable.CreateDataReader()
- uid: System.Data.DataTableReader
  parent: System.Data
  isExternal: false
  name: DataTableReader
  nameWithType: DataTableReader
  fullName: System.Data.DataTableReader
- uid: System.Data.DataTable.CreateInstance
  parent: System.Data.DataTable
  isExternal: false
  name: CreateInstance()
  nameWithType: DataTable.CreateInstance()
  fullName: System.Data.DataTable.CreateInstance()
- uid: System.Data.DataTable.DataSet
  parent: System.Data.DataTable
  isExternal: false
  name: DataSet
  nameWithType: DataTable.DataSet
  fullName: System.Data.DataTable.DataSet
- uid: System.Data.DataSet
  parent: System.Data
  isExternal: false
  name: DataSet
  nameWithType: DataSet
  fullName: System.Data.DataSet
- uid: System.Data.DataTable.DefaultView
  parent: System.Data.DataTable
  isExternal: false
  name: DefaultView
  nameWithType: DataTable.DefaultView
  fullName: System.Data.DataTable.DefaultView
- uid: System.Data.DataView
  parent: System.Data
  isExternal: false
  name: DataView
  nameWithType: DataView
  fullName: System.Data.DataView
- uid: System.Data.DataTable.DisplayExpression
  parent: System.Data.DataTable
  isExternal: false
  name: DisplayExpression
  nameWithType: DataTable.DisplayExpression
  fullName: System.Data.DataTable.DisplayExpression
- uid: System.Data.DataTable.EndInit
  parent: System.Data.DataTable
  isExternal: false
  name: EndInit()
  nameWithType: DataTable.EndInit()
  fullName: System.Data.DataTable.EndInit()
- uid: System.Data.DataTable.EndLoadData
  parent: System.Data.DataTable
  isExternal: false
  name: EndLoadData()
  nameWithType: DataTable.EndLoadData()
  fullName: System.Data.DataTable.EndLoadData()
- uid: System.Data.DataTable.ExtendedProperties
  parent: System.Data.DataTable
  isExternal: false
  name: ExtendedProperties
  nameWithType: DataTable.ExtendedProperties
  fullName: System.Data.DataTable.ExtendedProperties
- uid: System.Data.PropertyCollection
  parent: System.Data
  isExternal: false
  name: PropertyCollection
  nameWithType: PropertyCollection
  fullName: System.Data.PropertyCollection
- uid: System.Data.DataTable.fInitInProgress
  parent: System.Data.DataTable
  isExternal: false
  name: fInitInProgress
  nameWithType: DataTable.fInitInProgress
  fullName: System.Data.DataTable.fInitInProgress
- uid: System.Data.DataTable.GetChanges
  parent: System.Data.DataTable
  isExternal: false
  name: GetChanges()
  nameWithType: DataTable.GetChanges()
  fullName: System.Data.DataTable.GetChanges()
- uid: System.Data.DataTable.GetChanges(System.Data.DataRowState)
  parent: System.Data.DataTable
  isExternal: false
  name: GetChanges(DataRowState)
  nameWithType: DataTable.GetChanges(DataRowState)
  fullName: System.Data.DataTable.GetChanges(DataRowState)
- uid: System.Data.DataRowState
  parent: System.Data
  isExternal: false
  name: DataRowState
  nameWithType: DataRowState
  fullName: System.Data.DataRowState
- uid: System.Data.DataTable.GetDataTableSchema(System.Xml.Schema.XmlSchemaSet)
  parent: System.Data.DataTable
  isExternal: false
  name: GetDataTableSchema(XmlSchemaSet)
  nameWithType: DataTable.GetDataTableSchema(XmlSchemaSet)
  fullName: System.Data.DataTable.GetDataTableSchema(XmlSchemaSet)
- uid: System.Xml.Schema.XmlSchemaComplexType
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaComplexType
  nameWithType: XmlSchemaComplexType
  fullName: System.Xml.Schema.XmlSchemaComplexType
- uid: System.Xml.Schema.XmlSchemaSet
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaSet
  nameWithType: XmlSchemaSet
  fullName: System.Xml.Schema.XmlSchemaSet
- uid: System.Data.DataTable.GetErrors
  parent: System.Data.DataTable
  isExternal: false
  name: GetErrors()
  nameWithType: DataTable.GetErrors()
  fullName: System.Data.DataTable.GetErrors()
- uid: System.Data.DataRow[]
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow[]
  spec.csharp:
  - uid: System.Data.DataRow
    name: DataRow
    nameWithType: DataRow
    fullName: DataRow[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.DataTable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Data.DataTable
  isExternal: false
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: DataTable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Data.DataTable.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Data.DataTable.GetRowType
  parent: System.Data.DataTable
  isExternal: false
  name: GetRowType()
  nameWithType: DataTable.GetRowType()
  fullName: System.Data.DataTable.GetRowType()
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Data.DataTable.GetSchema
  parent: System.Data.DataTable
  isExternal: false
  name: GetSchema()
  nameWithType: DataTable.GetSchema()
  fullName: System.Data.DataTable.GetSchema()
- uid: System.Xml.Schema.XmlSchema
  parent: System.Xml.Schema
  isExternal: true
  name: XmlSchema
  nameWithType: XmlSchema
  fullName: System.Xml.Schema.XmlSchema
- uid: System.Data.DataTable.HasErrors
  parent: System.Data.DataTable
  isExternal: false
  name: HasErrors
  nameWithType: DataTable.HasErrors
  fullName: System.Data.DataTable.HasErrors
- uid: System.Data.DataTable.ImportRow(System.Data.DataRow)
  parent: System.Data.DataTable
  isExternal: false
  name: ImportRow(DataRow)
  nameWithType: DataTable.ImportRow(DataRow)
  fullName: System.Data.DataTable.ImportRow(DataRow)
- uid: System.Data.DataRow
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow
- uid: System.Data.DataTable.Initialized
  parent: System.Data.DataTable
  isExternal: false
  name: Initialized
  nameWithType: DataTable.Initialized
  fullName: System.Data.DataTable.Initialized
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.Data.DataTable.IsInitialized
  parent: System.Data.DataTable
  isExternal: false
  name: IsInitialized
  nameWithType: DataTable.IsInitialized
  fullName: System.Data.DataTable.IsInitialized
- uid: System.Data.DataTable.Load(System.Data.IDataReader)
  parent: System.Data.DataTable
  isExternal: false
  name: Load(IDataReader)
  nameWithType: DataTable.Load(IDataReader)
  fullName: System.Data.DataTable.Load(IDataReader)
- uid: System.Data.IDataReader
  parent: System.Data
  isExternal: false
  name: IDataReader
  nameWithType: IDataReader
  fullName: System.Data.IDataReader
- uid: System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)
  parent: System.Data.DataTable
  isExternal: false
  name: Load(IDataReader,LoadOption)
  nameWithType: DataTable.Load(IDataReader,LoadOption)
  fullName: System.Data.DataTable.Load(IDataReader,LoadOption)
- uid: System.Data.LoadOption
  parent: System.Data
  isExternal: false
  name: LoadOption
  nameWithType: LoadOption
  fullName: System.Data.LoadOption
- uid: System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)
  parent: System.Data.DataTable
  isExternal: false
  name: Load(IDataReader,LoadOption,FillErrorEventHandler)
  nameWithType: DataTable.Load(IDataReader,LoadOption,FillErrorEventHandler)
  fullName: System.Data.DataTable.Load(IDataReader,LoadOption,FillErrorEventHandler)
- uid: System.Data.FillErrorEventHandler
  parent: System.Data
  isExternal: false
  name: FillErrorEventHandler
  nameWithType: FillErrorEventHandler
  fullName: System.Data.FillErrorEventHandler
- uid: System.Data.DataTable.LoadDataRow(System.Object[],System.Boolean)
  parent: System.Data.DataTable
  isExternal: false
  name: LoadDataRow(Object[],Boolean)
  nameWithType: DataTable.LoadDataRow(Object[],Boolean)
  fullName: System.Data.DataTable.LoadDataRow(Object[],Boolean)
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.DataTable.LoadDataRow(System.Object[],System.Data.LoadOption)
  parent: System.Data.DataTable
  isExternal: false
  name: LoadDataRow(Object[],LoadOption)
  nameWithType: DataTable.LoadDataRow(Object[],LoadOption)
  fullName: System.Data.DataTable.LoadDataRow(Object[],LoadOption)
- uid: System.Data.DataTable.Locale
  parent: System.Data.DataTable
  isExternal: false
  name: Locale
  nameWithType: DataTable.Locale
  fullName: System.Data.DataTable.Locale
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Data.DataTable.Merge(System.Data.DataTable)
  parent: System.Data.DataTable
  isExternal: false
  name: Merge(DataTable)
  nameWithType: DataTable.Merge(DataTable)
  fullName: System.Data.DataTable.Merge(DataTable)
- uid: System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean)
  parent: System.Data.DataTable
  isExternal: false
  name: Merge(DataTable,Boolean)
  nameWithType: DataTable.Merge(DataTable,Boolean)
  fullName: System.Data.DataTable.Merge(DataTable,Boolean)
- uid: System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)
  parent: System.Data.DataTable
  isExternal: false
  name: Merge(DataTable,Boolean,MissingSchemaAction)
  nameWithType: DataTable.Merge(DataTable,Boolean,MissingSchemaAction)
  fullName: System.Data.DataTable.Merge(DataTable,Boolean,MissingSchemaAction)
- uid: System.Data.MissingSchemaAction
  parent: System.Data
  isExternal: false
  name: MissingSchemaAction
  nameWithType: MissingSchemaAction
  fullName: System.Data.MissingSchemaAction
- uid: System.Data.DataTable.MinimumCapacity
  parent: System.Data.DataTable
  isExternal: false
  name: MinimumCapacity
  nameWithType: DataTable.MinimumCapacity
  fullName: System.Data.DataTable.MinimumCapacity
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.DataTable.Namespace
  parent: System.Data.DataTable
  isExternal: false
  name: Namespace
  nameWithType: DataTable.Namespace
  fullName: System.Data.DataTable.Namespace
- uid: System.Data.DataTable.NewRow
  parent: System.Data.DataTable
  isExternal: false
  name: NewRow()
  nameWithType: DataTable.NewRow()
  fullName: System.Data.DataTable.NewRow()
- uid: System.Data.DataTable.NewRowArray(System.Int32)
  parent: System.Data.DataTable
  isExternal: false
  name: NewRowArray(Int32)
  nameWithType: DataTable.NewRowArray(Int32)
  fullName: System.Data.DataTable.NewRowArray(Int32)
- uid: System.Data.DataTable.NewRowFromBuilder(System.Data.DataRowBuilder)
  parent: System.Data.DataTable
  isExternal: false
  name: NewRowFromBuilder(DataRowBuilder)
  nameWithType: DataTable.NewRowFromBuilder(DataRowBuilder)
  fullName: System.Data.DataTable.NewRowFromBuilder(DataRowBuilder)
- uid: System.Data.DataRowBuilder
  parent: System.Data
  isExternal: false
  name: DataRowBuilder
  nameWithType: DataRowBuilder
  fullName: System.Data.DataRowBuilder
- uid: System.Data.DataTable.OnColumnChanged(System.Data.DataColumnChangeEventArgs)
  parent: System.Data.DataTable
  isExternal: false
  name: OnColumnChanged(DataColumnChangeEventArgs)
  nameWithType: DataTable.OnColumnChanged(DataColumnChangeEventArgs)
  fullName: System.Data.DataTable.OnColumnChanged(DataColumnChangeEventArgs)
- uid: System.Data.DataColumnChangeEventArgs
  parent: System.Data
  isExternal: false
  name: DataColumnChangeEventArgs
  nameWithType: DataColumnChangeEventArgs
  fullName: System.Data.DataColumnChangeEventArgs
- uid: System.Data.DataTable.OnColumnChanging(System.Data.DataColumnChangeEventArgs)
  parent: System.Data.DataTable
  isExternal: false
  name: OnColumnChanging(DataColumnChangeEventArgs)
  nameWithType: DataTable.OnColumnChanging(DataColumnChangeEventArgs)
  fullName: System.Data.DataTable.OnColumnChanging(DataColumnChangeEventArgs)
- uid: System.Data.DataTable.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)
  parent: System.Data.DataTable
  isExternal: false
  name: OnPropertyChanging(PropertyChangedEventArgs)
  nameWithType: DataTable.OnPropertyChanging(PropertyChangedEventArgs)
  fullName: System.Data.DataTable.OnPropertyChanging(PropertyChangedEventArgs)
- uid: System.ComponentModel.PropertyChangedEventArgs
  parent: System.ComponentModel
  isExternal: true
  name: PropertyChangedEventArgs
  nameWithType: PropertyChangedEventArgs
  fullName: System.ComponentModel.PropertyChangedEventArgs
- uid: System.Data.DataTable.OnRemoveColumn(System.Data.DataColumn)
  parent: System.Data.DataTable
  isExternal: false
  name: OnRemoveColumn(DataColumn)
  nameWithType: DataTable.OnRemoveColumn(DataColumn)
  fullName: System.Data.DataTable.OnRemoveColumn(DataColumn)
- uid: System.Data.DataColumn
  parent: System.Data
  isExternal: false
  name: DataColumn
  nameWithType: DataColumn
  fullName: System.Data.DataColumn
- uid: System.Data.DataTable.OnRowChanged(System.Data.DataRowChangeEventArgs)
  parent: System.Data.DataTable
  isExternal: false
  name: OnRowChanged(DataRowChangeEventArgs)
  nameWithType: DataTable.OnRowChanged(DataRowChangeEventArgs)
  fullName: System.Data.DataTable.OnRowChanged(DataRowChangeEventArgs)
- uid: System.Data.DataRowChangeEventArgs
  parent: System.Data
  isExternal: false
  name: DataRowChangeEventArgs
  nameWithType: DataRowChangeEventArgs
  fullName: System.Data.DataRowChangeEventArgs
- uid: System.Data.DataTable.OnRowChanging(System.Data.DataRowChangeEventArgs)
  parent: System.Data.DataTable
  isExternal: false
  name: OnRowChanging(DataRowChangeEventArgs)
  nameWithType: DataTable.OnRowChanging(DataRowChangeEventArgs)
  fullName: System.Data.DataTable.OnRowChanging(DataRowChangeEventArgs)
- uid: System.Data.DataTable.OnRowDeleted(System.Data.DataRowChangeEventArgs)
  parent: System.Data.DataTable
  isExternal: false
  name: OnRowDeleted(DataRowChangeEventArgs)
  nameWithType: DataTable.OnRowDeleted(DataRowChangeEventArgs)
  fullName: System.Data.DataTable.OnRowDeleted(DataRowChangeEventArgs)
- uid: System.Data.DataTable.OnRowDeleting(System.Data.DataRowChangeEventArgs)
  parent: System.Data.DataTable
  isExternal: false
  name: OnRowDeleting(DataRowChangeEventArgs)
  nameWithType: DataTable.OnRowDeleting(DataRowChangeEventArgs)
  fullName: System.Data.DataTable.OnRowDeleting(DataRowChangeEventArgs)
- uid: System.Data.DataTable.OnTableCleared(System.Data.DataTableClearEventArgs)
  parent: System.Data.DataTable
  isExternal: false
  name: OnTableCleared(DataTableClearEventArgs)
  nameWithType: DataTable.OnTableCleared(DataTableClearEventArgs)
  fullName: System.Data.DataTable.OnTableCleared(DataTableClearEventArgs)
- uid: System.Data.DataTableClearEventArgs
  parent: System.Data
  isExternal: false
  name: DataTableClearEventArgs
  nameWithType: DataTableClearEventArgs
  fullName: System.Data.DataTableClearEventArgs
- uid: System.Data.DataTable.OnTableClearing(System.Data.DataTableClearEventArgs)
  parent: System.Data.DataTable
  isExternal: false
  name: OnTableClearing(DataTableClearEventArgs)
  nameWithType: DataTable.OnTableClearing(DataTableClearEventArgs)
  fullName: System.Data.DataTable.OnTableClearing(DataTableClearEventArgs)
- uid: System.Data.DataTable.OnTableNewRow(System.Data.DataTableNewRowEventArgs)
  parent: System.Data.DataTable
  isExternal: false
  name: OnTableNewRow(DataTableNewRowEventArgs)
  nameWithType: DataTable.OnTableNewRow(DataTableNewRowEventArgs)
  fullName: System.Data.DataTable.OnTableNewRow(DataTableNewRowEventArgs)
- uid: System.Data.DataTableNewRowEventArgs
  parent: System.Data
  isExternal: false
  name: DataTableNewRowEventArgs
  nameWithType: DataTableNewRowEventArgs
  fullName: System.Data.DataTableNewRowEventArgs
- uid: System.Data.DataTable.ParentRelations
  parent: System.Data.DataTable
  isExternal: false
  name: ParentRelations
  nameWithType: DataTable.ParentRelations
  fullName: System.Data.DataTable.ParentRelations
- uid: System.Data.DataTable.Prefix
  parent: System.Data.DataTable
  isExternal: false
  name: Prefix
  nameWithType: DataTable.Prefix
  fullName: System.Data.DataTable.Prefix
- uid: System.Data.DataTable.PrimaryKey
  parent: System.Data.DataTable
  isExternal: false
  name: PrimaryKey
  nameWithType: DataTable.PrimaryKey
  fullName: System.Data.DataTable.PrimaryKey
- uid: System.Data.DataColumn[]
  parent: System.Data
  isExternal: false
  name: DataColumn
  nameWithType: DataColumn
  fullName: System.Data.DataColumn[]
  spec.csharp:
  - uid: System.Data.DataColumn
    name: DataColumn
    nameWithType: DataColumn
    fullName: DataColumn[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.DataTable.ReadXml(System.IO.Stream)
  parent: System.Data.DataTable
  isExternal: false
  name: ReadXml(Stream)
  nameWithType: DataTable.ReadXml(Stream)
  fullName: System.Data.DataTable.ReadXml(Stream)
- uid: System.Data.XmlReadMode
  parent: System.Data
  isExternal: false
  name: XmlReadMode
  nameWithType: XmlReadMode
  fullName: System.Data.XmlReadMode
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Data.DataTable.ReadXml(System.IO.TextReader)
  parent: System.Data.DataTable
  isExternal: false
  name: ReadXml(TextReader)
  nameWithType: DataTable.ReadXml(TextReader)
  fullName: System.Data.DataTable.ReadXml(TextReader)
- uid: System.IO.TextReader
  parent: System.IO
  isExternal: true
  name: TextReader
  nameWithType: TextReader
  fullName: System.IO.TextReader
- uid: System.Data.DataTable.ReadXml(System.String)
  parent: System.Data.DataTable
  isExternal: false
  name: ReadXml(String)
  nameWithType: DataTable.ReadXml(String)
  fullName: System.Data.DataTable.ReadXml(String)
- uid: System.Data.DataTable.ReadXml(System.Xml.XmlReader)
  parent: System.Data.DataTable
  isExternal: false
  name: ReadXml(XmlReader)
  nameWithType: DataTable.ReadXml(XmlReader)
  fullName: System.Data.DataTable.ReadXml(XmlReader)
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Data.DataTable.ReadXmlSchema(System.IO.Stream)
  parent: System.Data.DataTable
  isExternal: false
  name: ReadXmlSchema(Stream)
  nameWithType: DataTable.ReadXmlSchema(Stream)
  fullName: System.Data.DataTable.ReadXmlSchema(Stream)
- uid: System.Data.DataTable.ReadXmlSchema(System.IO.TextReader)
  parent: System.Data.DataTable
  isExternal: false
  name: ReadXmlSchema(TextReader)
  nameWithType: DataTable.ReadXmlSchema(TextReader)
  fullName: System.Data.DataTable.ReadXmlSchema(TextReader)
- uid: System.Data.DataTable.ReadXmlSchema(System.String)
  parent: System.Data.DataTable
  isExternal: false
  name: ReadXmlSchema(String)
  nameWithType: DataTable.ReadXmlSchema(String)
  fullName: System.Data.DataTable.ReadXmlSchema(String)
- uid: System.Data.DataTable.ReadXmlSchema(System.Xml.XmlReader)
  parent: System.Data.DataTable
  isExternal: false
  name: ReadXmlSchema(XmlReader)
  nameWithType: DataTable.ReadXmlSchema(XmlReader)
  fullName: System.Data.DataTable.ReadXmlSchema(XmlReader)
- uid: System.Data.DataTable.ReadXmlSerializable(System.Xml.XmlReader)
  parent: System.Data.DataTable
  isExternal: false
  name: ReadXmlSerializable(XmlReader)
  nameWithType: DataTable.ReadXmlSerializable(XmlReader)
  fullName: System.Data.DataTable.ReadXmlSerializable(XmlReader)
- uid: System.Data.DataTable.RejectChanges
  parent: System.Data.DataTable
  isExternal: false
  name: RejectChanges()
  nameWithType: DataTable.RejectChanges()
  fullName: System.Data.DataTable.RejectChanges()
- uid: System.Data.DataTable.RemotingFormat
  parent: System.Data.DataTable
  isExternal: false
  name: RemotingFormat
  nameWithType: DataTable.RemotingFormat
  fullName: System.Data.DataTable.RemotingFormat
- uid: System.Data.SerializationFormat
  parent: System.Data
  isExternal: false
  name: SerializationFormat
  nameWithType: SerializationFormat
  fullName: System.Data.SerializationFormat
- uid: System.Data.DataTable.Reset
  parent: System.Data.DataTable
  isExternal: false
  name: Reset()
  nameWithType: DataTable.Reset()
  fullName: System.Data.DataTable.Reset()
- uid: System.Data.DataTable.RowChanged
  parent: System.Data.DataTable
  isExternal: false
  name: RowChanged
  nameWithType: DataTable.RowChanged
  fullName: System.Data.DataTable.RowChanged
- uid: System.Data.DataRowChangeEventHandler
  parent: System.Data
  isExternal: false
  name: DataRowChangeEventHandler
  nameWithType: DataRowChangeEventHandler
  fullName: System.Data.DataRowChangeEventHandler
- uid: System.Data.DataTable.RowChanging
  parent: System.Data.DataTable
  isExternal: false
  name: RowChanging
  nameWithType: DataTable.RowChanging
  fullName: System.Data.DataTable.RowChanging
- uid: System.Data.DataTable.RowDeleted
  parent: System.Data.DataTable
  isExternal: false
  name: RowDeleted
  nameWithType: DataTable.RowDeleted
  fullName: System.Data.DataTable.RowDeleted
- uid: System.Data.DataTable.RowDeleting
  parent: System.Data.DataTable
  isExternal: false
  name: RowDeleting
  nameWithType: DataTable.RowDeleting
  fullName: System.Data.DataTable.RowDeleting
- uid: System.Data.DataTable.Rows
  parent: System.Data.DataTable
  isExternal: false
  name: Rows
  nameWithType: DataTable.Rows
  fullName: System.Data.DataTable.Rows
- uid: System.Data.DataRowCollection
  parent: System.Data
  isExternal: false
  name: DataRowCollection
  nameWithType: DataRowCollection
  fullName: System.Data.DataRowCollection
- uid: System.Data.DataTable.Select
  parent: System.Data.DataTable
  isExternal: false
  name: Select()
  nameWithType: DataTable.Select()
  fullName: System.Data.DataTable.Select()
- uid: System.Data.DataTable.Select(System.String)
  parent: System.Data.DataTable
  isExternal: false
  name: Select(String)
  nameWithType: DataTable.Select(String)
  fullName: System.Data.DataTable.Select(String)
- uid: System.Data.DataTable.Select(System.String,System.String)
  parent: System.Data.DataTable
  isExternal: false
  name: Select(String,String)
  nameWithType: DataTable.Select(String,String)
  fullName: System.Data.DataTable.Select(String,String)
- uid: System.Data.DataTable.Select(System.String,System.String,System.Data.DataViewRowState)
  parent: System.Data.DataTable
  isExternal: false
  name: Select(String,String,DataViewRowState)
  nameWithType: DataTable.Select(String,String,DataViewRowState)
  fullName: System.Data.DataTable.Select(String,String,DataViewRowState)
- uid: System.Data.DataViewRowState
  parent: System.Data
  isExternal: false
  name: DataViewRowState
  nameWithType: DataViewRowState
  fullName: System.Data.DataViewRowState
- uid: System.Data.DataTable.Site
  parent: System.Data.DataTable
  isExternal: false
  name: Site
  nameWithType: DataTable.Site
  fullName: System.Data.DataTable.Site
- uid: System.ComponentModel.ISite
  parent: System.ComponentModel
  isExternal: false
  name: ISite
  nameWithType: ISite
  fullName: System.ComponentModel.ISite
- uid: System.Data.DataTable.System#ComponentModel#IListSource#ContainsListCollection
  parent: System.Data.DataTable
  isExternal: false
  name: System.ComponentModel.IListSource.ContainsListCollection
  nameWithType: DataTable.System.ComponentModel.IListSource.ContainsListCollection
  fullName: System.Data.DataTable.System.ComponentModel.IListSource.ContainsListCollection
- uid: System.Data.DataTable.System#ComponentModel#IListSource#GetList
  parent: System.Data.DataTable
  isExternal: false
  name: System.ComponentModel.IListSource.GetList()
  nameWithType: DataTable.System.ComponentModel.IListSource.GetList()
  fullName: System.Data.DataTable.System.ComponentModel.IListSource.GetList()
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#GetSchema
  parent: System.Data.DataTable
  isExternal: false
  name: System.Xml.Serialization.IXmlSerializable.GetSchema()
  nameWithType: DataTable.System.Xml.Serialization.IXmlSerializable.GetSchema()
  fullName: System.Data.DataTable.System.Xml.Serialization.IXmlSerializable.GetSchema()
- uid: System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  parent: System.Data.DataTable
  isExternal: false
  name: System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
  nameWithType: DataTable.System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
  fullName: System.Data.DataTable.System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
- uid: System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  parent: System.Data.DataTable
  isExternal: false
  name: System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
  nameWithType: DataTable.System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
  fullName: System.Data.DataTable.System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
- uid: System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.Data.DataTable.TableCleared
  parent: System.Data.DataTable
  isExternal: false
  name: TableCleared
  nameWithType: DataTable.TableCleared
  fullName: System.Data.DataTable.TableCleared
- uid: System.Data.DataTableClearEventHandler
  parent: System.Data
  isExternal: false
  name: DataTableClearEventHandler
  nameWithType: DataTableClearEventHandler
  fullName: System.Data.DataTableClearEventHandler
- uid: System.Data.DataTable.TableClearing
  parent: System.Data.DataTable
  isExternal: false
  name: TableClearing
  nameWithType: DataTable.TableClearing
  fullName: System.Data.DataTable.TableClearing
- uid: System.Data.DataTable.TableName
  parent: System.Data.DataTable
  isExternal: false
  name: TableName
  nameWithType: DataTable.TableName
  fullName: System.Data.DataTable.TableName
- uid: System.Data.DataTable.TableNewRow
  parent: System.Data.DataTable
  isExternal: false
  name: TableNewRow
  nameWithType: DataTable.TableNewRow
  fullName: System.Data.DataTable.TableNewRow
- uid: System.Data.DataTableNewRowEventHandler
  parent: System.Data
  isExternal: false
  name: DataTableNewRowEventHandler
  nameWithType: DataTableNewRowEventHandler
  fullName: System.Data.DataTableNewRowEventHandler
- uid: System.Data.DataTable.ToString
  parent: System.Data.DataTable
  isExternal: false
  name: ToString()
  nameWithType: DataTable.ToString()
  fullName: System.Data.DataTable.ToString()
- uid: System.Data.DataTable.WriteXml(System.IO.Stream)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXml(Stream)
  nameWithType: DataTable.WriteXml(Stream)
  fullName: System.Data.DataTable.WriteXml(Stream)
- uid: System.Data.DataTable.WriteXml(System.IO.TextWriter)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXml(TextWriter)
  nameWithType: DataTable.WriteXml(TextWriter)
  fullName: System.Data.DataTable.WriteXml(TextWriter)
- uid: System.IO.TextWriter
  parent: System.IO
  isExternal: true
  name: TextWriter
  nameWithType: TextWriter
  fullName: System.IO.TextWriter
- uid: System.Data.DataTable.WriteXml(System.String)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXml(String)
  nameWithType: DataTable.WriteXml(String)
  fullName: System.Data.DataTable.WriteXml(String)
- uid: System.Data.DataTable.WriteXml(System.Xml.XmlWriter)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXml(XmlWriter)
  nameWithType: DataTable.WriteXml(XmlWriter)
  fullName: System.Data.DataTable.WriteXml(XmlWriter)
- uid: System.Data.DataTable.WriteXml(System.IO.Stream,System.Boolean)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXml(Stream,Boolean)
  nameWithType: DataTable.WriteXml(Stream,Boolean)
  fullName: System.Data.DataTable.WriteXml(Stream,Boolean)
- uid: System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXml(Stream,XmlWriteMode)
  nameWithType: DataTable.WriteXml(Stream,XmlWriteMode)
  fullName: System.Data.DataTable.WriteXml(Stream,XmlWriteMode)
- uid: System.Data.XmlWriteMode
  parent: System.Data
  isExternal: false
  name: XmlWriteMode
  nameWithType: XmlWriteMode
  fullName: System.Data.XmlWriteMode
- uid: System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Boolean)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXml(TextWriter,Boolean)
  nameWithType: DataTable.WriteXml(TextWriter,Boolean)
  fullName: System.Data.DataTable.WriteXml(TextWriter,Boolean)
- uid: System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXml(TextWriter,XmlWriteMode)
  nameWithType: DataTable.WriteXml(TextWriter,XmlWriteMode)
  fullName: System.Data.DataTable.WriteXml(TextWriter,XmlWriteMode)
- uid: System.Data.DataTable.WriteXml(System.String,System.Boolean)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXml(String,Boolean)
  nameWithType: DataTable.WriteXml(String,Boolean)
  fullName: System.Data.DataTable.WriteXml(String,Boolean)
- uid: System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXml(String,XmlWriteMode)
  nameWithType: DataTable.WriteXml(String,XmlWriteMode)
  fullName: System.Data.DataTable.WriteXml(String,XmlWriteMode)
- uid: System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Boolean)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXml(XmlWriter,Boolean)
  nameWithType: DataTable.WriteXml(XmlWriter,Boolean)
  fullName: System.Data.DataTable.WriteXml(XmlWriter,Boolean)
- uid: System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXml(XmlWriter,XmlWriteMode)
  nameWithType: DataTable.WriteXml(XmlWriter,XmlWriteMode)
  fullName: System.Data.DataTable.WriteXml(XmlWriter,XmlWriteMode)
- uid: System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode,System.Boolean)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXml(Stream,XmlWriteMode,Boolean)
  nameWithType: DataTable.WriteXml(Stream,XmlWriteMode,Boolean)
  fullName: System.Data.DataTable.WriteXml(Stream,XmlWriteMode,Boolean)
- uid: System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode,System.Boolean)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXml(TextWriter,XmlWriteMode,Boolean)
  nameWithType: DataTable.WriteXml(TextWriter,XmlWriteMode,Boolean)
  fullName: System.Data.DataTable.WriteXml(TextWriter,XmlWriteMode,Boolean)
- uid: System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode,System.Boolean)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXml(String,XmlWriteMode,Boolean)
  nameWithType: DataTable.WriteXml(String,XmlWriteMode,Boolean)
  fullName: System.Data.DataTable.WriteXml(String,XmlWriteMode,Boolean)
- uid: System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode,System.Boolean)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXml(XmlWriter,XmlWriteMode,Boolean)
  nameWithType: DataTable.WriteXml(XmlWriter,XmlWriteMode,Boolean)
  fullName: System.Data.DataTable.WriteXml(XmlWriter,XmlWriteMode,Boolean)
- uid: System.Data.DataTable.WriteXmlSchema(System.IO.Stream)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXmlSchema(Stream)
  nameWithType: DataTable.WriteXmlSchema(Stream)
  fullName: System.Data.DataTable.WriteXmlSchema(Stream)
- uid: System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXmlSchema(TextWriter)
  nameWithType: DataTable.WriteXmlSchema(TextWriter)
  fullName: System.Data.DataTable.WriteXmlSchema(TextWriter)
- uid: System.Data.DataTable.WriteXmlSchema(System.String)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXmlSchema(String)
  nameWithType: DataTable.WriteXmlSchema(String)
  fullName: System.Data.DataTable.WriteXmlSchema(String)
- uid: System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXmlSchema(XmlWriter)
  nameWithType: DataTable.WriteXmlSchema(XmlWriter)
  fullName: System.Data.DataTable.WriteXmlSchema(XmlWriter)
- uid: System.Data.DataTable.WriteXmlSchema(System.IO.Stream,System.Boolean)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXmlSchema(Stream,Boolean)
  nameWithType: DataTable.WriteXmlSchema(Stream,Boolean)
  fullName: System.Data.DataTable.WriteXmlSchema(Stream,Boolean)
- uid: System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter,System.Boolean)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXmlSchema(TextWriter,Boolean)
  nameWithType: DataTable.WriteXmlSchema(TextWriter,Boolean)
  fullName: System.Data.DataTable.WriteXmlSchema(TextWriter,Boolean)
- uid: System.Data.DataTable.WriteXmlSchema(System.String,System.Boolean)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXmlSchema(String,Boolean)
  nameWithType: DataTable.WriteXmlSchema(String,Boolean)
  fullName: System.Data.DataTable.WriteXmlSchema(String,Boolean)
- uid: System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter,System.Boolean)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXmlSchema(XmlWriter,Boolean)
  nameWithType: DataTable.WriteXmlSchema(XmlWriter,Boolean)
  fullName: System.Data.DataTable.WriteXmlSchema(XmlWriter,Boolean)
- uid: System.Data.DataTable.#ctor*
  parent: System.Data.DataTable
  isExternal: false
  name: DataTable
  nameWithType: DataTable.DataTable
- uid: System.Data.DataTable.AcceptChanges*
  parent: System.Data.DataTable
  isExternal: false
  name: AcceptChanges
  nameWithType: DataTable.AcceptChanges
- uid: System.Data.DataTable.BeginInit*
  parent: System.Data.DataTable
  isExternal: false
  name: BeginInit
  nameWithType: DataTable.BeginInit
- uid: System.Data.DataTable.BeginLoadData*
  parent: System.Data.DataTable
  isExternal: false
  name: BeginLoadData
  nameWithType: DataTable.BeginLoadData
- uid: System.Data.DataTable.CaseSensitive*
  parent: System.Data.DataTable
  isExternal: false
  name: CaseSensitive
  nameWithType: DataTable.CaseSensitive
- uid: System.Data.DataTable.ChildRelations*
  parent: System.Data.DataTable
  isExternal: false
  name: ChildRelations
  nameWithType: DataTable.ChildRelations
- uid: System.Data.DataTable.Clear*
  parent: System.Data.DataTable
  isExternal: false
  name: Clear
  nameWithType: DataTable.Clear
- uid: System.Data.DataTable.Clone*
  parent: System.Data.DataTable
  isExternal: false
  name: Clone
  nameWithType: DataTable.Clone
- uid: System.Data.DataTable.Columns*
  parent: System.Data.DataTable
  isExternal: false
  name: Columns
  nameWithType: DataTable.Columns
- uid: System.Data.DataTable.Compute*
  parent: System.Data.DataTable
  isExternal: false
  name: Compute
  nameWithType: DataTable.Compute
- uid: System.Data.DataTable.Constraints*
  parent: System.Data.DataTable
  isExternal: false
  name: Constraints
  nameWithType: DataTable.Constraints
- uid: System.Data.DataTable.Copy*
  parent: System.Data.DataTable
  isExternal: false
  name: Copy
  nameWithType: DataTable.Copy
- uid: System.Data.DataTable.CreateDataReader*
  parent: System.Data.DataTable
  isExternal: false
  name: CreateDataReader
  nameWithType: DataTable.CreateDataReader
- uid: System.Data.DataTable.CreateInstance*
  parent: System.Data.DataTable
  isExternal: false
  name: CreateInstance
  nameWithType: DataTable.CreateInstance
- uid: System.Data.DataTable.DataSet*
  parent: System.Data.DataTable
  isExternal: false
  name: DataSet
  nameWithType: DataTable.DataSet
- uid: System.Data.DataTable.DefaultView*
  parent: System.Data.DataTable
  isExternal: false
  name: DefaultView
  nameWithType: DataTable.DefaultView
- uid: System.Data.DataTable.DisplayExpression*
  parent: System.Data.DataTable
  isExternal: false
  name: DisplayExpression
  nameWithType: DataTable.DisplayExpression
- uid: System.Data.DataTable.EndInit*
  parent: System.Data.DataTable
  isExternal: false
  name: EndInit
  nameWithType: DataTable.EndInit
- uid: System.Data.DataTable.EndLoadData*
  parent: System.Data.DataTable
  isExternal: false
  name: EndLoadData
  nameWithType: DataTable.EndLoadData
- uid: System.Data.DataTable.ExtendedProperties*
  parent: System.Data.DataTable
  isExternal: false
  name: ExtendedProperties
  nameWithType: DataTable.ExtendedProperties
- uid: System.Data.DataTable.GetChanges*
  parent: System.Data.DataTable
  isExternal: false
  name: GetChanges
  nameWithType: DataTable.GetChanges
- uid: System.Data.DataTable.GetDataTableSchema*
  parent: System.Data.DataTable
  isExternal: false
  name: GetDataTableSchema
  nameWithType: DataTable.GetDataTableSchema
- uid: System.Data.DataTable.GetErrors*
  parent: System.Data.DataTable
  isExternal: false
  name: GetErrors
  nameWithType: DataTable.GetErrors
- uid: System.Data.DataTable.GetObjectData*
  parent: System.Data.DataTable
  isExternal: false
  name: GetObjectData
  nameWithType: DataTable.GetObjectData
- uid: System.Data.DataTable.GetRowType*
  parent: System.Data.DataTable
  isExternal: false
  name: GetRowType
  nameWithType: DataTable.GetRowType
- uid: System.Data.DataTable.GetSchema*
  parent: System.Data.DataTable
  isExternal: false
  name: GetSchema
  nameWithType: DataTable.GetSchema
- uid: System.Data.DataTable.HasErrors*
  parent: System.Data.DataTable
  isExternal: false
  name: HasErrors
  nameWithType: DataTable.HasErrors
- uid: System.Data.DataTable.ImportRow*
  parent: System.Data.DataTable
  isExternal: false
  name: ImportRow
  nameWithType: DataTable.ImportRow
- uid: System.Data.DataTable.IsInitialized*
  parent: System.Data.DataTable
  isExternal: false
  name: IsInitialized
  nameWithType: DataTable.IsInitialized
- uid: System.Data.DataTable.Load*
  parent: System.Data.DataTable
  isExternal: false
  name: Load
  nameWithType: DataTable.Load
- uid: System.Data.DataTable.LoadDataRow*
  parent: System.Data.DataTable
  isExternal: false
  name: LoadDataRow
  nameWithType: DataTable.LoadDataRow
- uid: System.Data.DataTable.Locale*
  parent: System.Data.DataTable
  isExternal: false
  name: Locale
  nameWithType: DataTable.Locale
- uid: System.Data.DataTable.Merge*
  parent: System.Data.DataTable
  isExternal: false
  name: Merge
  nameWithType: DataTable.Merge
- uid: System.Data.DataTable.MinimumCapacity*
  parent: System.Data.DataTable
  isExternal: false
  name: MinimumCapacity
  nameWithType: DataTable.MinimumCapacity
- uid: System.Data.DataTable.Namespace*
  parent: System.Data.DataTable
  isExternal: false
  name: Namespace
  nameWithType: DataTable.Namespace
- uid: System.Data.DataTable.NewRow*
  parent: System.Data.DataTable
  isExternal: false
  name: NewRow
  nameWithType: DataTable.NewRow
- uid: System.Data.DataTable.NewRowArray*
  parent: System.Data.DataTable
  isExternal: false
  name: NewRowArray
  nameWithType: DataTable.NewRowArray
- uid: System.Data.DataTable.NewRowFromBuilder*
  parent: System.Data.DataTable
  isExternal: false
  name: NewRowFromBuilder
  nameWithType: DataTable.NewRowFromBuilder
- uid: System.Data.DataTable.OnColumnChanged*
  parent: System.Data.DataTable
  isExternal: false
  name: OnColumnChanged
  nameWithType: DataTable.OnColumnChanged
- uid: System.Data.DataTable.OnColumnChanging*
  parent: System.Data.DataTable
  isExternal: false
  name: OnColumnChanging
  nameWithType: DataTable.OnColumnChanging
- uid: System.Data.DataTable.OnPropertyChanging*
  parent: System.Data.DataTable
  isExternal: false
  name: OnPropertyChanging
  nameWithType: DataTable.OnPropertyChanging
- uid: System.Data.DataTable.OnRemoveColumn*
  parent: System.Data.DataTable
  isExternal: false
  name: OnRemoveColumn
  nameWithType: DataTable.OnRemoveColumn
- uid: System.Data.DataTable.OnRowChanged*
  parent: System.Data.DataTable
  isExternal: false
  name: OnRowChanged
  nameWithType: DataTable.OnRowChanged
- uid: System.Data.DataTable.OnRowChanging*
  parent: System.Data.DataTable
  isExternal: false
  name: OnRowChanging
  nameWithType: DataTable.OnRowChanging
- uid: System.Data.DataTable.OnRowDeleted*
  parent: System.Data.DataTable
  isExternal: false
  name: OnRowDeleted
  nameWithType: DataTable.OnRowDeleted
- uid: System.Data.DataTable.OnRowDeleting*
  parent: System.Data.DataTable
  isExternal: false
  name: OnRowDeleting
  nameWithType: DataTable.OnRowDeleting
- uid: System.Data.DataTable.OnTableCleared*
  parent: System.Data.DataTable
  isExternal: false
  name: OnTableCleared
  nameWithType: DataTable.OnTableCleared
- uid: System.Data.DataTable.OnTableClearing*
  parent: System.Data.DataTable
  isExternal: false
  name: OnTableClearing
  nameWithType: DataTable.OnTableClearing
- uid: System.Data.DataTable.OnTableNewRow*
  parent: System.Data.DataTable
  isExternal: false
  name: OnTableNewRow
  nameWithType: DataTable.OnTableNewRow
- uid: System.Data.DataTable.ParentRelations*
  parent: System.Data.DataTable
  isExternal: false
  name: ParentRelations
  nameWithType: DataTable.ParentRelations
- uid: System.Data.DataTable.Prefix*
  parent: System.Data.DataTable
  isExternal: false
  name: Prefix
  nameWithType: DataTable.Prefix
- uid: System.Data.DataTable.PrimaryKey*
  parent: System.Data.DataTable
  isExternal: false
  name: PrimaryKey
  nameWithType: DataTable.PrimaryKey
- uid: System.Data.DataTable.ReadXml*
  parent: System.Data.DataTable
  isExternal: false
  name: ReadXml
  nameWithType: DataTable.ReadXml
- uid: System.Data.DataTable.ReadXmlSchema*
  parent: System.Data.DataTable
  isExternal: false
  name: ReadXmlSchema
  nameWithType: DataTable.ReadXmlSchema
- uid: System.Data.DataTable.ReadXmlSerializable*
  parent: System.Data.DataTable
  isExternal: false
  name: ReadXmlSerializable
  nameWithType: DataTable.ReadXmlSerializable
- uid: System.Data.DataTable.RejectChanges*
  parent: System.Data.DataTable
  isExternal: false
  name: RejectChanges
  nameWithType: DataTable.RejectChanges
- uid: System.Data.DataTable.RemotingFormat*
  parent: System.Data.DataTable
  isExternal: false
  name: RemotingFormat
  nameWithType: DataTable.RemotingFormat
- uid: System.Data.DataTable.Reset*
  parent: System.Data.DataTable
  isExternal: false
  name: Reset
  nameWithType: DataTable.Reset
- uid: System.Data.DataTable.Rows*
  parent: System.Data.DataTable
  isExternal: false
  name: Rows
  nameWithType: DataTable.Rows
- uid: System.Data.DataTable.Select*
  parent: System.Data.DataTable
  isExternal: false
  name: Select
  nameWithType: DataTable.Select
- uid: System.Data.DataTable.Site*
  parent: System.Data.DataTable
  isExternal: false
  name: Site
  nameWithType: DataTable.Site
- uid: System.Data.DataTable.System#ComponentModel#IListSource#ContainsListCollection*
  parent: System.Data.DataTable
  isExternal: false
  name: System.ComponentModel.IListSource.ContainsListCollection
  nameWithType: DataTable.System.ComponentModel.IListSource.ContainsListCollection
- uid: System.Data.DataTable.System#ComponentModel#IListSource#GetList*
  parent: System.Data.DataTable
  isExternal: false
  name: System.ComponentModel.IListSource.GetList
  nameWithType: DataTable.System.ComponentModel.IListSource.GetList
- uid: System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#GetSchema*
  parent: System.Data.DataTable
  isExternal: false
  name: System.Xml.Serialization.IXmlSerializable.GetSchema
  nameWithType: DataTable.System.Xml.Serialization.IXmlSerializable.GetSchema
- uid: System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#ReadXml*
  parent: System.Data.DataTable
  isExternal: false
  name: System.Xml.Serialization.IXmlSerializable.ReadXml
  nameWithType: DataTable.System.Xml.Serialization.IXmlSerializable.ReadXml
- uid: System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#WriteXml*
  parent: System.Data.DataTable
  isExternal: false
  name: System.Xml.Serialization.IXmlSerializable.WriteXml
  nameWithType: DataTable.System.Xml.Serialization.IXmlSerializable.WriteXml
- uid: System.Data.DataTable.TableName*
  parent: System.Data.DataTable
  isExternal: false
  name: TableName
  nameWithType: DataTable.TableName
- uid: System.Data.DataTable.ToString*
  parent: System.Data.DataTable
  isExternal: false
  name: ToString
  nameWithType: DataTable.ToString
- uid: System.Data.DataTable.WriteXml*
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXml
  nameWithType: DataTable.WriteXml
- uid: System.Data.DataTable.WriteXmlSchema*
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXmlSchema
  nameWithType: DataTable.WriteXmlSchema
