### YamlMime:ManagedReference
items:
- uid: System.Drawing.Bitmap
  id: Bitmap
  children:
  - System.Drawing.Bitmap.#ctor(System.Drawing.Image)
  - System.Drawing.Bitmap.#ctor(System.IO.Stream)
  - System.Drawing.Bitmap.#ctor(System.String)
  - System.Drawing.Bitmap.#ctor(System.Drawing.Image,System.Drawing.Size)
  - System.Drawing.Bitmap.#ctor(System.Int32,System.Int32)
  - System.Drawing.Bitmap.#ctor(System.IO.Stream,System.Boolean)
  - System.Drawing.Bitmap.#ctor(System.String,System.Boolean)
  - System.Drawing.Bitmap.#ctor(System.Type,System.String)
  - System.Drawing.Bitmap.#ctor(System.Drawing.Image,System.Int32,System.Int32)
  - System.Drawing.Bitmap.#ctor(System.Int32,System.Int32,System.Drawing.Graphics)
  - System.Drawing.Bitmap.#ctor(System.Int32,System.Int32,System.Drawing.Imaging.PixelFormat)
  - System.Drawing.Bitmap.#ctor(System.Int32,System.Int32,System.Int32,System.Drawing.Imaging.PixelFormat,System.IntPtr)
  - System.Drawing.Bitmap.Clone(System.Drawing.Rectangle,System.Drawing.Imaging.PixelFormat)
  - System.Drawing.Bitmap.Clone(System.Drawing.RectangleF,System.Drawing.Imaging.PixelFormat)
  - System.Drawing.Bitmap.FromHicon(System.IntPtr)
  - System.Drawing.Bitmap.FromResource(System.IntPtr,System.String)
  - System.Drawing.Bitmap.GetHbitmap
  - System.Drawing.Bitmap.GetHbitmap(System.Drawing.Color)
  - System.Drawing.Bitmap.GetHicon
  - System.Drawing.Bitmap.GetPixel(System.Int32,System.Int32)
  - System.Drawing.Bitmap.LockBits(System.Drawing.Rectangle,System.Drawing.Imaging.ImageLockMode,System.Drawing.Imaging.PixelFormat)
  - System.Drawing.Bitmap.LockBits(System.Drawing.Rectangle,System.Drawing.Imaging.ImageLockMode,System.Drawing.Imaging.PixelFormat,System.Drawing.Imaging.BitmapData)
  - System.Drawing.Bitmap.MakeTransparent
  - System.Drawing.Bitmap.MakeTransparent(System.Drawing.Color)
  - System.Drawing.Bitmap.SetPixel(System.Int32,System.Int32,System.Drawing.Color)
  - System.Drawing.Bitmap.SetResolution(System.Single,System.Single)
  - System.Drawing.Bitmap.UnlockBits(System.Drawing.Imaging.BitmapData)
  langs:
  - csharp
  name: Bitmap
  nameWithType: Bitmap
  fullName: System.Drawing.Bitmap
  type: Class
  summary: "Encapsulates a [!INCLUDE[ndptecgdiplus](~/add/includes/ndptecgdiplus-md.md)] bitmap, which consists of the pixel data for a graphics image and its attributes. A Bitmap is an object used to work with images defined by pixel data."
  remarks: "A bitmap consists of the pixel data for a graphics image and its attributes. There are many standard formats for saving a bitmap to a file. [!INCLUDE[ndptecgdiplus](~/add/includes/ndptecgdiplus-md.md)] supports the following file formats: BMP, GIF, EXIF, JPG, PNG and TIFF. For more information about supported formats, see [Types of Bitmaps](../Topic/Types%20of%20Bitmaps.md).       You can create images from files, streams, and other sources by using one of the <xref:System.Drawing.Bitmap.%23ctor%2A> constructors and save them to a stream or to the file system with the <xref:System.Drawing.Image.Save%2A> method. Images are drawn to the screen or to memory by using the <xref:System.Drawing.Graphics.DrawImage%2A> method of the <xref:System.Drawing.Graphics> object. For a list of topics about working with image files, see [Working with Images, Bitmaps, Icons, and Metafiles](../Topic/Working%20with%20Images,%20Bitmaps,%20Icons,%20and%20Metafiles.md).      > [!NOTE] >  The Bitmap class is not accessible across application domains. For example, if you create a dynamic <xref:System.AppDomain> and create several brushes, pens, and bitmaps in that domain, then pass these objects back to the main application domain, you can successfully use the pens and brushes. However, if you call the <xref:System.Drawing.Graphics.DrawImage%2A> method to draw the marshaled Bitmap, you receive the following exception.   >    >  Remoting cannot find field &quot;native image&quot; on type &quot;System.Drawing.Image&quot;."
  example:
  - "The following code example demonstrates how to construct a new Bitmap from a file, using the <xref:System.Drawing.Bitmap.GetPixel%2A> and <xref:System.Drawing.Bitmap.SetPixel%2A> methods to recolor the image. It also uses the <xref:System.Drawing.Image.PixelFormat%2A>, <xref:System.Drawing.Image.Width%2A>, and <xref:System.Drawing.Image.Height%2A> properties.  \n  \n This example is designed to be used with a Windows Forms that contains a <xref:System.Windows.Forms.Label>, <xref:System.Windows.Forms.PictureBox>, and <xref:System.Windows.Forms.Button> named `Label1`, `PictureBox1`, and `Button1`, respectively. Paste the code into the form and associate the `Button1_Click` method with the button's <xref:System.Windows.Forms.Control.Click> event.  \n  \n [!code-cs[System.Drawing.ImageExample#1](~/add/codesnippet/CSharp/t-system.drawing.bitmap_1.cs)]\n [!code-cpp[System.Drawing.ImageExample#1](~/add/codesnippet/CPP/t-system.drawing.bitmap_1.cpp)]\n [!code-vb[System.Drawing.ImageExample#1](~/add/codesnippet/VisualBasic/t-system.drawing.bitmap_1.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.Editor("System.Drawing.Design.BitmapEditor, System.Drawing.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))]

      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class Bitmap : System.Drawing.Image
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.Drawing.Image
  implements: []
  inheritedMembers:
  - System.Drawing.Image.Clone
  - System.Drawing.Image.Dispose
  - System.Drawing.Image.Dispose(System.Boolean)
  - System.Drawing.Image.Flags
  - System.Drawing.Image.FrameDimensionsList
  - System.Drawing.Image.FromFile(System.String)
  - System.Drawing.Image.FromFile(System.String,System.Boolean)
  - System.Drawing.Image.FromHbitmap(System.IntPtr)
  - System.Drawing.Image.FromHbitmap(System.IntPtr,System.IntPtr)
  - System.Drawing.Image.FromStream(System.IO.Stream)
  - System.Drawing.Image.FromStream(System.IO.Stream,System.Boolean)
  - System.Drawing.Image.FromStream(System.IO.Stream,System.Boolean,System.Boolean)
  - System.Drawing.Image.GetBounds(System.Drawing.GraphicsUnit@)
  - System.Drawing.Image.GetEncoderParameterList(System.Guid)
  - System.Drawing.Image.GetFrameCount(System.Drawing.Imaging.FrameDimension)
  - System.Drawing.Image.GetPixelFormatSize(System.Drawing.Imaging.PixelFormat)
  - System.Drawing.Image.GetPropertyItem(System.Int32)
  - System.Drawing.Image.GetThumbnailImage(System.Int32,System.Int32,System.Drawing.Image.GetThumbnailImageAbort,System.IntPtr)
  - System.Drawing.Image.Height
  - System.Drawing.Image.HorizontalResolution
  - System.Drawing.Image.IsAlphaPixelFormat(System.Drawing.Imaging.PixelFormat)
  - System.Drawing.Image.IsCanonicalPixelFormat(System.Drawing.Imaging.PixelFormat)
  - System.Drawing.Image.IsExtendedPixelFormat(System.Drawing.Imaging.PixelFormat)
  - System.Drawing.Image.Palette
  - System.Drawing.Image.PhysicalDimension
  - System.Drawing.Image.PixelFormat
  - System.Drawing.Image.PropertyIdList
  - System.Drawing.Image.PropertyItems
  - System.Drawing.Image.RawFormat
  - System.Drawing.Image.RemovePropertyItem(System.Int32)
  - System.Drawing.Image.RotateFlip(System.Drawing.RotateFlipType)
  - System.Drawing.Image.Save(System.IO.Stream,System.Drawing.Imaging.ImageCodecInfo,System.Drawing.Imaging.EncoderParameters)
  - System.Drawing.Image.Save(System.IO.Stream,System.Drawing.Imaging.ImageFormat)
  - System.Drawing.Image.Save(System.String)
  - System.Drawing.Image.Save(System.String,System.Drawing.Imaging.ImageCodecInfo,System.Drawing.Imaging.EncoderParameters)
  - System.Drawing.Image.Save(System.String,System.Drawing.Imaging.ImageFormat)
  - System.Drawing.Image.SaveAdd(System.Drawing.Image,System.Drawing.Imaging.EncoderParameters)
  - System.Drawing.Image.SaveAdd(System.Drawing.Imaging.EncoderParameters)
  - System.Drawing.Image.SelectActiveFrame(System.Drawing.Imaging.FrameDimension,System.Int32)
  - System.Drawing.Image.SetPropertyItem(System.Drawing.Imaging.PropertyItem)
  - System.Drawing.Image.Size
  - System.Drawing.Image.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Drawing.Image.Tag
  - System.Drawing.Image.VerticalResolution
  - System.Drawing.Image.Width
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Bitmap.#ctor(System.Drawing.Image)
  id: '#ctor(System.Drawing.Image)'
  parent: System.Drawing.Bitmap
  langs:
  - csharp
  name: Bitmap(Image)
  nameWithType: Bitmap.Bitmap(Image)
  fullName: System.Drawing.Bitmap.Bitmap(Image)
  type: Constructor
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "Initializes a new instance of the <see cref=&quot;T:System.Drawing.Bitmap&quot;></see> class from the specified existing image."
  syntax:
    content: public Bitmap (System.Drawing.Image original);
    parameters:
    - id: original
      type: System.Drawing.Image
      description: "The  from which to create the new ."
  overload: System.Drawing.Bitmap.#ctor*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Bitmap.#ctor(System.IO.Stream)
  id: '#ctor(System.IO.Stream)'
  parent: System.Drawing.Bitmap
  langs:
  - csharp
  name: Bitmap(Stream)
  nameWithType: Bitmap.Bitmap(Stream)
  fullName: System.Drawing.Bitmap.Bitmap(Stream)
  type: Constructor
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "Initializes a new instance of the <see cref=&quot;T:System.Drawing.Bitmap&quot;></see> class from the specified data stream."
  remarks: "You must keep the stream open for the lifetime of the <xref:System.Drawing.Bitmap>.       Due to a limitation of the [!INCLUDE[ndptecgdiplus](~/add/includes/ndptecgdiplus-md.md)] decoder, an <xref:System.ArgumentException?displayProperty=fullName> is thrown if you construct a bitmap from a .png image file with a single dimension greater than 65,535 pixels."
  example:
  - "The following code example demonstrates how to load a bitmap from a stream.  \n  \n This example is designed to be used with Windows Forms. Create a form that contains a <xref:System.Windows.Forms.PictureBox> named `PictureBox1`. Paste the code into the form and call the `InitializeStreamBitmap` method from the form's constructor or <xref:System.Windows.Forms.Form.Load> event-handling method.  \n  \n [!code-cs[System.Drawing.BitmapMembers#2](~/add/codesnippet/CSharp/m-system.drawing.bitmap._2_1.cs)]\n [!code-vb[System.Drawing.BitmapMembers#2](~/add/codesnippet/VisualBasic/m-system.drawing.bitmap._2_1.vb)]\n [!code-cpp[System.Drawing.BitmapMembers#2](~/add/codesnippet/CPP/m-system.drawing.bitmap._2_1.cpp)]"
  syntax:
    content: public Bitmap (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "The data stream used to load the image."
  overload: System.Drawing.Bitmap.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n    stream does not contain image data or is .  \n  \n -or-  \n  \n stream contains a PNG image file with a single dimension greater than 65,535 pixels."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Bitmap.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Drawing.Bitmap
  langs:
  - csharp
  name: Bitmap(String)
  nameWithType: Bitmap.Bitmap(String)
  fullName: System.Drawing.Bitmap.Bitmap(String)
  type: Constructor
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "Initializes a new instance of the <see cref=&quot;T:System.Drawing.Bitmap&quot;></see> class from the specified file."
  remarks: 'The file name and path can be relative to the application or an absolute path. Use this constructor to open images with the following file formats: BMP, GIF, EXIF, JPG, PNG and TIFF. For more information about supported formats, see [Types of Bitmaps](../Topic/Types%20of%20Bitmaps.md). The file remains locked until the <xref:System.Drawing.Bitmap> is disposed.'
  syntax:
    content: public Bitmap (string filename);
    parameters:
    - id: filename
      type: System.String
      description: "The bitmap file name and path."
  overload: System.Drawing.Bitmap.#ctor*
  exceptions:
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The specified file is not found."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Bitmap.#ctor(System.Drawing.Image,System.Drawing.Size)
  id: '#ctor(System.Drawing.Image,System.Drawing.Size)'
  parent: System.Drawing.Bitmap
  langs:
  - csharp
  name: Bitmap(Image,Size)
  nameWithType: Bitmap.Bitmap(Image,Size)
  fullName: System.Drawing.Bitmap.Bitmap(Image,Size)
  type: Constructor
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "Initializes a new instance of the <see cref=&quot;T:System.Drawing.Bitmap&quot;></see> class from the specified existing image, scaled to the specified size."
  syntax:
    content: public Bitmap (System.Drawing.Image original, System.Drawing.Size newSize);
    parameters:
    - id: original
      type: System.Drawing.Image
      description: "The  from which to create the new ."
    - id: newSize
      type: System.Drawing.Size
      description: "The  structure that represent the size of the new ."
  overload: System.Drawing.Bitmap.#ctor*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: "The operation failed."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Bitmap.#ctor(System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32)'
  parent: System.Drawing.Bitmap
  langs:
  - csharp
  name: Bitmap(Int32,Int32)
  nameWithType: Bitmap.Bitmap(Int32,Int32)
  fullName: System.Drawing.Bitmap.Bitmap(Int32,Int32)
  type: Constructor
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "Initializes a new instance of the <see cref=&quot;T:System.Drawing.Bitmap&quot;></see> class with the specified size."
  remarks: "This constructor creates a <xref:System.Drawing.Bitmap> with a <xref:System.Drawing.Imaging.PixelFormat> enumeration value of <xref:System.Drawing.Imaging.PixelFormat>."
  syntax:
    content: public Bitmap (int width, int height);
    parameters:
    - id: width
      type: System.Int32
      description: "The width, in pixels, of the new ."
    - id: height
      type: System.Int32
      description: "The height, in pixels, of the new ."
  overload: System.Drawing.Bitmap.#ctor*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: "The operation failed."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Bitmap.#ctor(System.IO.Stream,System.Boolean)
  id: '#ctor(System.IO.Stream,System.Boolean)'
  parent: System.Drawing.Bitmap
  langs:
  - csharp
  name: Bitmap(Stream,Boolean)
  nameWithType: Bitmap.Bitmap(Stream,Boolean)
  fullName: System.Drawing.Bitmap.Bitmap(Stream,Boolean)
  type: Constructor
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "Initializes a new instance of the <see cref=&quot;T:System.Drawing.Bitmap&quot;></see> class from the specified data stream."
  remarks: "You must keep the stream open for the lifetime of the <xref:System.Drawing.Bitmap>.       Due to a limitation of the [!INCLUDE[ndptecgdiplus](~/add/includes/ndptecgdiplus-md.md)] decoder, an <xref:System.ArgumentException?displayProperty=fullName> is thrown if you construct a bitmap from a .png image file with a single dimension greater than 65,535 pixels."
  syntax:
    content: public Bitmap (System.IO.Stream stream, bool useIcm);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "The data stream used to load the image."
    - id: useIcm
      type: System.Boolean
      description: "\n     to use color correction for this ; otherwise, ."
  overload: System.Drawing.Bitmap.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n    stream does not contain image data or is .  \n  \n -or-  \n  \n stream contains a PNG image file with a single dimension greater than 65,535 pixels."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Bitmap.#ctor(System.String,System.Boolean)
  id: '#ctor(System.String,System.Boolean)'
  parent: System.Drawing.Bitmap
  langs:
  - csharp
  name: Bitmap(String,Boolean)
  nameWithType: Bitmap.Bitmap(String,Boolean)
  fullName: System.Drawing.Bitmap.Bitmap(String,Boolean)
  type: Constructor
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "Initializes a new instance of the <see cref=&quot;T:System.Drawing.Bitmap&quot;></see> class from the specified file."
  remarks: 'Use this constructor to open images with the following file formats: BMP, GIF, EXIF, JPG, PNG and TIFF. For more information about supported formats, see [Types of Bitmaps](../Topic/Types%20of%20Bitmaps.md). The file remains locked until the <xref:System.Drawing.Bitmap> is disposed.'
  example:
  - "The following code example demonstrates how to construct a new bitmap from a file. The example uses the <xref:System.Drawing.Bitmap.GetPixel%2A> and <xref:System.Drawing.Bitmap.SetPixel%2A> methods to recolor the image. It also uses the <xref:System.Drawing.Image.PixelFormat%2A> property.  \n  \n This example is designed to be used with a Windows Form that contains a <xref:System.Windows.Forms.Label>, <xref:System.Windows.Forms.PictureBox> and <xref:System.Windows.Forms.Button> named `Label1`, `PictureBox1` and `Button1`, respectively. Paste the code into the form and associate the `Button1_Click` method with the button's <xref:System.Windows.Forms.Control.Click> event.  \n  \n [!code-cs[System.Drawing.ImageExample#1](~/add/codesnippet/CSharp/m-system.drawing.bitmap._10_1.cs)]\n [!code-cpp[System.Drawing.ImageExample#1](~/add/codesnippet/CPP/m-system.drawing.bitmap._10_1.cpp)]\n [!code-vb[System.Drawing.ImageExample#1](~/add/codesnippet/VisualBasic/m-system.drawing.bitmap._10_1.vb)]"
  syntax:
    content: public Bitmap (string filename, bool useIcm);
    parameters:
    - id: filename
      type: System.String
      description: "The name of the bitmap file."
    - id: useIcm
      type: System.Boolean
      description: "\n     to use color correction for this ; otherwise, ."
  overload: System.Drawing.Bitmap.#ctor*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Bitmap.#ctor(System.Type,System.String)
  id: '#ctor(System.Type,System.String)'
  parent: System.Drawing.Bitmap
  langs:
  - csharp
  name: Bitmap(Type,String)
  nameWithType: Bitmap.Bitmap(Type,String)
  fullName: System.Drawing.Bitmap.Bitmap(Type,String)
  type: Constructor
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "Initializes a new instance of the <see cref=&quot;T:System.Drawing.Bitmap&quot;></see> class from a specified resource."
  remarks: "This constructor combines the namespace of the given type with the string name of the resource and looks for a match in the assembly manifest. For example you can pass in the <xref:System.Windows.Forms.Button> type and `Button.bmp` to this constructor and it will look for a resource named `System.Windows.Forms.Button.bmp`."
  example:
  - "The following code example demonstrates how to construct a bitmap from a type, and how to use the <xref:System.Drawing.Image.Save%2A> method. To run this example, paste the code into a Windows Form. Handle the form’s <xref:System.Windows.Forms.Control.Paint> event and call the `ConstructFromResourceSaveAsGif` method, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>  \n  \n [!code-cpp[System.Drawing.BmpCtorAndSave#1](~/add/codesnippet/CPP/m-system.drawing.bitmap._1_1.cpp)]\n [!code-cs[System.Drawing.BmpCtorAndSave#1](~/add/codesnippet/CSharp/m-system.drawing.bitmap._1_1.cs)]\n [!code-vb[System.Drawing.BmpCtorAndSave#1](~/add/codesnippet/VisualBasic/m-system.drawing.bitmap._1_1.vb)]"
  syntax:
    content: public Bitmap (Type type, string resource);
    parameters:
    - id: type
      type: System.Type
      description: "The class used to extract the resource."
    - id: resource
      type: System.String
      description: "The name of the resource."
  overload: System.Drawing.Bitmap.#ctor*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Bitmap.#ctor(System.Drawing.Image,System.Int32,System.Int32)
  id: '#ctor(System.Drawing.Image,System.Int32,System.Int32)'
  parent: System.Drawing.Bitmap
  langs:
  - csharp
  name: Bitmap(Image,Int32,Int32)
  nameWithType: Bitmap.Bitmap(Image,Int32,Int32)
  fullName: System.Drawing.Bitmap.Bitmap(Image,Int32,Int32)
  type: Constructor
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "Initializes a new instance of the <see cref=&quot;T:System.Drawing.Bitmap&quot;></see> class from the specified existing image, scaled to the specified size."
  syntax:
    content: public Bitmap (System.Drawing.Image original, int width, int height);
    parameters:
    - id: original
      type: System.Drawing.Image
      description: "The  from which to create the new ."
    - id: width
      type: System.Int32
      description: "The width, in pixels, of the new ."
    - id: height
      type: System.Int32
      description: "The height, in pixels, of the new ."
  overload: System.Drawing.Bitmap.#ctor*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: "The operation failed."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Bitmap.#ctor(System.Int32,System.Int32,System.Drawing.Graphics)
  id: '#ctor(System.Int32,System.Int32,System.Drawing.Graphics)'
  parent: System.Drawing.Bitmap
  langs:
  - csharp
  name: Bitmap(Int32,Int32,Graphics)
  nameWithType: Bitmap.Bitmap(Int32,Int32,Graphics)
  fullName: System.Drawing.Bitmap.Bitmap(Int32,Int32,Graphics)
  type: Constructor
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "Initializes a new instance of the <see cref=&quot;T:System.Drawing.Bitmap&quot;></see> class with the specified size and with the resolution of the specified <see cref=&quot;T:System.Drawing.Graphics&quot;></see> object."
  remarks: "The new <xref:System.Drawing.Bitmap> that this method creates takes its horizontal and vertical resolution from the <xref:System.Drawing.Graphics.DpiX%2A> and <xref:System.Drawing.Graphics.DpiY%2A> properties of `g`, respectively."
  syntax:
    content: public Bitmap (int width, int height, System.Drawing.Graphics g);
    parameters:
    - id: width
      type: System.Int32
      description: "The width, in pixels, of the new ."
    - id: height
      type: System.Int32
      description: "The height, in pixels, of the new ."
    - id: g
      type: System.Drawing.Graphics
      description: "The  object that specifies the resolution for the new ."
  overload: System.Drawing.Bitmap.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n    g is ."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Bitmap.#ctor(System.Int32,System.Int32,System.Drawing.Imaging.PixelFormat)
  id: '#ctor(System.Int32,System.Int32,System.Drawing.Imaging.PixelFormat)'
  parent: System.Drawing.Bitmap
  langs:
  - csharp
  name: Bitmap(Int32,Int32,PixelFormat)
  nameWithType: Bitmap.Bitmap(Int32,Int32,PixelFormat)
  fullName: System.Drawing.Bitmap.Bitmap(Int32,Int32,PixelFormat)
  type: Constructor
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "Initializes a new instance of the <see cref=&quot;T:System.Drawing.Bitmap&quot;></see> class with the specified size and format."
  syntax:
    content: public Bitmap (int width, int height, System.Drawing.Imaging.PixelFormat format);
    parameters:
    - id: width
      type: System.Int32
      description: "The width, in pixels, of the new ."
    - id: height
      type: System.Int32
      description: "The height, in pixels, of the new ."
    - id: format
      type: System.Drawing.Imaging.PixelFormat
      description: "The pixel format for the new . This must specify a value that begins with `Format`."
  overload: System.Drawing.Bitmap.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "A  value is specified whose name does not start with *Format*. For example, specifying  will cause an <xref:System.ArgumentException>, but  will not."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Bitmap.#ctor(System.Int32,System.Int32,System.Int32,System.Drawing.Imaging.PixelFormat,System.IntPtr)
  id: '#ctor(System.Int32,System.Int32,System.Int32,System.Drawing.Imaging.PixelFormat,System.IntPtr)'
  parent: System.Drawing.Bitmap
  langs:
  - csharp
  name: Bitmap(Int32,Int32,Int32,PixelFormat,IntPtr)
  nameWithType: Bitmap.Bitmap(Int32,Int32,Int32,PixelFormat,IntPtr)
  fullName: System.Drawing.Bitmap.Bitmap(Int32,Int32,Int32,PixelFormat,IntPtr)
  type: Constructor
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "Initializes a new instance of the <see cref=&quot;T:System.Drawing.Bitmap&quot;></see> class with the specified size, pixel format, and pixel data."
  remarks: "The caller is responsible for allocating and freeing the block of memory specified by the `scan0` parameter. However, the memory should not be released until the related <xref:System.Drawing.Bitmap> is released."
  example:
  - "The following code example shows how to use the Bitmap constructor. This example is designed to be used with Windows Forms and requires a <xref:System.Windows.Forms.PaintEventArgs> parameter, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event.  \n  \n [!code-cs[System.Drawing.MiscExamples#Constructor](~/add/codesnippet/CSharp/880fbfe7-f069-4538-b980-_1.cs)]\n [!code-vb[System.Drawing.MiscExamples#Constructor](~/add/codesnippet/VisualBasic/880fbfe7-f069-4538-b980-_1.vb)]"
  syntax:
    content: public Bitmap (int width, int height, int stride, System.Drawing.Imaging.PixelFormat format, IntPtr scan0);
    parameters:
    - id: width
      type: System.Int32
      description: "The width, in pixels, of the new ."
    - id: height
      type: System.Int32
      description: "The height, in pixels, of the new ."
    - id: stride
      type: System.Int32
      description: "Integer that specifies the byte offset between the beginning of one scan line and the next. This is usually (but not necessarily) the number of bytes in the pixel format (for example, 2 for 16 bits per pixel) multiplied by the width of the bitmap. The value passed to this parameter must be a multiple of four.."
    - id: format
      type: System.Drawing.Imaging.PixelFormat
      description: "The pixel format for the new . This must specify a value that begins with `Format`."
    - id: scan0
      type: System.IntPtr
      description: "Pointer to an array of bytes that contains the pixel data."
  overload: System.Drawing.Bitmap.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "A  value is specified whose name does not start with *Format*. For example, specifying  will cause an <xref:System.ArgumentException>, but  will not."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Bitmap.Clone(System.Drawing.Rectangle,System.Drawing.Imaging.PixelFormat)
  id: Clone(System.Drawing.Rectangle,System.Drawing.Imaging.PixelFormat)
  parent: System.Drawing.Bitmap
  langs:
  - csharp
  name: Clone(Rectangle,PixelFormat)
  nameWithType: Bitmap.Clone(Rectangle,PixelFormat)
  fullName: System.Drawing.Bitmap.Clone(Rectangle,PixelFormat)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "Creates a copy of the section of this <see cref=&quot;T:System.Drawing.Bitmap&quot;></see> defined by <see cref=&quot;T:System.Drawing.Rectangle&quot;></see> structure and with a specified <see cref=&quot;T:System.Drawing.Imaging.PixelFormat&quot;></see> enumeration."
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a <xref:System.Drawing.Bitmap> from a file.  \n  \n-   Clones a portion of that <xref:System.Drawing.Bitmap>.  \n  \n-   Draws the cloned portion to the screen.  \n  \n [!code-cpp[System.Drawing.ClassicBitmapExamples#1](~/add/codesnippet/CPP/e09cefd6-c22e-4bb1-ad48-_1.cpp)]\n [!code-cs[System.Drawing.ClassicBitmapExamples#1](~/add/codesnippet/CSharp/e09cefd6-c22e-4bb1-ad48-_1.cs)]\n [!code-vb[System.Drawing.ClassicBitmapExamples#1](~/add/codesnippet/VisualBasic/e09cefd6-c22e-4bb1-ad48-_1.vb)]"
  syntax:
    content: public System.Drawing.Bitmap Clone (System.Drawing.Rectangle rect, System.Drawing.Imaging.PixelFormat format);
    parameters:
    - id: rect
      type: System.Drawing.Rectangle
      description: "Defines the portion of this  to copy. Coordinates are relative to this ."
    - id: format
      type: System.Drawing.Imaging.PixelFormat
      description: "The pixel format for the new . This must specify a value that begins with `Format`."
    return:
      type: System.Drawing.Bitmap
      description: "To be added."
  overload: System.Drawing.Bitmap.Clone*
  exceptions:
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n    rect is outside of the source bitmap bounds."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The height or width of rect is 0.       -or-       A  value is specified whose name does not start with *Format*. For example, specifying  will cause an <xref:System.ArgumentException>, but  will not."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Bitmap.Clone(System.Drawing.RectangleF,System.Drawing.Imaging.PixelFormat)
  id: Clone(System.Drawing.RectangleF,System.Drawing.Imaging.PixelFormat)
  parent: System.Drawing.Bitmap
  langs:
  - csharp
  name: Clone(RectangleF,PixelFormat)
  nameWithType: Bitmap.Clone(RectangleF,PixelFormat)
  fullName: System.Drawing.Bitmap.Clone(RectangleF,PixelFormat)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "Creates a copy of the section of this <see cref=&quot;T:System.Drawing.Bitmap&quot;></see> defined with a specified <see cref=&quot;T:System.Drawing.Imaging.PixelFormat&quot;></see> enumeration."
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a <xref:System.Drawing.Bitmap> from a file.  \n  \n-   Clones a portion of that <xref:System.Drawing.Bitmap>.  \n  \n-   Draws the cloned portion to the screen.  \n  \n [!code-cpp[System.Drawing.ClassicBitmapExamples#2](~/add/codesnippet/CPP/6beff7cd-a70c-4c8c-beec-_1.cpp)]\n [!code-cs[System.Drawing.ClassicBitmapExamples#2](~/add/codesnippet/CSharp/6beff7cd-a70c-4c8c-beec-_1.cs)]\n [!code-vb[System.Drawing.ClassicBitmapExamples#2](~/add/codesnippet/VisualBasic/6beff7cd-a70c-4c8c-beec-_1.vb)]"
  syntax:
    content: public System.Drawing.Bitmap Clone (System.Drawing.RectangleF rect, System.Drawing.Imaging.PixelFormat format);
    parameters:
    - id: rect
      type: System.Drawing.RectangleF
      description: "Defines the portion of this  to copy."
    - id: format
      type: System.Drawing.Imaging.PixelFormat
      description: "Specifies the  enumeration for the destination ."
    return:
      type: System.Drawing.Bitmap
      description: "To be added."
  overload: System.Drawing.Bitmap.Clone*
  exceptions:
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n    rect is outside of the source bitmap bounds."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The height or width of rect is 0."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Bitmap.FromHicon(System.IntPtr)
  id: FromHicon(System.IntPtr)
  parent: System.Drawing.Bitmap
  langs:
  - csharp
  name: FromHicon(IntPtr)
  nameWithType: Bitmap.FromHicon(IntPtr)
  fullName: System.Drawing.Bitmap.FromHicon(IntPtr)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "Creates a <see cref=&quot;T:System.Drawing.Bitmap&quot;></see> from a Windows handle to an icon."
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Gets the handle to an existing icon image.  \n  \n-   Creates a <xref:System.Drawing.Bitmap> from the handle.  \n  \n-   Draws the <xref:System.Drawing.Bitmap> to the screen.  \n  \n [!code-cpp[System.Drawing.ClassicBitmapExamples#3](~/add/codesnippet/CPP/m-system.drawing.bitmap._3_1.cpp)]\n [!code-cs[System.Drawing.ClassicBitmapExamples#3](~/add/codesnippet/CSharp/m-system.drawing.bitmap._3_1.cs)]\n [!code-vb[System.Drawing.ClassicBitmapExamples#3](~/add/codesnippet/VisualBasic/m-system.drawing.bitmap._3_1.vb)]"
  syntax:
    content: public static System.Drawing.Bitmap FromHicon (IntPtr hicon);
    parameters:
    - id: hicon
      type: System.IntPtr
      description: "A handle to an icon."
    return:
      type: System.Drawing.Bitmap
      description: "To be added."
  overload: System.Drawing.Bitmap.FromHicon*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Bitmap.FromResource(System.IntPtr,System.String)
  id: FromResource(System.IntPtr,System.String)
  parent: System.Drawing.Bitmap
  langs:
  - csharp
  name: FromResource(IntPtr,String)
  nameWithType: Bitmap.FromResource(IntPtr,String)
  fullName: System.Drawing.Bitmap.FromResource(IntPtr,String)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "Creates a <see cref=&quot;T:System.Drawing.Bitmap&quot;></see> from the specified Windows resource."
  remarks: "FromResource requires security permission to call unmanaged code. For a managed alternative for creating a bitmap from an embedded resource, see <xref:System.Drawing.Bitmap.%23ctor%28System.Type%2CSystem.String%29?displayProperty=fullName>. FromResource works only with bitmaps that are named resources in a DLL."
  syntax:
    content: public static System.Drawing.Bitmap FromResource (IntPtr hinstance, string bitmapName);
    parameters:
    - id: hinstance
      type: System.IntPtr
      description: "A handle to an instance of the executable file that contains the resource."
    - id: bitmapName
      type: System.String
      description: "A string that contains the name of the resource bitmap."
    return:
      type: System.Drawing.Bitmap
      description: "To be added."
  overload: System.Drawing.Bitmap.FromResource*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Bitmap.GetHbitmap
  id: GetHbitmap
  parent: System.Drawing.Bitmap
  langs:
  - csharp
  name: GetHbitmap()
  nameWithType: Bitmap.GetHbitmap()
  fullName: System.Drawing.Bitmap.GetHbitmap()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "Creates a [!INCLUDE[ndptecgdi](~/add/includes/ndptecgdi-md.md)] bitmap object from this <see cref=&quot;T:System.Drawing.Bitmap&quot;></see>."
  remarks: "You are responsible for calling the [!INCLUDE[ndptecgdi](~/add/includes/ndptecgdi-md.md)] `DeleteObject` method to free the memory used by the [!INCLUDE[ndptecgdi](~/add/includes/ndptecgdi-md.md)] bitmap object. For more information about GDI bitmaps, see [Bitmaps](http://go.microsoft.com/fwlink/?LinkId=205685) in the Windows GDI documentation."
  example:
  - "The following code example demonstrates how to use the GetHbitmap method.  \n  \n [!code-cpp[System.Drawing.ClassicBitmapExamples#4](~/add/codesnippet/CPP/m-system.drawing.bitmap._6_1.cpp)]\n [!code-cs[System.Drawing.ClassicBitmapExamples#4](~/add/codesnippet/CSharp/m-system.drawing.bitmap._6_1.cs)]\n [!code-vb[System.Drawing.ClassicBitmapExamples#4](~/add/codesnippet/VisualBasic/m-system.drawing.bitmap._6_1.vb)]"
  syntax:
    content: public IntPtr GetHbitmap ();
    parameters: []
    return:
      type: System.IntPtr
      description: "To be added."
  overload: System.Drawing.Bitmap.GetHbitmap*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The height or width of the bitmap is greater than <xref:System.Int16.MaxValue>."
  - type: System.Exception
    commentId: T:System.Exception
    description: "The operation failed."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Bitmap.GetHbitmap(System.Drawing.Color)
  id: GetHbitmap(System.Drawing.Color)
  parent: System.Drawing.Bitmap
  langs:
  - csharp
  name: GetHbitmap(Color)
  nameWithType: Bitmap.GetHbitmap(Color)
  fullName: System.Drawing.Bitmap.GetHbitmap(Color)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "Creates a [!INCLUDE[ndptecgdi](~/add/includes/ndptecgdi-md.md)] bitmap object from this <see cref=&quot;T:System.Drawing.Bitmap&quot;></see>."
  remarks: "You are responsible for calling the [!INCLUDE[ndptecgdi](~/add/includes/ndptecgdi-md.md)] `DeleteObject` method to free the memory used by the [!INCLUDE[ndptecgdi](~/add/includes/ndptecgdi-md.md)] bitmap object. For more information about GDI bitmaps, see [Bitmaps](http://go.microsoft.com/fwlink/?LinkId=205685) in the Windows GDI documentation."
  example:
  - "The following code example demonstrates how to use the GetHbitmap.method.  \n  \n [!code-cpp[System.Drawing.ClassicBitmapExamples#5](~/add/codesnippet/CPP/m-system.drawing.bitmap._7_1.cpp)]\n [!code-cs[System.Drawing.ClassicBitmapExamples#5](~/add/codesnippet/CSharp/m-system.drawing.bitmap._7_1.cs)]\n [!code-vb[System.Drawing.ClassicBitmapExamples#5](~/add/codesnippet/VisualBasic/m-system.drawing.bitmap._7_1.vb)]"
  syntax:
    content: public IntPtr GetHbitmap (System.Drawing.Color background);
    parameters:
    - id: background
      type: System.Drawing.Color
      description: "A  structure that specifies the background color. This parameter is ignored if the bitmap is totally opaque."
    return:
      type: System.IntPtr
      description: "To be added."
  overload: System.Drawing.Bitmap.GetHbitmap*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The height or width of the bitmap is greater than <xref:System.Int16.MaxValue>."
  - type: System.Exception
    commentId: T:System.Exception
    description: "The operation failed."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Bitmap.GetHicon
  id: GetHicon
  parent: System.Drawing.Bitmap
  langs:
  - csharp
  name: GetHicon()
  nameWithType: Bitmap.GetHicon()
  fullName: System.Drawing.Bitmap.GetHicon()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "Returns the handle to an icon."
  remarks: "Initially, an icon created from the handle will have the same size as the original bitmap."
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a <xref:System.Drawing.Bitmap>.  \n  \n-   Draws that object to the screen.  \n  \n-   Gets an icon handle for the <xref:System.Drawing.Bitmap>.  \n  \n-   Sets the <xref:System.Windows.Forms.Form.Icon%2A?displayProperty=fullName> attribute of the form to an icon created from the handle.  \n  \n [!code-cpp[System.Drawing.ClassicBitmapExamples#6](~/add/codesnippet/CPP/m-system.drawing.bitmap._5_1.cpp)]\n [!code-cs[System.Drawing.ClassicBitmapExamples#6](~/add/codesnippet/CSharp/m-system.drawing.bitmap._5_1.cs)]\n [!code-vb[System.Drawing.ClassicBitmapExamples#6](~/add/codesnippet/VisualBasic/m-system.drawing.bitmap._5_1.vb)]"
  syntax:
    content: public IntPtr GetHicon ();
    parameters: []
    return:
      type: System.IntPtr
      description: "To be added."
  overload: System.Drawing.Bitmap.GetHicon*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: "The operation failed."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Bitmap.GetPixel(System.Int32,System.Int32)
  id: GetPixel(System.Int32,System.Int32)
  parent: System.Drawing.Bitmap
  langs:
  - csharp
  name: GetPixel(Int32,Int32)
  nameWithType: Bitmap.GetPixel(Int32,Int32)
  fullName: System.Drawing.Bitmap.GetPixel(Int32,Int32)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "Gets the color of the specified pixel in this <see cref=&quot;T:System.Drawing.Bitmap&quot;></see>."
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code gets the color of a pixel in a bitmap, and then fills a rectangle with that color.  \n  \n [!code-cpp[System.Drawing.ClassicBitmapExamples#7](~/add/codesnippet/CPP/m-system.drawing.bitmap._0_1.cpp)]\n [!code-cs[System.Drawing.ClassicBitmapExamples#7](~/add/codesnippet/CSharp/m-system.drawing.bitmap._0_1.cs)]\n [!code-vb[System.Drawing.ClassicBitmapExamples#7](~/add/codesnippet/VisualBasic/m-system.drawing.bitmap._0_1.vb)]"
  syntax:
    content: public System.Drawing.Color GetPixel (int x, int y);
    parameters:
    - id: x
      type: System.Int32
      description: "The x-coordinate of the pixel to retrieve."
    - id: y
      type: System.Int32
      description: "The y-coordinate of the pixel to retrieve."
    return:
      type: System.Drawing.Color
      description: "To be added."
  overload: System.Drawing.Bitmap.GetPixel*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n    x is less than 0, or greater than or equal to <xref:System.Drawing.Image.Width%2A>.  \n  \n -or-  \n  \n y is less than 0, or greater than or equal to <xref:System.Drawing.Image.Height%2A>."
  - type: System.Exception
    commentId: T:System.Exception
    description: "The operation failed."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Bitmap.LockBits(System.Drawing.Rectangle,System.Drawing.Imaging.ImageLockMode,System.Drawing.Imaging.PixelFormat)
  id: LockBits(System.Drawing.Rectangle,System.Drawing.Imaging.ImageLockMode,System.Drawing.Imaging.PixelFormat)
  parent: System.Drawing.Bitmap
  langs:
  - csharp
  name: LockBits(Rectangle,ImageLockMode,PixelFormat)
  nameWithType: Bitmap.LockBits(Rectangle,ImageLockMode,PixelFormat)
  fullName: System.Drawing.Bitmap.LockBits(Rectangle,ImageLockMode,PixelFormat)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "Locks a <see cref=&quot;T:System.Drawing.Bitmap&quot;></see> into system memory."
  remarks: "Use the <xref:System.Drawing.Bitmap.LockBits%2A> method to lock an existing bitmap in system memory so that it can be changed programmatically. You can change the color of an image with the <xref:System.Drawing.Bitmap.SetPixel%2A> method, although the <xref:System.Drawing.Bitmap.LockBits%2A> method offers better performance for large-scale changes.       The <xref:System.Drawing.Imaging.BitmapData> specifies the attributes of the <xref:System.Drawing.Bitmap>, such as size, pixel format, the starting address of the pixel data in memory, and length of each scan line (stride).       When calling this method, you should use a member of the <xref:System.Drawing.Imaging.PixelFormat?displayProperty=fullName> enumeration that contains a specific bits-per-pixel (BPP) value. Using <xref:System.Drawing.Imaging.PixelFormat?displayProperty=fullName> values such as <xref:System.Drawing.Imaging.PixelFormat> and <xref:System.Drawing.Imaging.PixelFormat> will throw an <xref:System.ArgumentException?displayProperty=fullName>. Also, passing the incorrect pixel format for a bitmap will throw an <xref:System.ArgumentException?displayProperty=fullName>."
  example:
  - "The following code example demonstrates how to use the <xref:System.Drawing.Image.PixelFormat%2A>, <xref:System.Drawing.Image.Height%2A>, <xref:System.Drawing.Image.Width%2A>, and <xref:System.Drawing.Imaging.BitmapData.Scan0%2A> properties; the LockBits and <xref:System.Drawing.Bitmap.UnlockBits%2A> methods; and the <xref:System.Drawing.Imaging.ImageLockMode> enumeration. This example is designed to be used with Windows Forms. This example is not designed to work correctly with all pixel formats, but to provide an example of how to use the LockBits method. To run this example, paste it into a form and handle the form's <xref:System.Windows.Forms.Control.Paint> event by calling the `LockUnlockBitsExample` method, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  \n  \n [!code-cs[System.Drawing.BitmapMembers#5](~/add/codesnippet/CSharp/89ae463a-b5b8-4e6f-b384-_1.cs)]\n [!code-vb[System.Drawing.BitmapMembers#5](~/add/codesnippet/VisualBasic/89ae463a-b5b8-4e6f-b384-_1.vb)]\n [!code-cpp[System.Drawing.BitmapMembers#5](~/add/codesnippet/CPP/89ae463a-b5b8-4e6f-b384-_1.cpp)]"
  syntax:
    content: public System.Drawing.Imaging.BitmapData LockBits (System.Drawing.Rectangle rect, System.Drawing.Imaging.ImageLockMode flags, System.Drawing.Imaging.PixelFormat format);
    parameters:
    - id: rect
      type: System.Drawing.Rectangle
      description: "A  structure that specifies the portion of the  to lock."
    - id: flags
      type: System.Drawing.Imaging.ImageLockMode
      description: "An  enumeration that specifies the access level (read/write) for the ."
    - id: format
      type: System.Drawing.Imaging.PixelFormat
      description: "A  enumeration that specifies the data format of this ."
    return:
      type: System.Drawing.Imaging.BitmapData
      description: "To be added."
  overload: System.Drawing.Bitmap.LockBits*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The  is not a specific bits-per-pixel value.       -or-       The incorrect  is passed in for a bitmap."
  - type: System.Exception
    commentId: T:System.Exception
    description: "The operation failed."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Bitmap.LockBits(System.Drawing.Rectangle,System.Drawing.Imaging.ImageLockMode,System.Drawing.Imaging.PixelFormat,System.Drawing.Imaging.BitmapData)
  id: LockBits(System.Drawing.Rectangle,System.Drawing.Imaging.ImageLockMode,System.Drawing.Imaging.PixelFormat,System.Drawing.Imaging.BitmapData)
  parent: System.Drawing.Bitmap
  langs:
  - csharp
  name: LockBits(Rectangle,ImageLockMode,PixelFormat,BitmapData)
  nameWithType: Bitmap.LockBits(Rectangle,ImageLockMode,PixelFormat,BitmapData)
  fullName: System.Drawing.Bitmap.LockBits(Rectangle,ImageLockMode,PixelFormat,BitmapData)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "Locks a <see cref=&quot;T:System.Drawing.Bitmap&quot;></see> into system memory"
  remarks: "Use the <xref:System.Drawing.Bitmap.LockBits%2A> method to lock an existing bitmap in system memory so that it can be changed programmatically. You can change the color of an image with the <xref:System.Drawing.Bitmap.SetPixel%2A> method, although the <xref:System.Drawing.Bitmap.LockBits%2A> method offers better performance for large-scale changes.       When calling this method, you should use a member of the <xref:System.Drawing.Imaging.PixelFormat?displayProperty=fullName> enumeration that contains a specific bits-per-pixel (BPP) value. Using <xref:System.Drawing.Imaging.PixelFormat?displayProperty=fullName> values, such as <xref:System.Drawing.Imaging.PixelFormat> and <xref:System.Drawing.Imaging.PixelFormat>, will throw an <xref:System.ArgumentException?displayProperty=fullName>. Also, passing the incorrect pixel format for a bitmap will throw an <xref:System.ArgumentException?displayProperty=fullName>.       This version of the <xref:System.Drawing.Bitmap.LockBits%2A> method is intended to be used with a `flags` value of <xref:System.Drawing.Imaging.ImageLockMode?displayProperty=fullName>."
  syntax:
    content: public System.Drawing.Imaging.BitmapData LockBits (System.Drawing.Rectangle rect, System.Drawing.Imaging.ImageLockMode flags, System.Drawing.Imaging.PixelFormat format, System.Drawing.Imaging.BitmapData bitmapData);
    parameters:
    - id: rect
      type: System.Drawing.Rectangle
      description: "A rectangle structure that specifies the portion of the  to lock."
    - id: flags
      type: System.Drawing.Imaging.ImageLockMode
      description: "One of the  values that specifies the access level (read/write) for the ."
    - id: format
      type: System.Drawing.Imaging.PixelFormat
      description: "One of the  values that specifies the data format of the ."
    - id: bitmapData
      type: System.Drawing.Imaging.BitmapData
      description: "A  that contains information about the lock operation."
    return:
      type: System.Drawing.Imaging.BitmapData
      description: "To be added."
  overload: System.Drawing.Bitmap.LockBits*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n     value is not a specific bits-per-pixel value.  \n  \n -or-  \n  \n The incorrect  is passed in for a bitmap."
  - type: System.Exception
    commentId: T:System.Exception
    description: "The operation failed."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Bitmap.MakeTransparent
  id: MakeTransparent
  parent: System.Drawing.Bitmap
  langs:
  - csharp
  name: MakeTransparent()
  nameWithType: Bitmap.MakeTransparent()
  fullName: System.Drawing.Bitmap.MakeTransparent()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "Makes the default transparent color transparent for this <see cref=&quot;T:System.Drawing.Bitmap&quot;></see>."
  remarks: "The system palette defines one color as the default transparent, or alpha, color. This method makes the default transparent color transparent for this <xref:System.Drawing.Bitmap>. If no transparent color is specified by the system, <xref:System.Drawing.Color.LightGray%2A> is the transparent color.       When you call <xref:System.Drawing.Bitmap.MakeTransparent%2A>, the bitmap will be converted to the <xref:System.Drawing.Imaging.PixelFormat> format, as this format supports an alpha channel."
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code makes the system default transparent color transparent for `myBitmap`, and then draws the <xref:System.Drawing.Bitmap> to the screen.  \n  \n [!code-cpp[System.Drawing.ClassicBitmapExamples#8](~/add/codesnippet/CPP/m-system.drawing.bitmap._9_1.cpp)]\n [!code-cs[System.Drawing.ClassicBitmapExamples#8](~/add/codesnippet/CSharp/m-system.drawing.bitmap._9_1.cs)]\n [!code-vb[System.Drawing.ClassicBitmapExamples#8](~/add/codesnippet/VisualBasic/m-system.drawing.bitmap._9_1.vb)]"
  syntax:
    content: public void MakeTransparent ();
    parameters: []
  overload: System.Drawing.Bitmap.MakeTransparent*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The image format of the  is an icon format."
  - type: System.Exception
    commentId: T:System.Exception
    description: "The operation failed."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Bitmap.MakeTransparent(System.Drawing.Color)
  id: MakeTransparent(System.Drawing.Color)
  parent: System.Drawing.Bitmap
  langs:
  - csharp
  name: MakeTransparent(Color)
  nameWithType: Bitmap.MakeTransparent(Color)
  fullName: System.Drawing.Bitmap.MakeTransparent(Color)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "Makes the specified color transparent for this <see cref=&quot;T:System.Drawing.Bitmap&quot;></see>."
  remarks: "When you call MakeTransparent, the bitmap will be converted to the <xref:System.Drawing.Imaging.PixelFormat> format, as this format supports an alpha channel."
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Gets the color of a pixel in a <xref:System.Drawing.Bitmap>.  \n  \n-   Makes that color transparent for the bitmap.  \n  \n-   Draws the <xref:System.Drawing.Bitmap> to the screen.  \n  \n [!code-cpp[System.Drawing.ClassicBitmapExamples#9](~/add/codesnippet/CPP/m-system.drawing.bitmap._12_1.cpp)]\n [!code-cs[System.Drawing.ClassicBitmapExamples#9](~/add/codesnippet/CSharp/m-system.drawing.bitmap._12_1.cs)]\n [!code-vb[System.Drawing.ClassicBitmapExamples#9](~/add/codesnippet/VisualBasic/m-system.drawing.bitmap._12_1.vb)]"
  syntax:
    content: public void MakeTransparent (System.Drawing.Color transparentColor);
    parameters:
    - id: transparentColor
      type: System.Drawing.Color
      description: "The  structure that represents the color to make transparent."
  overload: System.Drawing.Bitmap.MakeTransparent*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The image format of the  is an icon format."
  - type: System.Exception
    commentId: T:System.Exception
    description: "The operation failed."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Bitmap.SetPixel(System.Int32,System.Int32,System.Drawing.Color)
  id: SetPixel(System.Int32,System.Int32,System.Drawing.Color)
  parent: System.Drawing.Bitmap
  langs:
  - csharp
  name: SetPixel(Int32,Int32,Color)
  nameWithType: Bitmap.SetPixel(Int32,Int32,Color)
  fullName: System.Drawing.Bitmap.SetPixel(Int32,Int32,Color)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "Sets the color of the specified pixel in this <see cref=&quot;T:System.Drawing.Bitmap&quot;></see>."
  remarks: "Use SetPixel method to set the color of an individual pixel in an image programmatically. You can also change an image programmatically by using the <xref:System.Drawing.Bitmap.LockBits%2A> method. Typically for large-scale changes, the <xref:System.Drawing.Bitmap.LockBits%2A> method offers better performance."
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n-   Creates a <xref:System.Drawing.Bitmap>.  \n  \n-   Sets the color of each pixel in the bitmap to black.  \n  \n-   Draws the bitmap.  \n  \n [!code-cpp[System.Drawing.ClassicBitmapExamples#10](~/add/codesnippet/CPP/m-system.drawing.bitmap._11_1.cpp)]\n [!code-cs[System.Drawing.ClassicBitmapExamples#10](~/add/codesnippet/CSharp/m-system.drawing.bitmap._11_1.cs)]\n [!code-vb[System.Drawing.ClassicBitmapExamples#10](~/add/codesnippet/VisualBasic/m-system.drawing.bitmap._11_1.vb)]"
  syntax:
    content: public void SetPixel (int x, int y, System.Drawing.Color color);
    parameters:
    - id: x
      type: System.Int32
      description: "The x-coordinate of the pixel to set."
    - id: y
      type: System.Int32
      description: "The y-coordinate of the pixel to set."
    - id: color
      type: System.Drawing.Color
      description: "A  structure that represents the color to assign to the specified pixel."
  overload: System.Drawing.Bitmap.SetPixel*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: "The operation failed."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Bitmap.SetResolution(System.Single,System.Single)
  id: SetResolution(System.Single,System.Single)
  parent: System.Drawing.Bitmap
  langs:
  - csharp
  name: SetResolution(Single,Single)
  nameWithType: Bitmap.SetResolution(Single,Single)
  fullName: System.Drawing.Bitmap.SetResolution(Single,Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "Sets the resolution for this <see cref=&quot;T:System.Drawing.Bitmap&quot;></see>."
  remarks: "Use this method to set the desired resolution on a newly created bitmap. Changing the resolution of the image does not change its physical size."
  example:
  - "The following example code shows how to use the SetResolution method.  \n  \n [!code-vb[System.Drawing.Misc3#SetResolution](~/add/codesnippet/VisualBasic/m-system.drawing.bitmap._8_1.vb)]\n [!code-cs[System.Drawing.Misc3#SetResolution](~/add/codesnippet/CSharp/m-system.drawing.bitmap._8_1.cs)]"
  syntax:
    content: public void SetResolution (float xDpi, float yDpi);
    parameters:
    - id: xDpi
      type: System.Single
      description: "The horizontal resolution, in dots per inch, of the ."
    - id: yDpi
      type: System.Single
      description: "The vertical resolution, in dots per inch, of the ."
  overload: System.Drawing.Bitmap.SetResolution*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: "The operation failed."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Bitmap.UnlockBits(System.Drawing.Imaging.BitmapData)
  id: UnlockBits(System.Drawing.Imaging.BitmapData)
  parent: System.Drawing.Bitmap
  langs:
  - csharp
  name: UnlockBits(BitmapData)
  nameWithType: Bitmap.UnlockBits(BitmapData)
  fullName: System.Drawing.Bitmap.UnlockBits(BitmapData)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "Unlocks this <see cref=&quot;T:System.Drawing.Bitmap&quot;></see> from system memory."
  remarks: "The <xref:System.Drawing.Imaging.BitmapData> specifies the attributes of the <xref:System.Drawing.Bitmap>, such as size, pixel format, the starting address of the pixel data in memory, and length of each scan line (stride)."
  example:
  - "The following code example demonstrates how to use the <xref:System.Drawing.Image.PixelFormat%2A>, <xref:System.Drawing.Image.Height%2A>, <xref:System.Drawing.Image.Width%2A>, and <xref:System.Drawing.Imaging.BitmapData.Scan0%2A> properties; the <xref:System.Drawing.Bitmap.LockBits%2A> and UnlockBits methods; and the <xref:System.Drawing.Imaging.ImageLockMode> enumeration. This example is not designed to work correctly with all pixel formats, but to provide an example of how to use the <xref:System.Drawing.Bitmap.LockBits%2A> method. This example is designed to be used with Windows Forms. To run this example, paste it into a form and handle the form's <xref:System.Windows.Forms.Control.Paint> event by calling the `LockUnlockBitsExample` method, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  \n  \n [!code-cs[System.Drawing.BitmapMembers#5](~/add/codesnippet/CSharp/m-system.drawing.bitmap._4_1.cs)]\n [!code-vb[System.Drawing.BitmapMembers#5](~/add/codesnippet/VisualBasic/m-system.drawing.bitmap._4_1.vb)]\n [!code-cpp[System.Drawing.BitmapMembers#5](~/add/codesnippet/CPP/m-system.drawing.bitmap._4_1.cpp)]"
  syntax:
    content: public void UnlockBits (System.Drawing.Imaging.BitmapData bitmapdata);
    parameters:
    - id: bitmapdata
      type: System.Drawing.Imaging.BitmapData
      description: "A  that specifies information about the lock operation."
  overload: System.Drawing.Bitmap.UnlockBits*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: "The operation failed."
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Drawing.Image
  isExternal: false
  name: System.Drawing.Image
- uid: System.Drawing.Bitmap.#ctor(System.Drawing.Image)
  parent: System.Drawing.Bitmap
  isExternal: false
  name: Bitmap(Image)
  nameWithType: Bitmap.Bitmap(Image)
  fullName: System.Drawing.Bitmap.Bitmap(Image)
- uid: System.Drawing.Bitmap.#ctor(System.IO.Stream)
  parent: System.Drawing.Bitmap
  isExternal: false
  name: Bitmap(Stream)
  nameWithType: Bitmap.Bitmap(Stream)
  fullName: System.Drawing.Bitmap.Bitmap(Stream)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Drawing.Bitmap.#ctor(System.String)
  parent: System.Drawing.Bitmap
  isExternal: false
  name: Bitmap(String)
  nameWithType: Bitmap.Bitmap(String)
  fullName: System.Drawing.Bitmap.Bitmap(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Drawing.Bitmap.#ctor(System.Drawing.Image,System.Drawing.Size)
  parent: System.Drawing.Bitmap
  isExternal: false
  name: Bitmap(Image,Size)
  nameWithType: Bitmap.Bitmap(Image,Size)
  fullName: System.Drawing.Bitmap.Bitmap(Image,Size)
- uid: System.Drawing.Size
  parent: System.Drawing
  isExternal: false
  name: Size
  nameWithType: Size
  fullName: System.Drawing.Size
- uid: System.Drawing.Bitmap.#ctor(System.Int32,System.Int32)
  parent: System.Drawing.Bitmap
  isExternal: false
  name: Bitmap(Int32,Int32)
  nameWithType: Bitmap.Bitmap(Int32,Int32)
  fullName: System.Drawing.Bitmap.Bitmap(Int32,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Drawing.Bitmap.#ctor(System.IO.Stream,System.Boolean)
  parent: System.Drawing.Bitmap
  isExternal: false
  name: Bitmap(Stream,Boolean)
  nameWithType: Bitmap.Bitmap(Stream,Boolean)
  fullName: System.Drawing.Bitmap.Bitmap(Stream,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Drawing.Bitmap.#ctor(System.String,System.Boolean)
  parent: System.Drawing.Bitmap
  isExternal: false
  name: Bitmap(String,Boolean)
  nameWithType: Bitmap.Bitmap(String,Boolean)
  fullName: System.Drawing.Bitmap.Bitmap(String,Boolean)
- uid: System.Drawing.Bitmap.#ctor(System.Type,System.String)
  parent: System.Drawing.Bitmap
  isExternal: false
  name: Bitmap(Type,String)
  nameWithType: Bitmap.Bitmap(Type,String)
  fullName: System.Drawing.Bitmap.Bitmap(Type,String)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Drawing.Bitmap.#ctor(System.Drawing.Image,System.Int32,System.Int32)
  parent: System.Drawing.Bitmap
  isExternal: false
  name: Bitmap(Image,Int32,Int32)
  nameWithType: Bitmap.Bitmap(Image,Int32,Int32)
  fullName: System.Drawing.Bitmap.Bitmap(Image,Int32,Int32)
- uid: System.Drawing.Bitmap.#ctor(System.Int32,System.Int32,System.Drawing.Graphics)
  parent: System.Drawing.Bitmap
  isExternal: false
  name: Bitmap(Int32,Int32,Graphics)
  nameWithType: Bitmap.Bitmap(Int32,Int32,Graphics)
  fullName: System.Drawing.Bitmap.Bitmap(Int32,Int32,Graphics)
- uid: System.Drawing.Graphics
  parent: System.Drawing
  isExternal: false
  name: Graphics
  nameWithType: Graphics
  fullName: System.Drawing.Graphics
- uid: System.Drawing.Bitmap.#ctor(System.Int32,System.Int32,System.Drawing.Imaging.PixelFormat)
  parent: System.Drawing.Bitmap
  isExternal: false
  name: Bitmap(Int32,Int32,PixelFormat)
  nameWithType: Bitmap.Bitmap(Int32,Int32,PixelFormat)
  fullName: System.Drawing.Bitmap.Bitmap(Int32,Int32,PixelFormat)
- uid: System.Drawing.Imaging.PixelFormat
  parent: System.Drawing.Imaging
  isExternal: false
  name: PixelFormat
  nameWithType: PixelFormat
  fullName: System.Drawing.Imaging.PixelFormat
- uid: System.Drawing.Bitmap.#ctor(System.Int32,System.Int32,System.Int32,System.Drawing.Imaging.PixelFormat,System.IntPtr)
  parent: System.Drawing.Bitmap
  isExternal: false
  name: Bitmap(Int32,Int32,Int32,PixelFormat,IntPtr)
  nameWithType: Bitmap.Bitmap(Int32,Int32,Int32,PixelFormat,IntPtr)
  fullName: System.Drawing.Bitmap.Bitmap(Int32,Int32,Int32,PixelFormat,IntPtr)
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Drawing.Bitmap.Clone(System.Drawing.Rectangle,System.Drawing.Imaging.PixelFormat)
  parent: System.Drawing.Bitmap
  isExternal: false
  name: Clone(Rectangle,PixelFormat)
  nameWithType: Bitmap.Clone(Rectangle,PixelFormat)
  fullName: System.Drawing.Bitmap.Clone(Rectangle,PixelFormat)
- uid: System.Drawing.Bitmap
  parent: System.Drawing
  isExternal: false
  name: Bitmap
  nameWithType: Bitmap
  fullName: System.Drawing.Bitmap
- uid: System.Drawing.Rectangle
  parent: System.Drawing
  isExternal: false
  name: Rectangle
  nameWithType: Rectangle
  fullName: System.Drawing.Rectangle
- uid: System.Drawing.Bitmap.Clone(System.Drawing.RectangleF,System.Drawing.Imaging.PixelFormat)
  parent: System.Drawing.Bitmap
  isExternal: false
  name: Clone(RectangleF,PixelFormat)
  nameWithType: Bitmap.Clone(RectangleF,PixelFormat)
  fullName: System.Drawing.Bitmap.Clone(RectangleF,PixelFormat)
- uid: System.Drawing.RectangleF
  parent: System.Drawing
  isExternal: false
  name: RectangleF
  nameWithType: RectangleF
  fullName: System.Drawing.RectangleF
- uid: System.Drawing.Bitmap.FromHicon(System.IntPtr)
  parent: System.Drawing.Bitmap
  isExternal: false
  name: FromHicon(IntPtr)
  nameWithType: Bitmap.FromHicon(IntPtr)
  fullName: System.Drawing.Bitmap.FromHicon(IntPtr)
- uid: System.Drawing.Bitmap.FromResource(System.IntPtr,System.String)
  parent: System.Drawing.Bitmap
  isExternal: false
  name: FromResource(IntPtr,String)
  nameWithType: Bitmap.FromResource(IntPtr,String)
  fullName: System.Drawing.Bitmap.FromResource(IntPtr,String)
- uid: System.Drawing.Bitmap.GetHbitmap
  parent: System.Drawing.Bitmap
  isExternal: false
  name: GetHbitmap()
  nameWithType: Bitmap.GetHbitmap()
  fullName: System.Drawing.Bitmap.GetHbitmap()
- uid: System.Drawing.Bitmap.GetHbitmap(System.Drawing.Color)
  parent: System.Drawing.Bitmap
  isExternal: false
  name: GetHbitmap(Color)
  nameWithType: Bitmap.GetHbitmap(Color)
  fullName: System.Drawing.Bitmap.GetHbitmap(Color)
- uid: System.Drawing.Color
  parent: System.Drawing
  isExternal: false
  name: Color
  nameWithType: Color
  fullName: System.Drawing.Color
- uid: System.Drawing.Bitmap.GetHicon
  parent: System.Drawing.Bitmap
  isExternal: false
  name: GetHicon()
  nameWithType: Bitmap.GetHicon()
  fullName: System.Drawing.Bitmap.GetHicon()
- uid: System.Drawing.Bitmap.GetPixel(System.Int32,System.Int32)
  parent: System.Drawing.Bitmap
  isExternal: false
  name: GetPixel(Int32,Int32)
  nameWithType: Bitmap.GetPixel(Int32,Int32)
  fullName: System.Drawing.Bitmap.GetPixel(Int32,Int32)
- uid: System.Drawing.Bitmap.LockBits(System.Drawing.Rectangle,System.Drawing.Imaging.ImageLockMode,System.Drawing.Imaging.PixelFormat)
  parent: System.Drawing.Bitmap
  isExternal: false
  name: LockBits(Rectangle,ImageLockMode,PixelFormat)
  nameWithType: Bitmap.LockBits(Rectangle,ImageLockMode,PixelFormat)
  fullName: System.Drawing.Bitmap.LockBits(Rectangle,ImageLockMode,PixelFormat)
- uid: System.Drawing.Imaging.BitmapData
  parent: System.Drawing.Imaging
  isExternal: false
  name: BitmapData
  nameWithType: BitmapData
  fullName: System.Drawing.Imaging.BitmapData
- uid: System.Drawing.Imaging.ImageLockMode
  parent: System.Drawing.Imaging
  isExternal: false
  name: ImageLockMode
  nameWithType: ImageLockMode
  fullName: System.Drawing.Imaging.ImageLockMode
- uid: System.Drawing.Bitmap.LockBits(System.Drawing.Rectangle,System.Drawing.Imaging.ImageLockMode,System.Drawing.Imaging.PixelFormat,System.Drawing.Imaging.BitmapData)
  parent: System.Drawing.Bitmap
  isExternal: false
  name: LockBits(Rectangle,ImageLockMode,PixelFormat,BitmapData)
  nameWithType: Bitmap.LockBits(Rectangle,ImageLockMode,PixelFormat,BitmapData)
  fullName: System.Drawing.Bitmap.LockBits(Rectangle,ImageLockMode,PixelFormat,BitmapData)
- uid: System.Drawing.Bitmap.MakeTransparent
  parent: System.Drawing.Bitmap
  isExternal: false
  name: MakeTransparent()
  nameWithType: Bitmap.MakeTransparent()
  fullName: System.Drawing.Bitmap.MakeTransparent()
- uid: System.Drawing.Bitmap.MakeTransparent(System.Drawing.Color)
  parent: System.Drawing.Bitmap
  isExternal: false
  name: MakeTransparent(Color)
  nameWithType: Bitmap.MakeTransparent(Color)
  fullName: System.Drawing.Bitmap.MakeTransparent(Color)
- uid: System.Drawing.Bitmap.SetPixel(System.Int32,System.Int32,System.Drawing.Color)
  parent: System.Drawing.Bitmap
  isExternal: false
  name: SetPixel(Int32,Int32,Color)
  nameWithType: Bitmap.SetPixel(Int32,Int32,Color)
  fullName: System.Drawing.Bitmap.SetPixel(Int32,Int32,Color)
- uid: System.Drawing.Bitmap.SetResolution(System.Single,System.Single)
  parent: System.Drawing.Bitmap
  isExternal: false
  name: SetResolution(Single,Single)
  nameWithType: Bitmap.SetResolution(Single,Single)
  fullName: System.Drawing.Bitmap.SetResolution(Single,Single)
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Drawing.Bitmap.UnlockBits(System.Drawing.Imaging.BitmapData)
  parent: System.Drawing.Bitmap
  isExternal: false
  name: UnlockBits(BitmapData)
  nameWithType: Bitmap.UnlockBits(BitmapData)
  fullName: System.Drawing.Bitmap.UnlockBits(BitmapData)
- uid: System.Drawing.Bitmap.#ctor*
  parent: System.Drawing.Bitmap
  isExternal: false
  name: Bitmap
  nameWithType: Bitmap.Bitmap
- uid: System.Drawing.Bitmap.Clone*
  parent: System.Drawing.Bitmap
  isExternal: false
  name: Clone
  nameWithType: Bitmap.Clone
- uid: System.Drawing.Bitmap.FromHicon*
  parent: System.Drawing.Bitmap
  isExternal: false
  name: FromHicon
  nameWithType: Bitmap.FromHicon
- uid: System.Drawing.Bitmap.FromResource*
  parent: System.Drawing.Bitmap
  isExternal: false
  name: FromResource
  nameWithType: Bitmap.FromResource
- uid: System.Drawing.Bitmap.GetHbitmap*
  parent: System.Drawing.Bitmap
  isExternal: false
  name: GetHbitmap
  nameWithType: Bitmap.GetHbitmap
- uid: System.Drawing.Bitmap.GetHicon*
  parent: System.Drawing.Bitmap
  isExternal: false
  name: GetHicon
  nameWithType: Bitmap.GetHicon
- uid: System.Drawing.Bitmap.GetPixel*
  parent: System.Drawing.Bitmap
  isExternal: false
  name: GetPixel
  nameWithType: Bitmap.GetPixel
- uid: System.Drawing.Bitmap.LockBits*
  parent: System.Drawing.Bitmap
  isExternal: false
  name: LockBits
  nameWithType: Bitmap.LockBits
- uid: System.Drawing.Bitmap.MakeTransparent*
  parent: System.Drawing.Bitmap
  isExternal: false
  name: MakeTransparent
  nameWithType: Bitmap.MakeTransparent
- uid: System.Drawing.Bitmap.SetPixel*
  parent: System.Drawing.Bitmap
  isExternal: false
  name: SetPixel
  nameWithType: Bitmap.SetPixel
- uid: System.Drawing.Bitmap.SetResolution*
  parent: System.Drawing.Bitmap
  isExternal: false
  name: SetResolution
  nameWithType: Bitmap.SetResolution
- uid: System.Drawing.Bitmap.UnlockBits*
  parent: System.Drawing.Bitmap
  isExternal: false
  name: UnlockBits
  nameWithType: Bitmap.UnlockBits
