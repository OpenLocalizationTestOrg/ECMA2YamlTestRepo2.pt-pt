### YamlMime:ManagedReference
items:
- uid: System.Net.WebSockets.ClientWebSocket
  id: ClientWebSocket
  children:
  - System.Net.WebSockets.ClientWebSocket.#ctor
  - System.Net.WebSockets.ClientWebSocket.Abort
  - System.Net.WebSockets.ClientWebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  - System.Net.WebSockets.ClientWebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  - System.Net.WebSockets.ClientWebSocket.CloseStatus
  - System.Net.WebSockets.ClientWebSocket.CloseStatusDescription
  - System.Net.WebSockets.ClientWebSocket.ConnectAsync(System.Uri,System.Threading.CancellationToken)
  - System.Net.WebSockets.ClientWebSocket.Dispose
  - System.Net.WebSockets.ClientWebSocket.Options
  - System.Net.WebSockets.ClientWebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)
  - System.Net.WebSockets.ClientWebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)
  - System.Net.WebSockets.ClientWebSocket.State
  - System.Net.WebSockets.ClientWebSocket.SubProtocol
  langs:
  - csharp
  name: ClientWebSocket
  nameWithType: ClientWebSocket
  fullName: System.Net.WebSockets.ClientWebSocket
  type: Class
  summary: "Provides a client for connecting to WebSocket services."
  remarks: "Some of the classes and class elements in the <xref:System.Net.WebSockets> namespace are supported on Windows 7, Windows Vista SP2, and Windows Server 2008. However, the only public implementations of client and server WebSockets are supported on Windows 8 and Windows Server 2012. The class elements in the <xref:System.Net.WebSockets> namespace that are supported on Windows 7, Windows Vista SP2, and Windows Server 2008 are abstract class elements. This allows an application developer to inherit and extend these abstract class classes and class elements with an actual implementation of client WebSockets."
  syntax:
    content: 'public sealed class ClientWebSocket : System.Net.WebSockets.WebSocket'
  inheritance:
  - System.Object
  - System.Net.WebSockets.WebSocket
  implements: []
  inheritedMembers:
  - System.Net.WebSockets.WebSocket.CreateClientBuffer(System.Int32,System.Int32)
  - System.Net.WebSockets.WebSocket.CreateClientWebSocket(System.IO.Stream,System.String,System.Int32,System.Int32,System.TimeSpan,System.Boolean,System.ArraySegment{System.Byte})
  - System.Net.WebSockets.WebSocket.CreateServerBuffer(System.Int32)
  - System.Net.WebSockets.WebSocket.DefaultKeepAliveInterval
  - System.Net.WebSockets.WebSocket.IsApplicationTargeting45
  - System.Net.WebSockets.WebSocket.IsStateTerminal(System.Net.WebSockets.WebSocketState)
  - System.Net.WebSockets.WebSocket.RegisterPrefixes
  - System.Net.WebSockets.WebSocket.ThrowOnInvalidState(System.Net.WebSockets.WebSocketState,System.Net.WebSockets.WebSocketState[])
  platform:
  - net462
- uid: System.Net.WebSockets.ClientWebSocket.#ctor
  id: '#ctor'
  parent: System.Net.WebSockets.ClientWebSocket
  langs:
  - csharp
  name: ClientWebSocket()
  nameWithType: ClientWebSocket.ClientWebSocket()
  fullName: System.Net.WebSockets.ClientWebSocket.ClientWebSocket()
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "Creates an instance of the <xref href=&quot;System.Net.WebSockets.ClientWebSocket&quot;></xref> class."
  syntax:
    content: public ClientWebSocket ();
    parameters: []
  overload: System.Net.WebSockets.ClientWebSocket.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.ClientWebSocket.Abort
  id: Abort
  parent: System.Net.WebSockets.ClientWebSocket
  langs:
  - csharp
  name: Abort()
  nameWithType: ClientWebSocket.Abort()
  fullName: System.Net.WebSockets.ClientWebSocket.Abort()
  type: Method
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "Aborts the connection and cancels any pending IO operations."
  syntax:
    content: public override void Abort ();
    parameters: []
  overload: System.Net.WebSockets.ClientWebSocket.Abort*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.ClientWebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  id: CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  parent: System.Net.WebSockets.ClientWebSocket
  langs:
  - csharp
  name: CloseAsync(WebSocketCloseStatus,String,CancellationToken)
  nameWithType: ClientWebSocket.CloseAsync(WebSocketCloseStatus,String,CancellationToken)
  fullName: System.Net.WebSockets.ClientWebSocket.CloseAsync(WebSocketCloseStatus,String,CancellationToken)
  type: Method
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "Close the <xref href=&quot;System.Net.WebSockets.ClientWebSocket&quot;></xref> instance as an asynchronous operation."
  remarks: "This operation will not block. The returned <xref:System.Threading.Tasks.Task> object will complete after the <xref:System.Net.WebSockets.ClientWebSocket> instance is closed."
  syntax:
    content: public override System.Threading.Tasks.Task CloseAsync (System.Net.WebSockets.WebSocketCloseStatus closeStatus, string statusDescription, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: closeStatus
      type: System.Net.WebSockets.WebSocketCloseStatus
      description: "The WebSocket close status."
    - id: statusDescription
      type: System.String
      description: "A description of the close status."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "A cancellation token used to propagate notification that this  operation should be canceled."
    return:
      type: System.Threading.Tasks.Task
      description: "Returns <xref:System.Threading.Tasks.Task>.       The task object representing the asynchronous operation."
  overload: System.Net.WebSockets.ClientWebSocket.CloseAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.ClientWebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  id: CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  parent: System.Net.WebSockets.ClientWebSocket
  langs:
  - csharp
  name: CloseOutputAsync(WebSocketCloseStatus,String,CancellationToken)
  nameWithType: ClientWebSocket.CloseOutputAsync(WebSocketCloseStatus,String,CancellationToken)
  fullName: System.Net.WebSockets.ClientWebSocket.CloseOutputAsync(WebSocketCloseStatus,String,CancellationToken)
  type: Method
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "Close the output for the <xref href=&quot;System.Net.WebSockets.ClientWebSocket&quot;></xref> instance as an asynchronous operation."
  remarks: "This operation will not block. The returned <xref:System.Threading.Tasks.Task> object will complete after the output on the <xref:System.Net.WebSockets.ClientWebSocket> instance is closed."
  syntax:
    content: public override System.Threading.Tasks.Task CloseOutputAsync (System.Net.WebSockets.WebSocketCloseStatus closeStatus, string statusDescription, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: closeStatus
      type: System.Net.WebSockets.WebSocketCloseStatus
      description: "The WebSocket close status."
    - id: statusDescription
      type: System.String
      description: "A description of the close status."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "A cancellation token used to propagate notification that this  operation should be canceled."
    return:
      type: System.Threading.Tasks.Task
      description: "Returns <xref:System.Threading.Tasks.Task>.       The task object representing the asynchronous operation."
  overload: System.Net.WebSockets.ClientWebSocket.CloseOutputAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.ClientWebSocket.CloseStatus
  id: CloseStatus
  parent: System.Net.WebSockets.ClientWebSocket
  langs:
  - csharp
  name: CloseStatus
  nameWithType: ClientWebSocket.CloseStatus
  fullName: System.Net.WebSockets.ClientWebSocket.CloseStatus
  type: Property
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "Gets the reason why the close handshake was initiated on <xref href=&quot;System.Net.WebSockets.ClientWebSocket&quot;></xref> instance."
  syntax:
    content: public override Nullable<System.Net.WebSockets.WebSocketCloseStatus> CloseStatus { get; }
    return:
      type: System.Nullable{System.Net.WebSockets.WebSocketCloseStatus}
      description: "Returns <xref href=&quot;System.Net.WebSockets.WebSocketCloseStatus&quot;></xref>.       The reason why the close handshake was initiated."
  overload: System.Net.WebSockets.ClientWebSocket.CloseStatus*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.ClientWebSocket.CloseStatusDescription
  id: CloseStatusDescription
  parent: System.Net.WebSockets.ClientWebSocket
  langs:
  - csharp
  name: CloseStatusDescription
  nameWithType: ClientWebSocket.CloseStatusDescription
  fullName: System.Net.WebSockets.ClientWebSocket.CloseStatusDescription
  type: Property
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "Gets a description of the reason why the <xref href=&quot;System.Net.WebSockets.ClientWebSocket&quot;></xref> instance was closed."
  syntax:
    content: public override string CloseStatusDescription { get; }
    return:
      type: System.String
      description: "Returns <xref:System.String>.       The description of the reason why the <xref href=&quot;System.Net.WebSockets.ClientWebSocket&quot;></xref> instance was closed."
  overload: System.Net.WebSockets.ClientWebSocket.CloseStatusDescription*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.ClientWebSocket.ConnectAsync(System.Uri,System.Threading.CancellationToken)
  id: ConnectAsync(System.Uri,System.Threading.CancellationToken)
  parent: System.Net.WebSockets.ClientWebSocket
  langs:
  - csharp
  name: ConnectAsync(Uri,CancellationToken)
  nameWithType: ClientWebSocket.ConnectAsync(Uri,CancellationToken)
  fullName: System.Net.WebSockets.ClientWebSocket.ConnectAsync(Uri,CancellationToken)
  type: Method
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "Connect to a WebSocket server as an asynchronous operation."
  remarks: "The ConnectAsync method initiates the WebSocket handshake with a remote network destination, and then negotiates the sub-protocol.       For plain WebSocket connections, use the `ws://` scheme in the uri. For secure WebSocket connections over TLS/SSL, use the `wss://` scheme.       This operation will not block. The returned <xref:System.Threading.Tasks.Task> object will complete after the connect request on the <xref:System.Net.WebSockets.ClientWebSocket> instance has completed."
  syntax:
    content: public System.Threading.Tasks.Task ConnectAsync (Uri uri, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: uri
      type: System.Uri
      description: "The URI of the WebSocket server to connect to."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "A cancellation token used to propagate notification that the  operation should be canceled."
    return:
      type: System.Threading.Tasks.Task
      description: "Returns <xref:System.Threading.Tasks.Task>.       The task object representing the asynchronous operation."
  overload: System.Net.WebSockets.ClientWebSocket.ConnectAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.ClientWebSocket.Dispose
  id: Dispose
  parent: System.Net.WebSockets.ClientWebSocket
  langs:
  - csharp
  name: Dispose()
  nameWithType: ClientWebSocket.Dispose()
  fullName: System.Net.WebSockets.ClientWebSocket.Dispose()
  type: Method
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "Releases the unmanaged resources used by the <xref href=&quot;System.Net.WebSockets.ClientWebSocket&quot;></xref> instance."
  syntax:
    content: public override void Dispose ();
    parameters: []
  overload: System.Net.WebSockets.ClientWebSocket.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.ClientWebSocket.Options
  id: Options
  parent: System.Net.WebSockets.ClientWebSocket
  langs:
  - csharp
  name: Options
  nameWithType: ClientWebSocket.Options
  fullName: System.Net.WebSockets.ClientWebSocket.Options
  type: Property
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "Gets the WebSocket options for the <xref href=&quot;System.Net.WebSockets.ClientWebSocket&quot;></xref> instance."
  syntax:
    content: public System.Net.WebSockets.ClientWebSocketOptions Options { get; }
    return:
      type: System.Net.WebSockets.ClientWebSocketOptions
      description: "Returns <xref href=&quot;System.Net.WebSockets.ClientWebSocketOptions&quot;></xref>.       The WebSocket options for the <xref href=&quot;System.Net.WebSockets.ClientWebSocket&quot;></xref> instance."
  overload: System.Net.WebSockets.ClientWebSocket.Options*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.ClientWebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)
  id: ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)
  parent: System.Net.WebSockets.ClientWebSocket
  langs:
  - csharp
  name: ReceiveAsync(ArraySegment<Byte>,CancellationToken)
  nameWithType: ClientWebSocket.ReceiveAsync(ArraySegment<Byte>,CancellationToken)
  fullName: System.Net.WebSockets.ClientWebSocket.ReceiveAsync(ArraySegment<Byte>,CancellationToken)
  type: Method
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "Receive data on <xref href=&quot;System.Net.WebSockets.ClientWebSocket&quot;></xref> as an asynchronous operation."
  remarks: "This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the receive request on the <xref:System.Net.WebSockets.ClientWebSocket> instance has completed.       Exactly one send and one receive is supported on each <xref:System.Net.WebSockets.ClientWebSocket> object in parallel."
  syntax:
    content: public override System.Threading.Tasks.Task<System.Net.WebSockets.WebSocketReceiveResult> ReceiveAsync (ArraySegment<byte> buffer, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: buffer
      type: System.ArraySegment{System.Byte}
      description: "The buffer to receive the response."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "A cancellation token used to propagate notification that this  operation should be canceled."
    return:
      type: System.Threading.Tasks.Task{System.Net.WebSockets.WebSocketReceiveResult}
      description: "Returns &lt;xref:System.Threading.Tasks.Task%601&gt;.       The task object representing the asynchronous operation."
  overload: System.Net.WebSockets.ClientWebSocket.ReceiveAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.ClientWebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)
  id: SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)
  parent: System.Net.WebSockets.ClientWebSocket
  langs:
  - csharp
  name: SendAsync(ArraySegment<Byte>,WebSocketMessageType,Boolean,CancellationToken)
  nameWithType: ClientWebSocket.SendAsync(ArraySegment<Byte>,WebSocketMessageType,Boolean,CancellationToken)
  fullName: System.Net.WebSockets.ClientWebSocket.SendAsync(ArraySegment<Byte>,WebSocketMessageType,Boolean,CancellationToken)
  type: Method
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "Send data on <xref href=&quot;System.Net.WebSockets.ClientWebSocket&quot;></xref> as an asynchronous operation."
  remarks: "This operation will not block. The returned <xref:System.Threading.Tasks.Task> object will complete after the send request on the <xref:System.Net.WebSockets.ClientWebSocket> instance has completed.       Exactly one send and one receive is supported on each <xref:System.Net.WebSockets.ClientWebSocket> object in parallel."
  syntax:
    content: public override System.Threading.Tasks.Task SendAsync (ArraySegment<byte> buffer, System.Net.WebSockets.WebSocketMessageType messageType, bool endOfMessage, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: buffer
      type: System.ArraySegment{System.Byte}
      description: "The buffer containing the message to be sent."
    - id: messageType
      type: System.Net.WebSockets.WebSocketMessageType
      description: "Specifies whether the buffer is clear text or in a binary format."
    - id: endOfMessage
      type: System.Boolean
      description: "Specifies whether this is the final asynchronous send. Set to <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if this is the final send; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> otherwise."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "A cancellation token used to propagate notification that this  operation should be canceled."
    return:
      type: System.Threading.Tasks.Task
      description: "The task object representing the asynchronous operation."
  overload: System.Net.WebSockets.ClientWebSocket.SendAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.ClientWebSocket.State
  id: State
  parent: System.Net.WebSockets.ClientWebSocket
  langs:
  - csharp
  name: State
  nameWithType: ClientWebSocket.State
  fullName: System.Net.WebSockets.ClientWebSocket.State
  type: Property
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "Get the WebSocket state of the <xref href=&quot;System.Net.WebSockets.ClientWebSocket&quot;></xref> instance."
  syntax:
    content: public override System.Net.WebSockets.WebSocketState State { get; }
    return:
      type: System.Net.WebSockets.WebSocketState
      description: "Returns <xref href=&quot;System.Net.WebSockets.WebSocketState&quot;></xref>.       The WebSocket state of the <xref href=&quot;System.Net.WebSockets.ClientWebSocket&quot;></xref> instance."
  overload: System.Net.WebSockets.ClientWebSocket.State*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.ClientWebSocket.SubProtocol
  id: SubProtocol
  parent: System.Net.WebSockets.ClientWebSocket
  langs:
  - csharp
  name: SubProtocol
  nameWithType: ClientWebSocket.SubProtocol
  fullName: System.Net.WebSockets.ClientWebSocket.SubProtocol
  type: Property
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "Gets the supported WebSocket sub-protocol for the <xref href=&quot;System.Net.WebSockets.ClientWebSocket&quot;></xref> instance."
  syntax:
    content: public override string SubProtocol { get; }
    return:
      type: System.String
      description: "Returns <xref:System.String>.       The supported WebSocket sub-protocol."
  overload: System.Net.WebSockets.ClientWebSocket.SubProtocol*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Net.WebSockets.WebSocket
  isExternal: false
  name: System.Net.WebSockets.WebSocket
- uid: System.Net.WebSockets.ClientWebSocket.#ctor
  parent: System.Net.WebSockets.ClientWebSocket
  isExternal: false
  name: ClientWebSocket()
  nameWithType: ClientWebSocket.ClientWebSocket()
  fullName: System.Net.WebSockets.ClientWebSocket.ClientWebSocket()
- uid: System.Net.WebSockets.ClientWebSocket.Abort
  parent: System.Net.WebSockets.ClientWebSocket
  isExternal: false
  name: Abort()
  nameWithType: ClientWebSocket.Abort()
  fullName: System.Net.WebSockets.ClientWebSocket.Abort()
- uid: System.Net.WebSockets.ClientWebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  parent: System.Net.WebSockets.ClientWebSocket
  isExternal: false
  name: CloseAsync(WebSocketCloseStatus,String,CancellationToken)
  nameWithType: ClientWebSocket.CloseAsync(WebSocketCloseStatus,String,CancellationToken)
  fullName: System.Net.WebSockets.ClientWebSocket.CloseAsync(WebSocketCloseStatus,String,CancellationToken)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Net.WebSockets.WebSocketCloseStatus
  parent: System.Net.WebSockets
  isExternal: false
  name: WebSocketCloseStatus
  nameWithType: WebSocketCloseStatus
  fullName: System.Net.WebSockets.WebSocketCloseStatus
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Net.WebSockets.ClientWebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  parent: System.Net.WebSockets.ClientWebSocket
  isExternal: false
  name: CloseOutputAsync(WebSocketCloseStatus,String,CancellationToken)
  nameWithType: ClientWebSocket.CloseOutputAsync(WebSocketCloseStatus,String,CancellationToken)
  fullName: System.Net.WebSockets.ClientWebSocket.CloseOutputAsync(WebSocketCloseStatus,String,CancellationToken)
- uid: System.Net.WebSockets.ClientWebSocket.CloseStatus
  parent: System.Net.WebSockets.ClientWebSocket
  isExternal: false
  name: CloseStatus
  nameWithType: ClientWebSocket.CloseStatus
  fullName: System.Net.WebSockets.ClientWebSocket.CloseStatus
- uid: System.Nullable{System.Net.WebSockets.WebSocketCloseStatus}
  parent: System
  isExternal: true
  name: Nullable<WebSocketCloseStatus>
  nameWithType: Nullable<WebSocketCloseStatus>
  fullName: System.Nullable<System.Net.WebSockets.WebSocketCloseStatus>
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: Nullable<System.Net.WebSockets.WebSocketCloseStatus>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.WebSockets.WebSocketCloseStatus
    name: WebSocketCloseStatus
    nameWithType: WebSocketCloseStatus
    fullName: WebSocketCloseStatus
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.WebSockets.ClientWebSocket.CloseStatusDescription
  parent: System.Net.WebSockets.ClientWebSocket
  isExternal: false
  name: CloseStatusDescription
  nameWithType: ClientWebSocket.CloseStatusDescription
  fullName: System.Net.WebSockets.ClientWebSocket.CloseStatusDescription
- uid: System.Net.WebSockets.ClientWebSocket.ConnectAsync(System.Uri,System.Threading.CancellationToken)
  parent: System.Net.WebSockets.ClientWebSocket
  isExternal: false
  name: ConnectAsync(Uri,CancellationToken)
  nameWithType: ClientWebSocket.ConnectAsync(Uri,CancellationToken)
  fullName: System.Net.WebSockets.ClientWebSocket.ConnectAsync(Uri,CancellationToken)
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Net.WebSockets.ClientWebSocket.Dispose
  parent: System.Net.WebSockets.ClientWebSocket
  isExternal: false
  name: Dispose()
  nameWithType: ClientWebSocket.Dispose()
  fullName: System.Net.WebSockets.ClientWebSocket.Dispose()
- uid: System.Net.WebSockets.ClientWebSocket.Options
  parent: System.Net.WebSockets.ClientWebSocket
  isExternal: false
  name: Options
  nameWithType: ClientWebSocket.Options
  fullName: System.Net.WebSockets.ClientWebSocket.Options
- uid: System.Net.WebSockets.ClientWebSocketOptions
  parent: System.Net.WebSockets
  isExternal: false
  name: ClientWebSocketOptions
  nameWithType: ClientWebSocketOptions
  fullName: System.Net.WebSockets.ClientWebSocketOptions
- uid: System.Net.WebSockets.ClientWebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)
  parent: System.Net.WebSockets.ClientWebSocket
  isExternal: false
  name: ReceiveAsync(ArraySegment<Byte>,CancellationToken)
  nameWithType: ClientWebSocket.ReceiveAsync(ArraySegment<Byte>,CancellationToken)
  fullName: System.Net.WebSockets.ClientWebSocket.ReceiveAsync(ArraySegment<Byte>,CancellationToken)
- uid: System.Threading.Tasks.Task{System.Net.WebSockets.WebSocketReceiveResult}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<WebSocketReceiveResult>
  nameWithType: Task<WebSocketReceiveResult>
  fullName: System.Threading.Tasks.Task<System.Net.WebSockets.WebSocketReceiveResult>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Net.WebSockets.WebSocketReceiveResult>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.WebSockets.WebSocketReceiveResult
    name: WebSocketReceiveResult
    nameWithType: WebSocketReceiveResult
    fullName: WebSocketReceiveResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ArraySegment{System.Byte}
  parent: System
  isExternal: true
  name: ArraySegment<Byte>
  nameWithType: ArraySegment<Byte>
  fullName: System.ArraySegment<System.Byte>
  spec.csharp:
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment<System.Byte>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.WebSockets.ClientWebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)
  parent: System.Net.WebSockets.ClientWebSocket
  isExternal: false
  name: SendAsync(ArraySegment<Byte>,WebSocketMessageType,Boolean,CancellationToken)
  nameWithType: ClientWebSocket.SendAsync(ArraySegment<Byte>,WebSocketMessageType,Boolean,CancellationToken)
  fullName: System.Net.WebSockets.ClientWebSocket.SendAsync(ArraySegment<Byte>,WebSocketMessageType,Boolean,CancellationToken)
- uid: System.Net.WebSockets.WebSocketMessageType
  parent: System.Net.WebSockets
  isExternal: false
  name: WebSocketMessageType
  nameWithType: WebSocketMessageType
  fullName: System.Net.WebSockets.WebSocketMessageType
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.WebSockets.ClientWebSocket.State
  parent: System.Net.WebSockets.ClientWebSocket
  isExternal: false
  name: State
  nameWithType: ClientWebSocket.State
  fullName: System.Net.WebSockets.ClientWebSocket.State
- uid: System.Net.WebSockets.WebSocketState
  parent: System.Net.WebSockets
  isExternal: false
  name: WebSocketState
  nameWithType: WebSocketState
  fullName: System.Net.WebSockets.WebSocketState
- uid: System.Net.WebSockets.ClientWebSocket.SubProtocol
  parent: System.Net.WebSockets.ClientWebSocket
  isExternal: false
  name: SubProtocol
  nameWithType: ClientWebSocket.SubProtocol
  fullName: System.Net.WebSockets.ClientWebSocket.SubProtocol
- uid: System.Net.WebSockets.ClientWebSocket.#ctor*
  parent: System.Net.WebSockets.ClientWebSocket
  isExternal: false
  name: ClientWebSocket
  nameWithType: ClientWebSocket.ClientWebSocket
- uid: System.Net.WebSockets.ClientWebSocket.Abort*
  parent: System.Net.WebSockets.ClientWebSocket
  isExternal: false
  name: Abort
  nameWithType: ClientWebSocket.Abort
- uid: System.Net.WebSockets.ClientWebSocket.CloseAsync*
  parent: System.Net.WebSockets.ClientWebSocket
  isExternal: false
  name: CloseAsync
  nameWithType: ClientWebSocket.CloseAsync
- uid: System.Net.WebSockets.ClientWebSocket.CloseOutputAsync*
  parent: System.Net.WebSockets.ClientWebSocket
  isExternal: false
  name: CloseOutputAsync
  nameWithType: ClientWebSocket.CloseOutputAsync
- uid: System.Net.WebSockets.ClientWebSocket.CloseStatus*
  parent: System.Net.WebSockets.ClientWebSocket
  isExternal: false
  name: CloseStatus
  nameWithType: ClientWebSocket.CloseStatus
- uid: System.Net.WebSockets.ClientWebSocket.CloseStatusDescription*
  parent: System.Net.WebSockets.ClientWebSocket
  isExternal: false
  name: CloseStatusDescription
  nameWithType: ClientWebSocket.CloseStatusDescription
- uid: System.Net.WebSockets.ClientWebSocket.ConnectAsync*
  parent: System.Net.WebSockets.ClientWebSocket
  isExternal: false
  name: ConnectAsync
  nameWithType: ClientWebSocket.ConnectAsync
- uid: System.Net.WebSockets.ClientWebSocket.Dispose*
  parent: System.Net.WebSockets.ClientWebSocket
  isExternal: false
  name: Dispose
  nameWithType: ClientWebSocket.Dispose
- uid: System.Net.WebSockets.ClientWebSocket.Options*
  parent: System.Net.WebSockets.ClientWebSocket
  isExternal: false
  name: Options
  nameWithType: ClientWebSocket.Options
- uid: System.Net.WebSockets.ClientWebSocket.ReceiveAsync*
  parent: System.Net.WebSockets.ClientWebSocket
  isExternal: false
  name: ReceiveAsync
  nameWithType: ClientWebSocket.ReceiveAsync
- uid: System.Net.WebSockets.ClientWebSocket.SendAsync*
  parent: System.Net.WebSockets.ClientWebSocket
  isExternal: false
  name: SendAsync
  nameWithType: ClientWebSocket.SendAsync
- uid: System.Net.WebSockets.ClientWebSocket.State*
  parent: System.Net.WebSockets.ClientWebSocket
  isExternal: false
  name: State
  nameWithType: ClientWebSocket.State
- uid: System.Net.WebSockets.ClientWebSocket.SubProtocol*
  parent: System.Net.WebSockets.ClientWebSocket
  isExternal: false
  name: SubProtocol
  nameWithType: ClientWebSocket.SubProtocol
