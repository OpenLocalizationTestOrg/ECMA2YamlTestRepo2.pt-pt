### YamlMime:ManagedReference
items:
- uid: System.Speech.Recognition.SrgsGrammar.SrgsRule
  id: SrgsRule
  children:
  - System.Speech.Recognition.SrgsGrammar.SrgsRule.#ctor(System.String)
  - System.Speech.Recognition.SrgsGrammar.SrgsRule.#ctor(System.String,System.Speech.Recognition.SrgsGrammar.SrgsElement[])
  - System.Speech.Recognition.SrgsGrammar.SrgsRule.Add(System.Speech.Recognition.SrgsGrammar.SrgsElement)
  - System.Speech.Recognition.SrgsGrammar.SrgsRule.BaseClass
  - System.Speech.Recognition.SrgsGrammar.SrgsRule.Elements
  - System.Speech.Recognition.SrgsGrammar.SrgsRule.Id
  - System.Speech.Recognition.SrgsGrammar.SrgsRule.OnError
  - System.Speech.Recognition.SrgsGrammar.SrgsRule.OnInit
  - System.Speech.Recognition.SrgsGrammar.SrgsRule.OnParse
  - System.Speech.Recognition.SrgsGrammar.SrgsRule.OnRecognition
  - System.Speech.Recognition.SrgsGrammar.SrgsRule.Scope
  - System.Speech.Recognition.SrgsGrammar.SrgsRule.Script
  langs:
  - csharp
  name: SrgsRule
  nameWithType: SrgsRule
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsRule
  type: Class
  summary: "Represents a grammar rule."
  remarks: "Use the SrgsRule class to create a new rule at run time or to modify a rule in an existing grammar stream or file at run time.       The words and phrases specified by SrgsRule objects in grammars defined by <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> instances limit the spoken input that the recognizer must be able to identify.       An SrgsRule object specifies the sequence in which words and phrases must be spoken by ordering the objects that contain them. Words and phrases within a rule are represented by objects such as <xref:System.Speech.Recognition.SrgsGrammar.SrgsItem>, <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf>, <xref:System.Speech.Recognition.SrgsGrammar.SrgsRuleRef>, and <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken> elements. Use the <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule.Elements%2A> property to access the collection of child objects that an SrgsRule object contains.       You can determine whether an SrgsRule can be specified in a rule reference from a rule in an external grammar by setting its <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule.Scope%2A> property.       It is not legal to define an SrgsRule that is empty or that contains only white space.       This class represents the `rule` element that is defined in the World Wide Web Consortium (W3C) [Speech Recognition Grammar Specification (SRGS) Version 1.0](http://go.microsoft.com/fwlink/?LinkId=201761). For information about the SRGS `rule` element and details about its support by System.Speech, see [rule Element](http://msdn.microsoft.com/en-us/da67b4aa-0545-426a-a02f-1417b968021e)."
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("Rule={_id.ToString()} Scope={_scope.ToString()}")]

      [System.Diagnostics.DebuggerTypeProxy(typeof(System.Speech.Recognition.SrgsGrammar.SrgsRule/SrgsRuleDebugDisplay))]

      public class SrgsRule
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Speech.Recognition.SrgsGrammar.SrgsRule.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Speech.Recognition.SrgsGrammar.SrgsRule
  langs:
  - csharp
  name: SrgsRule(String)
  nameWithType: SrgsRule.SrgsRule(String)
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsRule.SrgsRule(String)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition.SrgsGrammar
  summary: "Initializes a new instance of the <xref href=&quot;System.Speech.Recognition.SrgsGrammar.SrgsRule&quot;></xref> class and specifies the identifier for the rule."
  remarks: "The SrgsRule constructor initializes the <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule.Id%2A> property. The identifier must be unique within a given grammar.  \n  \n The SrgsRule constructor throws a <xref:System.FormatException> in the following circumstances:  \n  \n-   `id` is not a valid XML name, as defined in [Extensible Markup Language (XML) 1.0 (Fifth Edition)](http://www.w3.org/TR/REC-xml/). To paraphrase this definition, a valid XML name must begin with a letter, an underscore ('_'), or a colon (':') and can be followed by zero or more NameChar characters (also defined in the XML specification).  \n  \n-   `id` is \"NULL\" or \"VOID\" or \"GARBAGE\".  \n  \n-   `id` contains at least one invalid rule ID character. These characters are: '?', '*', '+', '&#124;', '(', '), '^', '$', '/', ';', '.', '=', '\\<', '>', '[', ']', '{', '}', '\\\\\\\\', ' ', '\\t', '\\r', and '\\n'."
  example:
  - "The following example creates a grammar that recognizes the phrase \"A nation that has won the World Cup is\" followed by the name of a country that has won the World Cup. The example creates a <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule> object named `winnerRule` and passes in the identifier  `WorldCupWinner` as a <xref:System.String>. The <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf> object consists of an array of new <xref:System.Speech.Recognition.SrgsGrammar.SrgsItem> objects containing alternatives to be recognized by the rule.  \n  \n```c#  \npublic void WorldSoccerWinners ()  \n{  \n  \n  // Create an SrgsDocument, create a new rule  \n  // and set its scope to public.  \n  SrgsDocument document = new SrgsDocument();  \n  SrgsRule winnerRule = new SrgsRule(\"WorldCupWinner\");  \n  winnerRule.Scope = SrgsRuleScope.Public;  \n  \n  // Add the introduction.  \n  winnerRule.Elements.Add(new SrgsItem(\"A nation that has won the world cup is: \"));  \n  \n  // Create the rule for the European nations.  \n  SrgsOneOf oneOfEurope = new SrgsOneOf(new SrgsItem[] {new SrgsItem(\"England\"),   \n    new SrgsItem(\"France\"), new SrgsItem(\"Germany\"), new SrgsItem(\"Italy\")});  \n  SrgsRule ruleEurope = (new SrgsRule(\"EuropeanNations\", new SrgsElement[] {oneOfEurope}));  \n  \n  // Create the rule for the South American nations.  \n  SrgsOneOf oneOfSAmerica = new SrgsOneOf(new SrgsItem[] {new SrgsItem(\"Argentina\"),   \n    new SrgsItem(\"Brazil\"), new SrgsItem(\"Uruguay\")});  \n  SrgsRule ruleSAmerica = (new SrgsRule(\"SouthAmericanNations\", new SrgsElement[] {oneOfSAmerica}));  \n  \n  // Add references to winnerRule for ruleEurope and ruleSAmerica.  \n  winnerRule.Elements.Add(new SrgsOneOf(new SrgsItem[] {(new SrgsItem   \n    (new SrgsRuleRef(ruleEurope))), new SrgsItem(new SrgsRuleRef(ruleSAmerica))}));  \n  \n  // Add all the rules to the document and make winnerRule   \n  // the root rule of the document.  \n  document.Rules.Add(new SrgsRule[] {winnerRule, ruleEurope, ruleSAmerica});  \n  document.Root = winnerRule;  \n}  \n```"
  syntax:
    content: public SrgsRule (string id);
    parameters:
    - id: id
      type: System.String
      description: "The identifier of the rule."
  overload: System.Speech.Recognition.SrgsGrammar.SrgsRule.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>id</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>id</code> is empty."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "<code>id</code> is not a proper rule identifier."
  platform:
  - net462
- uid: System.Speech.Recognition.SrgsGrammar.SrgsRule.#ctor(System.String,System.Speech.Recognition.SrgsGrammar.SrgsElement[])
  id: '#ctor(System.String,System.Speech.Recognition.SrgsGrammar.SrgsElement[])'
  parent: System.Speech.Recognition.SrgsGrammar.SrgsRule
  langs:
  - csharp
  name: SrgsRule(String,SrgsElement[])
  nameWithType: SrgsRule.SrgsRule(String,SrgsElement[])
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsRule.SrgsRule(String,SrgsElement[])
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition.SrgsGrammar
  summary: "Initializes a new instance of the <xref href=&quot;System.Speech.Recognition.SrgsGrammar.SrgsRule&quot;></xref> class from an array of <xref href=&quot;System.Speech.Recognition.SrgsGrammar.SrgsElement&quot;></xref> objects."
  remarks: "The SrgsRule constructor initializes the <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule.Id%2A> property. The identifier must be unique within a given grammar.  \n  \n The SrgsRule constructor throws a <xref:System.FormatException> in the following circumstances:  \n  \n-   `id` is not a valid XML name, as defined in [Extensible Markup Language (XML) 1.0 (Fifth Edition)](http://www.w3.org/TR/REC-xml/). To paraphrase this definition, a valid XML name must begin with a letter, an underscore ('_'), or a colon (':') and can be followed by zero or more NameChar characters (also defined in the XML specification).  \n  \n-   `id` is \"NULL\" or \"VOID\" or \"GARBAGE\".  \n  \n-   `id` contains at least one invalid rule ID character. These characters are: '?', '*', '+', '&#124;', '(', '), '^', '$', '/', ';', '.', '=', '\\<', '>', '[', ']', '{', '}', '\\\\\\\\', ' ', '\\t', '\\r', and '\\n'."
  example:
  - "The following example creates a grammar that recognizes the phrase \"A nation that has won the World Cup is\" followed by the name of a country that has won the World Cup. The example creates a public rule named `WorldCupWinner`. The example then creates two <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule> objects, `ruleEurope` and  `ruleSAmerica`, passing in a <xref:System.String> for the rule identifier and an <xref:System.Speech.Recognition.SrgsGrammar.SrgsElement> array containing a <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf> object. Subsequently, the example adds rule references to `ruleEurope` and `ruleSAmerica` from the rule `WorldCupWinner`.  \n  \n```c#  \npublic void WorldSoccerWinners ()  \n{  \n  // Create a grammar from an SRGSDocument, create a new rule  \n  // and set its scope to public.  \n  SrgsDocument srgsGrammar = new SrgsDocument ();  \n  SrgsRule winnerRule = new SrgsRule (\"WorldCupWinner\");  \n  winnerRule.Scope = SrgsRuleScope.Public;  \n  \n  // Add the introduction.  \n  winnerRule.Elements.Add (new SrgsItem (\"A nation that has won the world cup is\"));  \n  \n  // Create the rule for the European nations.  \n  SrgsOneOf oneOfEurope = new SrgsOneOf(new SrgsItem[] {new SrgsItem(\"England\"), new SrgsItem(\"France\"), new SrgsItem(\"Germany\"), new SrgsItem(\"Italy\")});  \n  SrgsRule ruleEurope = (new SrgsRule(\"EuropeanNations\", new SrgsElement[] {oneOfEurope}));  \n  \n  // Create the rule for the South American nations.  \n  SrgsOneOf oneOfSAmerica = new SrgsOneOf(new SrgsItem[] {new SrgsItem(\"Argentina\"), new SrgsItem(\"Brazil\"), new SrgsItem(\"Uruguay\")});  \n  SrgsRule ruleSAmerica = (new SrgsRule(\"SouthAmericanNations\", new SrgsElement[] {oneOfSAmerica}));  \n  \n  // Add references to winnerRule for ruleEurope and ruleSAmerica.  \n  winnerRule.Elements.Add(new SrgsOneOf(new SrgsItem[] {(new SrgsItem (new SrgsRuleRef(ruleEurope))), new SrgsItem(new SrgsRuleRef(ruleSAmerica))}));  \n  \n  // Add all the rules to the grammar and make winnerRule  \n  // the root rule of the grammar.  \n  document.Rules.Add(new SrgsRule[] {winnerRule, ruleEurope, ruleSAmerica});  \n  srgsGrammar.Root = winnerRule;  \n}  \n```  \n  \n The created grammar has the following form.  \n  \n```xml  \n<grammar version=\"1.0\" xml:lang=\"en-US\" xmlns=\"http://www.w3.org/2001/06/grammar\" root=\"WorldCupWinner\">  \n    <rule id=\"WorldCupWinner\" scope=\"public\">  \n        <item> A nation that has won the world cup is </item>  \n        <one-of>  \n            <item>  \n                <ruleref uri=\"#EuropeanNations\" />  \n            </item>  \n            <item>  \n                <ruleref uri=\"#SouthAmericanNations\" />  \n            </item>  \n        </one-of>  \n    </rule>  \n    <rule id=\"EuropeanNations\">  \n        <one-of>  \n            <item> England </item>  \n            <item> France </item>  \n            <item> Germany </item>  \n            <item> Italy </item>  \n        </one-of>  \n    </rule>  \n    <rule id=\"SouthAmericanNations\">  \n        <one-of>  \n            <item> Argentina </item>  \n            <item> Brazil </item>  \n            <item> Uruguay </item>  \n        </one-of>  \n    </rule>  \n</grammar>  \n```"
  syntax:
    content: public SrgsRule (string id, System.Speech.Recognition.SrgsGrammar.SrgsElement[] elements);
    parameters:
    - id: id
      type: System.String
      description: "The identifier of the rule."
    - id: elements
      type: System.Speech.Recognition.SrgsGrammar.SrgsElement[]
      description: "An array of <xref href=&quot;System.Speech.Recognition.SrgsGrammar.SrgsElement&quot;></xref> elements."
  overload: System.Speech.Recognition.SrgsGrammar.SrgsRule.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>id</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       <code>elements</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>id</code> is empty."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "<code>id</code> is not a proper rule identifier."
  platform:
  - net462
- uid: System.Speech.Recognition.SrgsGrammar.SrgsRule.Add(System.Speech.Recognition.SrgsGrammar.SrgsElement)
  id: Add(System.Speech.Recognition.SrgsGrammar.SrgsElement)
  parent: System.Speech.Recognition.SrgsGrammar.SrgsRule
  langs:
  - csharp
  name: Add(SrgsElement)
  nameWithType: SrgsRule.Add(SrgsElement)
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsRule.Add(SrgsElement)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition.SrgsGrammar
  summary: "Adds an <xref href=&quot;System.Speech.Recognition.SrgsGrammar.SrgsElement&quot;></xref> to an <xref href=&quot;System.Speech.Recognition.SrgsGrammar.SrgsRule&quot;></xref> object."
  remarks: "Typical additions to an <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule> object include <xref:System.Speech.Recognition.SrgsGrammar.SrgsItem>, <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf>, <xref:System.Speech.Recognition.SrgsGrammar.SrgsRuleRef>, and <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken> objects that specify what speakers can say. A valid rule element must contain at least one piece of recognizable text or one rule reference. See [Create Grammars Using SrgsGrammar](http://msdn.microsoft.com/en-us/e4d9f96e-2241-4c39-b9e0-ac9ef4e9a906) for more information.       An <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule> object may also contain <xref:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag> and <xref:System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag> objects that add semantic values and semantic keys to the rule. The speech recognition engine will return the semantic information, as well as the recognized phrase, when it recognizes the phrase. See [Semantic Interpretation Markup](http://msdn.microsoft.com/en-us/2e115391-73b3-4666-8fd1-540c529de3b0) for more information."
  example:
  - "The following example creates a grammar that recognizes the phrase \"A nation that has won the World Cup is\" followed by the name of a country that has won the World Cup. After creating the <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule> object `winnerRule` and giving it the string identifier `WorldCupWinner`, the example uses the Add method to append the string  \"A nation that has won the World Cup is\" to the rule. The example then creates two additional rules, `ruleEurope` and  `ruleSAmerica`. Again using the Add method, the example appends an <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf> object to the `WorldCupWinner` rule that contains rule references to `ruleEurope` and `ruleSAmerica`.  \n  \n```c#  \n// Create an SrgsDocument, create a new rule  \n// and set its scope to public.  \nSrgsDocument document = new SrgsDocument();  \nSrgsRule winnerRule = new SrgsRule(\"WorldCupWinner\");  \nwinnerRule.Scope = SrgsRuleScope.Public;  \n  \n// Add the introduction.  \nwinnerRule.Elements.Add(new SrgsItem(\"A nation that has won the world cup is: \"));  \n  \n// Create the rule for the European nations.  \nSrgsOneOf oneOfEurope = new SrgsOneOf(new SrgsItem[] {new SrgsItem(\"England\"), new SrgsItem(\"France\"), new SrgsItem(\"Germany\"), new SrgsItem(\"Italy\")});  \nSrgsRule ruleEurope = (new SrgsRule(\"EuropeanNations\", new SrgsElement[] {oneOfEurope}));  \n  \n// Create the rule for the South American nations.  \nSrgsOneOf oneOfSAmerica = new SrgsOneOf(new SrgsItem[] {new SrgsItem(\"Argentina\"), new SrgsItem(\"Brazil\"), new SrgsItem(\"Uruguay\")});  \nSrgsRule ruleSAmerica = (new SrgsRule(\"SouthAmericanNations\", new SrgsElement[] {oneOfSAmerica}));  \n  \n// Add references to winnerRule for ruleEurope and ruleSAmerica.  \nwinnerRule.Elements.Add(new SrgsOneOf(new SrgsItem[] {(new SrgsItem (new SrgsRuleRef(ruleEurope))), new SrgsItem(new SrgsRuleRef(ruleSAmerica))}));  \n  \n// Add all the rules to the document and make winnerRule   \n// the root rule of the document.  \ndocument.Rules.Add(new SrgsRule[] {winnerRule, ruleEurope, ruleSAmerica});  \ndocument.Root = winnerRule;  \n```"
  syntax:
    content: public void Add (System.Speech.Recognition.SrgsGrammar.SrgsElement element);
    parameters:
    - id: element
      type: System.Speech.Recognition.SrgsGrammar.SrgsElement
      description: "An object that inherits from <xref href=&quot;System.Speech.Recognition.SrgsGrammar.SrgsElement&quot;></xref> and specifies what can be recognized."
  overload: System.Speech.Recognition.SrgsGrammar.SrgsRule.Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>element</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Speech.Recognition.SrgsGrammar.SrgsRule.BaseClass
  id: BaseClass
  parent: System.Speech.Recognition.SrgsGrammar.SrgsRule
  langs:
  - csharp
  name: BaseClass
  nameWithType: SrgsRule.BaseClass
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsRule.BaseClass
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition.SrgsGrammar
  summary: "This property is not currently supported."
  syntax:
    content: public string BaseClass { get; set; }
    return:
      type: System.String
      description: "Not supported."
  overload: System.Speech.Recognition.SrgsGrammar.SrgsRule.BaseClass*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SrgsGrammar.SrgsRule.Elements
  id: Elements
  parent: System.Speech.Recognition.SrgsGrammar.SrgsRule
  langs:
  - csharp
  name: Elements
  nameWithType: SrgsRule.Elements
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsRule.Elements
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition.SrgsGrammar
  summary: "Gets the collection of <xref href=&quot;System.Speech.Recognition.SrgsGrammar.SrgsElement&quot;></xref> objects in the <xref href=&quot;System.Speech.Recognition.SrgsGrammar.SrgsRule&quot;></xref> instance."
  remarks: "The elements in an <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule> object can consist of <xref:System.Speech.Recognition.SrgsGrammar.SrgsItem>, <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf>, <xref:System.Speech.Recognition.SrgsGrammar.SrgsRuleRef>, <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken>, <xref:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag>, and <xref:System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag> objects."
  syntax:
    content: public System.Collections.ObjectModel.Collection<System.Speech.Recognition.SrgsGrammar.SrgsElement> Elements { get; }
    return:
      type: System.Collections.ObjectModel.Collection{System.Speech.Recognition.SrgsGrammar.SrgsElement}
      description: "The collection of elements in the rule."
  overload: System.Speech.Recognition.SrgsGrammar.SrgsRule.Elements*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SrgsGrammar.SrgsRule.Id
  id: Id
  parent: System.Speech.Recognition.SrgsGrammar.SrgsRule
  langs:
  - csharp
  name: Id
  nameWithType: SrgsRule.Id
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsRule.Id
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition.SrgsGrammar
  summary: "Gets or sets the identifier for the rule."
  remarks: "The identifier for a rule is a string that contains the name of the rule.  \n  \n A value used to set Id must adhere to the following rules:  \n  \n-   The value must be a valid XML name, as defined in [Extensible Markup Language (XML) 1.0 (Fifth Edition)](http://www.w3.org/TR/REC-xml/). To paraphrase this definition, a valid XML name must begin with a letter, an underscore ('_'), or a colon (':') and can be followed by zero or more NameChar characters (also defined in the XML specification).  \n  \n-   The value can be \"NULL\" or \"VOID\" or \"GARBAGE\".  \n  \n-   The value cannot contain any invalid rule ID character. These characters are: '?', '*', '+', '&#124;', '(', '), '^', '$', '/', ';', '.', '=', '\\<', '>', '[', ']', '{', '}', '\\\\\\\\', ' ', '\\t', '\\r', and '\\n'."
  syntax:
    content: public string Id { get; set; }
    return:
      type: System.String
      description: "The identifier for the rule."
  overload: System.Speech.Recognition.SrgsGrammar.SrgsRule.Id*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "An attempt is made to set Id to an invalid value."
  platform:
  - net462
- uid: System.Speech.Recognition.SrgsGrammar.SrgsRule.OnError
  id: OnError
  parent: System.Speech.Recognition.SrgsGrammar.SrgsRule
  langs:
  - csharp
  name: OnError
  nameWithType: SrgsRule.OnError
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsRule.OnError
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition.SrgsGrammar
  summary: "This property is not currently supported."
  syntax:
    content: public string OnError { get; set; }
    return:
      type: System.String
      description: "Not supported."
  overload: System.Speech.Recognition.SrgsGrammar.SrgsRule.OnError*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SrgsGrammar.SrgsRule.OnInit
  id: OnInit
  parent: System.Speech.Recognition.SrgsGrammar.SrgsRule
  langs:
  - csharp
  name: OnInit
  nameWithType: SrgsRule.OnInit
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsRule.OnInit
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition.SrgsGrammar
  summary: "This property is not currently supported."
  syntax:
    content: public string OnInit { get; set; }
    return:
      type: System.String
      description: "Not supported."
  overload: System.Speech.Recognition.SrgsGrammar.SrgsRule.OnInit*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SrgsGrammar.SrgsRule.OnParse
  id: OnParse
  parent: System.Speech.Recognition.SrgsGrammar.SrgsRule
  langs:
  - csharp
  name: OnParse
  nameWithType: SrgsRule.OnParse
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsRule.OnParse
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition.SrgsGrammar
  summary: "This property is not currently supported."
  syntax:
    content: public string OnParse { get; set; }
    return:
      type: System.String
      description: "Not supported."
  overload: System.Speech.Recognition.SrgsGrammar.SrgsRule.OnParse*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SrgsGrammar.SrgsRule.OnRecognition
  id: OnRecognition
  parent: System.Speech.Recognition.SrgsGrammar.SrgsRule
  langs:
  - csharp
  name: OnRecognition
  nameWithType: SrgsRule.OnRecognition
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsRule.OnRecognition
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition.SrgsGrammar
  summary: "This property is not currently supported."
  syntax:
    content: public string OnRecognition { get; set; }
    return:
      type: System.String
      description: "Not supported."
  overload: System.Speech.Recognition.SrgsGrammar.SrgsRule.OnRecognition*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SrgsGrammar.SrgsRule.Scope
  id: Scope
  parent: System.Speech.Recognition.SrgsGrammar.SrgsRule
  langs:
  - csharp
  name: Scope
  nameWithType: SrgsRule.Scope
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsRule.Scope
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition.SrgsGrammar
  summary: "Gets or sets whether a rule can be activated for recognition and when the rule can be referenced by other rules."
  remarks: "The default value for scope is `Private`. A private rule can only be activated for recognition by a rule reference from the root rule in its containing grammar or from another rule that is referenced from the root rule. A private rule cannot be referenced by an external grammar, unless the private rule is declared as the root rule of its containing grammar.       If its scope is set to `Public`, an <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule> object can be activated for recognition by a reference from a <xref:System.Speech.Recognition.SrgsGrammar.SrgsRuleRef> object in the containing grammar or from a rule in an external grammar."
  example:
  - "The following example creates a grammar that recognizes the phrase \"A nation that has won the World Cup is\" followed by the name of a country that has won the World Cup. It creates a public rule named `WorldCupWinner` and sets the scope of that rule to Public.  \n  \n```c#  \n// Create an SrgsDocument, create a new rule and set its scope to public.  \nSrgsDocument document = new SrgsDocument();  \nSrgsRule winnerRule = new SrgsRule(\"WorldCupWinner\");  \nwinnerRule.Scope = SrgsRuleScope.Public;  \n  \n// Add the introduction.  \nwinnerRule.Elements.Add(new SrgsItem(\"A nation that has won the world cup is: \"));  \n  \n// Create the rule for the European nations.  \nSrgsOneOf oneOfEurope = new SrgsOneOf(new SrgsItem[] {new SrgsItem(\"England\"), new SrgsItem(\"France\"), new SrgsItem(\"Germany\"), new SrgsItem(\"Italy\")});  \nSrgsRule ruleEurope = (new SrgsRule(\"EuropeanNations\", new SrgsElement[] {oneOfEurope}));  \n  \n// Create the rule for the South American nations.  \nSrgsOneOf oneOfSAmerica = new SrgsOneOf(new SrgsItem[] {new SrgsItem(\"Argentina\"), new SrgsItem(\"Brazil\"), new SrgsItem(\"Uruguay\")});  \nSrgsRule ruleSAmerica = (new SrgsRule(\"SouthAmericanNations\", new SrgsElement[] {oneOfSAmerica}));  \n  \n// Add references to winnerRule for ruleEurope and ruleSAmerica.  \nwinnerRule.Elements.Add(new SrgsOneOf(new SrgsItem[] {(new SrgsItem (new SrgsRuleRef(ruleEurope)), new SrgsItem(new SrgsRuleRef(ruleSAmerica)})));  \n  \n// Add all the rules to the document and make winnerRule   \n// the root rule of the document.  \ndocument.Rules.Add(new SrgsRule[] {winnerRule, ruleEurope, ruleSAmerica});  \ndocument.Root = winnerRule;  \n```  \n  \n The created grammar has the following form.  \n  \n```xml  \n<grammar version=\"1.0\" xml:lang=\"en-US\" xmlns=\"http://www.w3.org/2001/06/grammar\" root=\"WorldCupWinner\">  \n    <rule id=\"WorldCupWinner\" scope=\"public\">  \n        <item> A nation that has won the world cup is </item>  \n        <one-of>  \n            <item>  \n                <ruleref uri=\"#EuropeanNations\" />  \n            </item>  \n            <item>  \n                <ruleref uri=\"#SouthAmericanNations\" />  \n            </item>  \n        </one-of>  \n    </rule>  \n    <rule id=\"EuropeanNations\">  \n        <one-of>  \n            <item> England< /item>  \n            <item> France </item>  \n            <item> Germany </item>  \n            <item> Italy </item>  \n        </one-of>  \n    </rule>  \n    <rule id=\"SouthAmericanNations\">  \n        <one-of>  \n            <item> Argentina </item>  \n            <item> Brazil </item>  \n            <item> Uruguay </item>  \n        </one-of>  \n    </rule>  \n</grammar>  \n```"
  syntax:
    content: public System.Speech.Recognition.SrgsGrammar.SrgsRuleScope Scope { get; set; }
    return:
      type: System.Speech.Recognition.SrgsGrammar.SrgsRuleScope
      description: "A value the sets the scope for the rule."
  overload: System.Speech.Recognition.SrgsGrammar.SrgsRule.Scope*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SrgsGrammar.SrgsRule.Script
  id: Script
  parent: System.Speech.Recognition.SrgsGrammar.SrgsRule
  langs:
  - csharp
  name: Script
  nameWithType: SrgsRule.Script
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsRule.Script
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition.SrgsGrammar
  summary: "This property is not currently supported."
  syntax:
    content: public string Script { get; set; }
    return:
      type: System.String
      description: "Not supported."
  overload: System.Speech.Recognition.SrgsGrammar.SrgsRule.Script*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.FormatException
  isExternal: true
  name: System.FormatException
- uid: System.Speech.Recognition.SrgsGrammar.SrgsRule.#ctor(System.String)
  parent: System.Speech.Recognition.SrgsGrammar.SrgsRule
  isExternal: false
  name: SrgsRule(String)
  nameWithType: SrgsRule.SrgsRule(String)
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsRule.SrgsRule(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Speech.Recognition.SrgsGrammar.SrgsRule.#ctor(System.String,System.Speech.Recognition.SrgsGrammar.SrgsElement[])
  parent: System.Speech.Recognition.SrgsGrammar.SrgsRule
  isExternal: false
  name: SrgsRule(String,SrgsElement[])
  nameWithType: SrgsRule.SrgsRule(String,SrgsElement[])
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsRule.SrgsRule(String,SrgsElement[])
- uid: System.Speech.Recognition.SrgsGrammar.SrgsElement[]
  parent: System.Speech.Recognition.SrgsGrammar
  isExternal: false
  name: SrgsElement
  nameWithType: SrgsElement
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsElement[]
  spec.csharp:
  - uid: System.Speech.Recognition.SrgsGrammar.SrgsElement
    name: SrgsElement
    nameWithType: SrgsElement
    fullName: SrgsElement[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Speech.Recognition.SrgsGrammar.SrgsRule.Add(System.Speech.Recognition.SrgsGrammar.SrgsElement)
  parent: System.Speech.Recognition.SrgsGrammar.SrgsRule
  isExternal: false
  name: Add(SrgsElement)
  nameWithType: SrgsRule.Add(SrgsElement)
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsRule.Add(SrgsElement)
- uid: System.Speech.Recognition.SrgsGrammar.SrgsElement
  parent: System.Speech.Recognition.SrgsGrammar
  isExternal: false
  name: SrgsElement
  nameWithType: SrgsElement
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsElement
- uid: System.Speech.Recognition.SrgsGrammar.SrgsRule.BaseClass
  parent: System.Speech.Recognition.SrgsGrammar.SrgsRule
  isExternal: false
  name: BaseClass
  nameWithType: SrgsRule.BaseClass
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsRule.BaseClass
- uid: System.Speech.Recognition.SrgsGrammar.SrgsRule.Elements
  parent: System.Speech.Recognition.SrgsGrammar.SrgsRule
  isExternal: false
  name: Elements
  nameWithType: SrgsRule.Elements
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsRule.Elements
- uid: System.Collections.ObjectModel.Collection{System.Speech.Recognition.SrgsGrammar.SrgsElement}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: Collection<SrgsElement>
  nameWithType: Collection<SrgsElement>
  fullName: System.Collections.ObjectModel.Collection<System.Speech.Recognition.SrgsGrammar.SrgsElement>
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: Collection<System.Speech.Recognition.SrgsGrammar.SrgsElement>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Speech.Recognition.SrgsGrammar.SrgsElement
    name: SrgsElement
    nameWithType: SrgsElement
    fullName: SrgsElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Speech.Recognition.SrgsGrammar.SrgsRule.Id
  parent: System.Speech.Recognition.SrgsGrammar.SrgsRule
  isExternal: false
  name: Id
  nameWithType: SrgsRule.Id
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsRule.Id
- uid: System.Speech.Recognition.SrgsGrammar.SrgsRule.OnError
  parent: System.Speech.Recognition.SrgsGrammar.SrgsRule
  isExternal: false
  name: OnError
  nameWithType: SrgsRule.OnError
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsRule.OnError
- uid: System.Speech.Recognition.SrgsGrammar.SrgsRule.OnInit
  parent: System.Speech.Recognition.SrgsGrammar.SrgsRule
  isExternal: false
  name: OnInit
  nameWithType: SrgsRule.OnInit
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsRule.OnInit
- uid: System.Speech.Recognition.SrgsGrammar.SrgsRule.OnParse
  parent: System.Speech.Recognition.SrgsGrammar.SrgsRule
  isExternal: false
  name: OnParse
  nameWithType: SrgsRule.OnParse
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsRule.OnParse
- uid: System.Speech.Recognition.SrgsGrammar.SrgsRule.OnRecognition
  parent: System.Speech.Recognition.SrgsGrammar.SrgsRule
  isExternal: false
  name: OnRecognition
  nameWithType: SrgsRule.OnRecognition
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsRule.OnRecognition
- uid: System.Speech.Recognition.SrgsGrammar.SrgsRule.Scope
  parent: System.Speech.Recognition.SrgsGrammar.SrgsRule
  isExternal: false
  name: Scope
  nameWithType: SrgsRule.Scope
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsRule.Scope
- uid: System.Speech.Recognition.SrgsGrammar.SrgsRuleScope
  parent: System.Speech.Recognition.SrgsGrammar
  isExternal: false
  name: SrgsRuleScope
  nameWithType: SrgsRuleScope
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsRuleScope
- uid: System.Speech.Recognition.SrgsGrammar.SrgsRule.Script
  parent: System.Speech.Recognition.SrgsGrammar.SrgsRule
  isExternal: false
  name: Script
  nameWithType: SrgsRule.Script
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsRule.Script
- uid: System.Speech.Recognition.SrgsGrammar.SrgsRule.#ctor*
  parent: System.Speech.Recognition.SrgsGrammar.SrgsRule
  isExternal: false
  name: SrgsRule
  nameWithType: SrgsRule.SrgsRule
- uid: System.Speech.Recognition.SrgsGrammar.SrgsRule.Add*
  parent: System.Speech.Recognition.SrgsGrammar.SrgsRule
  isExternal: false
  name: Add
  nameWithType: SrgsRule.Add
- uid: System.Speech.Recognition.SrgsGrammar.SrgsRule.BaseClass*
  parent: System.Speech.Recognition.SrgsGrammar.SrgsRule
  isExternal: false
  name: BaseClass
  nameWithType: SrgsRule.BaseClass
- uid: System.Speech.Recognition.SrgsGrammar.SrgsRule.Elements*
  parent: System.Speech.Recognition.SrgsGrammar.SrgsRule
  isExternal: false
  name: Elements
  nameWithType: SrgsRule.Elements
- uid: System.Speech.Recognition.SrgsGrammar.SrgsRule.Id*
  parent: System.Speech.Recognition.SrgsGrammar.SrgsRule
  isExternal: false
  name: Id
  nameWithType: SrgsRule.Id
- uid: System.Speech.Recognition.SrgsGrammar.SrgsRule.OnError*
  parent: System.Speech.Recognition.SrgsGrammar.SrgsRule
  isExternal: false
  name: OnError
  nameWithType: SrgsRule.OnError
- uid: System.Speech.Recognition.SrgsGrammar.SrgsRule.OnInit*
  parent: System.Speech.Recognition.SrgsGrammar.SrgsRule
  isExternal: false
  name: OnInit
  nameWithType: SrgsRule.OnInit
- uid: System.Speech.Recognition.SrgsGrammar.SrgsRule.OnParse*
  parent: System.Speech.Recognition.SrgsGrammar.SrgsRule
  isExternal: false
  name: OnParse
  nameWithType: SrgsRule.OnParse
- uid: System.Speech.Recognition.SrgsGrammar.SrgsRule.OnRecognition*
  parent: System.Speech.Recognition.SrgsGrammar.SrgsRule
  isExternal: false
  name: OnRecognition
  nameWithType: SrgsRule.OnRecognition
- uid: System.Speech.Recognition.SrgsGrammar.SrgsRule.Scope*
  parent: System.Speech.Recognition.SrgsGrammar.SrgsRule
  isExternal: false
  name: Scope
  nameWithType: SrgsRule.Scope
- uid: System.Speech.Recognition.SrgsGrammar.SrgsRule.Script*
  parent: System.Speech.Recognition.SrgsGrammar.SrgsRule
  isExternal: false
  name: Script
  nameWithType: SrgsRule.Script
