### YamlMime:ManagedReference
items:
- uid: System.Configuration.ConfigurationElement
  id: ConfigurationElement
  children:
  - System.Configuration.ConfigurationElement.#ctor
  - System.Configuration.ConfigurationElement.CurrentConfiguration
  - System.Configuration.ConfigurationElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)
  - System.Configuration.ConfigurationElement.ElementInformation
  - System.Configuration.ConfigurationElement.ElementProperty
  - System.Configuration.ConfigurationElement.Equals(System.Object)
  - System.Configuration.ConfigurationElement.EvaluationContext
  - System.Configuration.ConfigurationElement.GetHashCode
  - System.Configuration.ConfigurationElement.GetTransformedAssemblyString(System.String)
  - System.Configuration.ConfigurationElement.GetTransformedTypeString(System.String)
  - System.Configuration.ConfigurationElement.HasContext
  - System.Configuration.ConfigurationElement.Init
  - System.Configuration.ConfigurationElement.InitializeDefault
  - System.Configuration.ConfigurationElement.IsModified
  - System.Configuration.ConfigurationElement.IsReadOnly
  - System.Configuration.ConfigurationElement.Item(System.Configuration.ConfigurationProperty)
  - System.Configuration.ConfigurationElement.Item(System.String)
  - System.Configuration.ConfigurationElement.ListErrors(System.Collections.IList)
  - System.Configuration.ConfigurationElement.LockAllAttributesExcept
  - System.Configuration.ConfigurationElement.LockAllElementsExcept
  - System.Configuration.ConfigurationElement.LockAttributes
  - System.Configuration.ConfigurationElement.LockElements
  - System.Configuration.ConfigurationElement.LockItem
  - System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedAttribute(System.String,System.String)
  - System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)
  - System.Configuration.ConfigurationElement.OnRequiredPropertyNotFound(System.String)
  - System.Configuration.ConfigurationElement.PostDeserialize
  - System.Configuration.ConfigurationElement.PreSerialize(System.Xml.XmlWriter)
  - System.Configuration.ConfigurationElement.Properties
  - System.Configuration.ConfigurationElement.Reset(System.Configuration.ConfigurationElement)
  - System.Configuration.ConfigurationElement.ResetModified
  - System.Configuration.ConfigurationElement.SerializeElement(System.Xml.XmlWriter,System.Boolean)
  - System.Configuration.ConfigurationElement.SerializeToXmlElement(System.Xml.XmlWriter,System.String)
  - System.Configuration.ConfigurationElement.SetPropertyValue(System.Configuration.ConfigurationProperty,System.Object,System.Boolean)
  - System.Configuration.ConfigurationElement.SetReadOnly
  - System.Configuration.ConfigurationElement.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)
  langs:
  - csharp
  name: ConfigurationElement
  nameWithType: ConfigurationElement
  fullName: System.Configuration.ConfigurationElement
  type: Class
  summary: "Representa um elemento de configuração dentro de um ficheiro de configuração."
  remarks: "O ConfigurationElement é uma classe abstracta que é utilizada para representar um elemento XML num ficheiro de configuração (por exemplo, o Web. config). Um elemento num ficheiro de configuração pode conter zero, um ou mais elementos subordinados.       Porque a classe de ConfigurationElement está definida como abstrato, não é possível criar uma instância do mesmo. Apenas podem derivar classes do mesmo. O .NET Framework inclui classes que derivam da classe de ConfigurationElement para poder representar elementos de configuração XML padrão, tais como <xref:System.Configuration.ConfigurationSection>.</xref:System.Configuration.ConfigurationSection> Também pode expandir a classe de ConfigurationElement para aceder a secções e os elementos de configuração personalizado. O exemplo incluído posteriormente neste tópico mostra como aceder a secções e os elementos de configuração personalizada ao utilizar classes personalizadas que derivem de ConfigurationElement.       Também pode expandir os tipos de configuração padrão, tais como o ConfigurationElement, <xref:System.Configuration.ConfigurationElementCollection>, <xref:System.Configuration.ConfigurationProperty>e <xref:System.Configuration.ConfigurationSection>.</xref:System.Configuration.ConfigurationSection> </xref:System.Configuration.ConfigurationProperty> </xref:System.Configuration.ConfigurationElementCollection> Para obter mais informações, consulte a documentação para essas classes.       Para obter mais informações sobre como aceder às informações nos ficheiros de configuração, consulte a <xref:System.Configuration.ConfigurationManager>classe e a <xref:System.Web.Configuration.WebConfigurationManager>classe.</xref:System.Web.Configuration.WebConfigurationManager> </xref:System.Configuration.ConfigurationManager>"
  example:
  - "The following code example shows how to implement a custom ConfigurationElement both as an individual element in a custom section and as a collection of elements in a custom section. The example consists of the following files:  \n  \n-   An app.config file that contains a custom section that is named `MyUrls`. This section contains a simple element (it does not contain any other elements) and a collection of elements. The simple element is named `simple` and the collection is named `urls`.  \n  \n-   A console application. The application reads the contents of the app.config file and writes the information to the console. It uses classes that derive from ConfigurationElement, <xref:System.Configuration.ConfigurationElementCollection>, and <xref:System.Configuration.ConfigurationSection>.  \n  \n-   A class named `UrlsSection` that derives from the <xref:System.Configuration.ConfigurationSection> class. This class is used to access the `MyUrls` section in the configuration file.  \n  \n-   A class named `UrlsCollection` that derives from the <xref:System.Configuration.ConfigurationElementCollection> class. This class is used to access the `urls` collection in the configuration file.  \n  \n-   A class named `UrlConfigElement` that derives from the ConfigurationElement class. This class is used to access the `simple` element and the members of the `urls` collection in the configuration file.  \n  \n To run the example, perform the following steps:  \n  \n1.  Create a solution that has a console application project and a class library project that is named `ConfigurationElement`.  \n  \n2.  Put the three class files in the class library project and put the other files in the console library project.  \n  \n3.  In both projects set a reference to `System.Configuration`.  \n  \n4.  In the console application project set a project reference to the class library project.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]  \n  \n [!code-cs[System.Configuration.ConfigurationElement#151](~/add/codesnippet/csharp/t-system.configuration.c_8_2.cs)]\n [!code-vb[System.Configuration.ConfigurationElement#151](~/add/codesnippet/visualbasic/t-system.configuration.c_8_2.vb)]  \n  \n [!code-cs[System.Configuration.ConfigurationElement#71](~/add/codesnippet/csharp/t-system.configuration.c_8_3.cs)]\n [!code-vb[System.Configuration.ConfigurationElement#71](~/add/codesnippet/visualbasic/t-system.configuration.c_8_3.vb)]  \n  \n [!code-vb[System.Configuration.ConfigurationElement#51](~/add/codesnippet/visualbasic/t-system.configuration.c_8_4.vb)]\n [!code-cs[System.Configuration.ConfigurationElement#51](~/add/codesnippet/csharp/t-system.configuration.c_8_4.cs)]  \n  \n [!code-cs[System.Configuration.ConfigurationElement#31](~/add/codesnippet/csharp/t-system.configuration.c_8_5.cs)]\n [!code-vb[System.Configuration.ConfigurationElement#31](~/add/codesnippet/visualbasic/t-system.configuration.c_8_5.vb)]"
  syntax:
    content: public abstract class ConfigurationElement
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.#ctor
  id: '#ctor'
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: ConfigurationElement()
  nameWithType: ConfigurationElement.ConfigurationElement()
  fullName: System.Configuration.ConfigurationElement.ConfigurationElement()
  type: Constructor
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> classe."
  remarks: "Criar uma nova instância do <xref:System.Configuration.ConfigurationElement>de classe, por exemplo, sempre que a aplicação tem de adicionar um novo elemento para a relacionados <xref:System.Configuration.ConfigurationElementCollection>coleção.</xref:System.Configuration.ConfigurationElementCollection> </xref:System.Configuration.ConfigurationElement>"
  example:
  - "The following example shows how to use a customized constructor.  \n  \n [!code-cs[System.Configuration.ConfigurationElement#32](~/add/codesnippet/csharp/m-system.configuration.c_36_1.cs)]\n [!code-vb[System.Configuration.ConfigurationElement#32](~/add/codesnippet/visualbasic/m-system.configuration.c_36_1.vb)]"
  syntax:
    content: protected ConfigurationElement ();
    parameters: []
  overload: System.Configuration.ConfigurationElement.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.CurrentConfiguration
  id: CurrentConfiguration
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: CurrentConfiguration
  nameWithType: ConfigurationElement.CurrentConfiguration
  fullName: System.Configuration.ConfigurationElement.CurrentConfiguration
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Obtém uma referência de nível superior para <xref href=&quot;System.Configuration.Configuration&quot;> </xref> instância que representa a hierarquia de configuração que atual <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> instância pertence."
  remarks: "A propriedade CurrentConfiguration torna mais fácil determinar que versão do [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] é o destino. O <xref:System.Configuration.Configuration.TargetFramework%2A>propriedade de nível superior de <xref:System.Configuration.Configuration>instância indica a versão do framework de destino.</xref:System.Configuration.Configuration> </xref:System.Configuration.Configuration.TargetFramework%2A>"
  syntax:
    content: public System.Configuration.Configuration CurrentConfiguration { get; }
    return:
      type: System.Configuration.Configuration
      description: "O nível superior <xref href=&quot;System.Configuration.Configuration&quot;> </xref> instância que atual <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> instância pertence."
  overload: System.Configuration.ConfigurationElement.CurrentConfiguration*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)
  id: DeserializeElement(System.Xml.XmlReader,System.Boolean)
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: DeserializeElement(XmlReader,Boolean)
  nameWithType: ConfigurationElement.DeserializeElement(XmlReader,Boolean)
  fullName: System.Configuration.ConfigurationElement.DeserializeElement(XmlReader,Boolean)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Lê o XML no ficheiro de configuração."
  remarks: ''
  example:
  - "The following example demonstrates how to extend the DeserializeElement method.  \n  \n [!code-cs[System.Configuration.ConfigurationElement#33](~/add/codesnippet/csharp/6dc9ac84-77cf-449c-b380-_1.cs)]\n [!code-vb[System.Configuration.ConfigurationElement#33](~/add/codesnippet/visualbasic/6dc9ac84-77cf-449c-b380-_1.vb)]"
  syntax:
    content: protected virtual void DeserializeElement (System.Xml.XmlReader reader, bool serializeCollectionKey);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "O <xref:System.Xml.XmlReader>que lê o ficheiro de configuração.</xref:System.Xml.XmlReader>"
    - id: serializeCollectionKey
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>para serializar apenas as principais propriedades de coleção; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Configuration.ConfigurationElement.DeserializeElement*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "The element to read is locked.  \n  \n \\- or -  \n  \n An attribute of the current node is not recognized.  \n  \n \\- or -  \n  \n The lock status of the current node cannot be determined."
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.ElementInformation
  id: ElementInformation
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: ElementInformation
  nameWithType: ConfigurationElement.ElementInformation
  fullName: System.Configuration.ConfigurationElement.ElementInformation
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Obtém um <xref href=&quot;System.Configuration.ElementInformation&quot;> </xref> objeto que contém as informações não personalizável e a funcionalidade do <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> objeto."
  remarks: ''
  example:
  - "The following example shows how to use the ElementInformation property.  \n  \n [!code-cs[System.Configuration.ConfigurationElement#80](~/add/codesnippet/csharp/p-system.configuration.c_48_1.cs)]\n [!code-vb[System.Configuration.ConfigurationElement#80](~/add/codesnippet/visualbasic/p-system.configuration.c_48_1.vb)]"
  syntax:
    content: public System.Configuration.ElementInformation ElementInformation { get; }
    return:
      type: System.Configuration.ElementInformation
      description: "Um <xref href=&quot;System.Configuration.ElementInformation&quot;> </xref> que contém as informações não personalizável e a funcionalidade do <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref>."
  overload: System.Configuration.ConfigurationElement.ElementInformation*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.ElementProperty
  id: ElementProperty
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: ElementProperty
  nameWithType: ConfigurationElement.ElementProperty
  fullName: System.Configuration.ConfigurationElement.ElementProperty
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Obtém o <xref href=&quot;System.Configuration.ConfigurationElementProperty&quot;> </xref> objeto que representa o <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> objeto próprio."
  syntax:
    content: protected virtual System.Configuration.ConfigurationElementProperty ElementProperty { get; }
    return:
      type: System.Configuration.ConfigurationElementProperty
      description: "O <xref href=&quot;System.Configuration.ConfigurationElementProperty&quot;> </xref> que representa o <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> próprio."
  overload: System.Configuration.ConfigurationElement.ElementProperty*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: ConfigurationElement.Equals(Object)
  fullName: System.Configuration.ConfigurationElement.Equals(Object)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Compara atual <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> instância para o objeto especificado."
  syntax:
    content: public override bool Equals (object compareTo);
    parameters:
    - id: compareTo
      type: System.Object
      description: "O objeto para a comparação com."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o objeto para a comparação com é igual a atual <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> instância; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. A predefinição é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Configuration.ConfigurationElement.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.EvaluationContext
  id: EvaluationContext
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: EvaluationContext
  nameWithType: ConfigurationElement.EvaluationContext
  fullName: System.Configuration.ConfigurationElement.EvaluationContext
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Obtém o <xref href=&quot;System.Configuration.ContextInformation&quot;> </xref> do objeto para o <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> objeto."
  remarks: "A <xref:System.Configuration.ContextInformation>objeto fornece o contexto necessário para um <xref:System.Configuration.ConfigurationElement>objeto para tomar decisões com base no qual está a ser avaliado.</xref:System.Configuration.ConfigurationElement> </xref:System.Configuration.ContextInformation>       O <xref:System.Configuration.ContextInformation>objeto fornece detalhes de ambiente relacionados com um elemento da configuração.</xref:System.Configuration.ContextInformation> Por exemplo, pode utilizar o <xref:System.Configuration.ContextInformation.IsMachineLevel%2A>propriedade para determinar se um <xref:System.Configuration.ConfigurationElement>foi definida em Machine. config ou pode determinar que hierarquia um <xref:System.Configuration.ConfigurationElement>elemento pertence ao utilizar o <xref:System.Configuration.ContextInformation.HostingContext%2A>propriedade.</xref:System.Configuration.ContextInformation.HostingContext%2A> </xref:System.Configuration.ConfigurationElement> </xref:System.Configuration.ConfigurationElement> </xref:System.Configuration.ContextInformation.IsMachineLevel%2A>"
  syntax:
    content: protected System.Configuration.ContextInformation EvaluationContext { get; }
    return:
      type: System.Configuration.ContextInformation
      description: "The <xref href=&quot;System.Configuration.ContextInformation&quot;></xref> for the <xref href=&quot;System.Configuration.ConfigurationElement&quot;></xref>."
  overload: System.Configuration.ConfigurationElement.EvaluationContext*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "O elemento actual não está associado um contexto."
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.GetHashCode
  id: GetHashCode
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: ConfigurationElement.GetHashCode()
  fullName: System.Configuration.ConfigurationElement.GetHashCode()
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Obtém um valor exclusivo que representa atual <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> instância."
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "Um valor exclusivo que representa atual <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> instância."
  overload: System.Configuration.ConfigurationElement.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.GetTransformedAssemblyString(System.String)
  id: GetTransformedAssemblyString(System.String)
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: GetTransformedAssemblyString(String)
  nameWithType: ConfigurationElement.GetTransformedAssemblyString(String)
  fullName: System.Configuration.ConfigurationElement.GetTransformedAssemblyString(String)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Devolve a versão transformada com o nome de assemblagem especificado."
  remarks: "O <xref:System.Configuration.ConfigurationElement.SerializeElement%2A>método e o <xref:System.Configuration.ConfigurationElement.SerializeToXmlElement%2A>método chamar este método para transformar um nome de assemblagem quando uma versão anterior do [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] é direcionado.</xref:System.Configuration.ConfigurationElement.SerializeToXmlElement%2A> </xref:System.Configuration.ConfigurationElement.SerializeElement%2A>"
  syntax:
    content: protected virtual string GetTransformedAssemblyString (string assemblyName);
    parameters:
    - id: assemblyName
      type: System.String
      description: "O nome da assemblagem."
    return:
      type: System.String
      description: "A versão transformada do nome da assemblagem. Se nenhum transformador estiver disponível, o <code> assemblyName </code> valor do parâmetro é devolvido inalterado. O <xref:System.Configuration.Configuration.TypeStringTransformer*>propriedade é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> esteja disponível nenhum transformador.</xref:System.Configuration.Configuration.TypeStringTransformer*>"
  overload: System.Configuration.ConfigurationElement.GetTransformedAssemblyString*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.GetTransformedTypeString(System.String)
  id: GetTransformedTypeString(System.String)
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: GetTransformedTypeString(String)
  nameWithType: ConfigurationElement.GetTransformedTypeString(String)
  fullName: System.Configuration.ConfigurationElement.GetTransformedTypeString(String)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Devolve a versão transformada do nome do tipo especificado."
  remarks: "O <xref:System.Configuration.ConfigurationElement.SerializeElement%2A>método e o <xref:System.Configuration.ConfigurationElement.SerializeToXmlElement%2A>método chamar este método para transformar um nome de tipo quando uma versão anterior do [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] é direcionado.</xref:System.Configuration.ConfigurationElement.SerializeToXmlElement%2A> </xref:System.Configuration.ConfigurationElement.SerializeElement%2A>"
  syntax:
    content: protected virtual string GetTransformedTypeString (string typeName);
    parameters:
    - id: typeName
      type: System.String
      description: "O nome do tipo."
    return:
      type: System.String
      description: "A versão transformada do nome do tipo especificado. Se nenhum transformador estiver disponível, o <code> typeName </code> valor do parâmetro é devolvido inalterado. O <xref:System.Configuration.Configuration.TypeStringTransformer*>propriedade é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> esteja disponível nenhum transformador.</xref:System.Configuration.Configuration.TypeStringTransformer*>"
  overload: System.Configuration.ConfigurationElement.GetTransformedTypeString*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.HasContext
  id: HasContext
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: HasContext
  nameWithType: ConfigurationElement.HasContext
  fullName: System.Configuration.ConfigurationElement.HasContext
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Obtém um valor que indica se o <xref:System.Configuration.ConfigurationElement.CurrentConfiguration*>propriedade é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>.</xref:System.Configuration.ConfigurationElement.CurrentConfiguration*>"
  syntax:
    content: protected bool HasContext { get; }
    return:
      type: System.Boolean
      description: "FALSO se o <xref:System.Configuration.ConfigurationElement.CurrentConfiguration*>propriedade é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>; caso contrário, <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>.</xref:System.Configuration.ConfigurationElement.CurrentConfiguration*>"
  overload: System.Configuration.ConfigurationElement.HasContext*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.Init
  id: Init
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: Init()
  nameWithType: ConfigurationElement.Init()
  fullName: System.Configuration.ConfigurationElement.Init()
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Define o <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> objeto para o estado inicial."
  syntax:
    content: protected virtual void Init ();
    parameters: []
  overload: System.Configuration.ConfigurationElement.Init*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.InitializeDefault
  id: InitializeDefault
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: InitializeDefault()
  nameWithType: ConfigurationElement.InitializeDefault()
  fullName: System.Configuration.ConfigurationElement.InitializeDefault()
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Utilizada para inicializar um conjunto predefinido de valores para o <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> objeto."
  remarks: "Chamado para definir o estado interno do objeto para os valores predefinidos adequado."
  syntax:
    content: protected virtual void InitializeDefault ();
    parameters: []
  overload: System.Configuration.ConfigurationElement.InitializeDefault*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.IsModified
  id: IsModified
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: IsModified()
  nameWithType: ConfigurationElement.IsModified()
  fullName: System.Configuration.ConfigurationElement.IsModified()
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Indica se este elemento de configuração foi modificado desde que foi guardado ou carregado, quando implementados numa classe derivada pela última vez."
  remarks: "Determina o método IsModified se isto <xref:System.Configuration.ConfigurationElement>objeto será escrito para a configuração de ficheiros quando o <xref:System.Configuration.Configuration.Save%2A>método é chamado.</xref:System.Configuration.Configuration.Save%2A> </xref:System.Configuration.ConfigurationElement> Se o valor de retorno for `false`, presume-se que o ficheiro de configuração representa o estado atual do elemento.       Por predefinição, IsModified devolve `true` depois de uma propriedade definida através de indexador para este <xref:System.Configuration.ConfigurationElement>objeto.</xref:System.Configuration.ConfigurationElement>       Substitua o método IsModified para fornecer personalizada indicação do Estado disto <xref:System.Configuration.ConfigurationElement>elemento.</xref:System.Configuration.ConfigurationElement>"
  example:
  - "The following example shows how to extend IsModified.  \n  \n [!code-cs[System.Configuration.ConfigurationElement#35](~/add/codesnippet/csharp/m-system.configuration.c_9_1.cs)]\n [!code-vb[System.Configuration.ConfigurationElement#35](~/add/codesnippet/visualbasic/m-system.configuration.c_9_1.vb)]  \n  \n The method shown in the previous example is called when a configuration element is modified, as in the following example.  \n  \n [!code-cs[System.Configuration.ConfigurationElement#6](~/add/codesnippet/csharp/m-system.configuration.c_9_2.cs)]\n [!code-vb[System.Configuration.ConfigurationElement#6](~/add/codesnippet/visualbasic/m-system.configuration.c_9_2.vb)]"
  syntax:
    content: protected virtual bool IsModified ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o elemento foi modificado; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Configuration.ConfigurationElement.IsModified*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.IsReadOnly
  id: IsReadOnly
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: IsReadOnly()
  nameWithType: ConfigurationElement.IsReadOnly()
  fullName: System.Configuration.ConfigurationElement.IsReadOnly()
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Obtém um valor que indica se o <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> objeto é só de leitura."
  remarks: "O sistema define os elementos de configuração não podem ser modificados.       Para determinar que elementos podem ser modificados, utilize o método IsReadOnly."
  example:
  - "The following example shows how to use the IsReadOnly method. It is used on a custom section and returns `false`.  \n  \n [!code-cs[System.Configuration.ConfigurationElement#7](~/add/codesnippet/csharp/m-system.configuration.c_12_1.cs)]\n [!code-vb[System.Configuration.ConfigurationElement#7](~/add/codesnippet/visualbasic/m-system.configuration.c_12_1.vb)]"
  syntax:
    content: public virtual bool IsReadOnly ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> objeto é só de leitura; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Configuration.ConfigurationElement.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.Item(System.Configuration.ConfigurationProperty)
  id: Item(System.Configuration.ConfigurationProperty)
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: Item(ConfigurationProperty)
  nameWithType: ConfigurationElement.Item(ConfigurationProperty)
  fullName: System.Configuration.ConfigurationElement.Item(ConfigurationProperty)
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Obtém ou define uma propriedade ou atributo deste elemento de configuração."
  remarks: "Utilize a propriedade do Item para obter ou definir os valores de uma <xref:System.Configuration.ConfigurationProperty>objeto.</xref:System.Configuration.ConfigurationProperty>       Em c#, esta propriedade é o indexador para a <xref:System.Configuration.ConfigurationSectionCollection>classe.</xref:System.Configuration.ConfigurationSectionCollection>"
  syntax:
    content: protected object this[System.Configuration.ConfigurationProperty prop] { get; set; }
    parameters:
    - id: prop
      type: System.Configuration.ConfigurationProperty
      description: "A propriedade para aceder."
    return:
      type: System.Object
      description: "O elemento de propriedade, atributo ou elemento subordinado especificado."
  overload: System.Configuration.ConfigurationElement.Item*
  exceptions:
  - type: System.Configuration.ConfigurationException
    commentId: T:System.Configuration.ConfigurationException
    description: "<code>prop</code>é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> ou não existe no elemento."
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "<code>prop</code>é lido apenas ou bloqueado."
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.Item(System.String)
  id: Item(System.String)
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: Item(String)
  nameWithType: ConfigurationElement.Item(String)
  fullName: System.Configuration.ConfigurationElement.Item(String)
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Obtém ou define um elemento de propriedade, atributo ou elemento subordinado deste elemento de configuração."
  remarks: "Utilize a propriedade do Item para obter ou definir os valores de uma <xref:System.Configuration.ConfigurationProperty>objeto.</xref:System.Configuration.ConfigurationProperty>       Em c#, esta propriedade é o indexador para a <xref:System.Configuration.ConfigurationSectionCollection>classe.</xref:System.Configuration.ConfigurationSectionCollection>"
  syntax:
    content: protected object this[string propertyName] { get; set; }
    parameters:
    - id: propertyName
      type: System.String
      description: "O nome do <xref href=&quot;System.Configuration.ConfigurationProperty&quot;> </xref> para o acesso."
    return:
      type: System.Object
      description: "O elemento de propriedade, atributo ou elemento subordinado especificado"
  overload: System.Configuration.ConfigurationElement.Item*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "<code>prop</code>é só de leitura ou está bloqueado."
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.ListErrors(System.Collections.IList)
  id: ListErrors(System.Collections.IList)
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: ListErrors(IList)
  nameWithType: ConfigurationElement.ListErrors(IList)
  fullName: System.Configuration.ConfigurationElement.ListErrors(IList)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Adiciona os erros de propriedade inválido neste <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> objeto e em todos os subelementos, à lista de transmitido."
  syntax:
    content: protected virtual void ListErrors (System.Collections.IList errorList);
    parameters:
    - id: errorList
      type: System.Collections.IList
      description: "Um objeto que implementa o <xref:System.Collections.IList>interface.</xref:System.Collections.IList>"
  overload: System.Configuration.ConfigurationElement.ListErrors*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.LockAllAttributesExcept
  id: LockAllAttributesExcept
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: LockAllAttributesExcept
  nameWithType: ConfigurationElement.LockAllAttributesExcept
  fullName: System.Configuration.ConfigurationElement.LockAllAttributesExcept
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Obtém a coleção de atributos bloqueados."
  remarks: "A propriedade LockAllAttributesExcept permite-lhe bloquear todos os atributos de uma só vez, com exceção dos que especificar. Para tal, utilize o <xref:System.Configuration.ConfigurationLockCollection.Contains%2A>método, conforme explicado na secção de exemplo.</xref:System.Configuration.ConfigurationLockCollection.Contains%2A>      > [!NOTE] > LockAllAttributesExcept a propriedade permite-lhe para impedir que o elemento subordinado elementos de configuração do elemento ao qual aplicar a regra de que está a ser modificado. Utilize o <xref:System.Configuration.ConfigurationElement.LockItem%2A>propriedade se pretender colocar um geral bloqueio no elemento principal próprio e respetivos elementos subordinados.</xref:System.Configuration.ConfigurationElement.LockItem%2A>"
  example:
  - "The following example shows how to use the LockAllAttributesExcept.  \n  \n [!code-cs[System.Configuration.ConfigurationElement#9](~/add/codesnippet/csharp/p-system.configuration.c_59_1.cs)]\n [!code-vb[System.Configuration.ConfigurationElement#9](~/add/codesnippet/visualbasic/p-system.configuration.c_59_1.vb)]"
  syntax:
    content: public System.Configuration.ConfigurationLockCollection LockAllAttributesExcept { get; }
    return:
      type: System.Configuration.ConfigurationLockCollection
      description: "O <xref href=&quot;System.Configuration.ConfigurationLockCollection&quot;> </xref> dos atributos bloqueados (propriedades) para o elemento."
  overload: System.Configuration.ConfigurationElement.LockAllAttributesExcept*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.LockAllElementsExcept
  id: LockAllElementsExcept
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: LockAllElementsExcept
  nameWithType: ConfigurationElement.LockAllElementsExcept
  fullName: System.Configuration.ConfigurationElement.LockAllElementsExcept
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Obtém a coleção de elementos bloqueados."
  remarks: "A propriedade LockAllElementsExcept permite-lhe bloquear todos os elementos de uma só vez, exceto aquele que especificar.      > [!NOTE] > LockAllElementsExcept a propriedade permite-lhe para impedir que o elemento subordinado elementos de configuração do elemento ao qual aplicar a regra de que está a ser modificado. Utilize o <xref:System.Configuration.ConfigurationElement.LockItem%2A>propriedade se pretender colocar um geral bloqueio no elemento de si próprio e respetivos elementos subordinados.</xref:System.Configuration.ConfigurationElement.LockItem%2A>"
  example:
  - "The following example shows how to use the LockAllElementsExcept property.  \n  \n [!code-cs[System.Configuration.ConfigurationElement#5](~/add/codesnippet/csharp/p-system.configuration.c_3_1.cs)]\n [!code-vb[System.Configuration.ConfigurationElement#5](~/add/codesnippet/visualbasic/p-system.configuration.c_3_1.vb)]"
  syntax:
    content: public System.Configuration.ConfigurationLockCollection LockAllElementsExcept { get; }
    return:
      type: System.Configuration.ConfigurationLockCollection
      description: "O <xref href=&quot;System.Configuration.ConfigurationLockCollection&quot;> </xref> de elementos bloqueados."
  overload: System.Configuration.ConfigurationElement.LockAllElementsExcept*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.LockAttributes
  id: LockAttributes
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: LockAttributes
  nameWithType: ConfigurationElement.LockAttributes
  fullName: System.Configuration.ConfigurationElement.LockAttributes
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Obtém a coleção de atributos bloqueados"
  remarks: "A propriedade de LockAttributes permite-lhe bloquear todos os atributos que especificar.       Para que utilize o <xref:System.Configuration.ConfigurationLockCollection.Contains%2A>método, conforme explicado na secção de exemplo.</xref:System.Configuration.ConfigurationLockCollection.Contains%2A>      > [!NOTE] > LockAttributes a propriedade permite-lhe para impedir que o elemento subordinado elementos de configuração do elemento ao qual aplicar a regra de que está a ser modificado. Utilize <xref:System.Configuration.ConfigurationElement.LockItem%2A>se pretende colocar em pausa um bloqueio geral o próprio elemento e os respetivos elementos subordinados.</xref:System.Configuration.ConfigurationElement.LockItem%2A>"
  example:
  - "The following example shows how to use the LockAttributes property.  \n  \n [!code-cs[System.Configuration.ConfigurationElement#8](~/add/codesnippet/csharp/p-system.configuration.c_45_1.cs)]\n [!code-vb[System.Configuration.ConfigurationElement#8](~/add/codesnippet/visualbasic/p-system.configuration.c_45_1.vb)]"
  syntax:
    content: public System.Configuration.ConfigurationLockCollection LockAttributes { get; }
    return:
      type: System.Configuration.ConfigurationLockCollection
      description: "O <xref href=&quot;System.Configuration.ConfigurationLockCollection&quot;> </xref> dos atributos bloqueados (propriedades) para o elemento."
  overload: System.Configuration.ConfigurationElement.LockAttributes*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.LockElements
  id: LockElements
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: LockElements
  nameWithType: ConfigurationElement.LockElements
  fullName: System.Configuration.ConfigurationElement.LockElements
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Obtém a coleção de elementos bloqueados."
  remarks: "A propriedade LockElements permite-lhe bloquear todos os elementos que especificar.       Para tal, utilize o <xref:System.Configuration.ConfigurationLockCollection.Contains%2A>método, conforme explicado no seguinte exemplo.</xref:System.Configuration.ConfigurationLockCollection.Contains%2A>      > [!NOTE] > LockElements a propriedade permite-lhe para impedir que o elemento subordinado elementos de configuração do elemento ao qual aplicar a regra de que está a ser modificado. Utilize <xref:System.Configuration.ConfigurationElement.LockItem%2A>se pretende colocar em pausa um bloqueio geral o próprio elemento e os respetivos elementos subordinados.</xref:System.Configuration.ConfigurationElement.LockItem%2A>"
  example:
  - "The following example shows how to use the LockElements property.  \n  \n [!code-cs[System.Configuration.ConfigurationElement#4](~/add/codesnippet/csharp/p-system.configuration.c_11_1.cs)]\n [!code-vb[System.Configuration.ConfigurationElement#4](~/add/codesnippet/visualbasic/p-system.configuration.c_11_1.vb)]"
  syntax:
    content: public System.Configuration.ConfigurationLockCollection LockElements { get; }
    return:
      type: System.Configuration.ConfigurationLockCollection
      description: "O <xref href=&quot;System.Configuration.ConfigurationLockCollection&quot;> </xref> de elementos bloqueados."
  overload: System.Configuration.ConfigurationElement.LockElements*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.LockItem
  id: LockItem
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: LockItem
  nameWithType: ConfigurationElement.LockItem
  fullName: System.Configuration.ConfigurationElement.LockItem
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Obtém ou define um valor que indica se o elemento estar bloqueado."
  remarks: "Utilize a propriedade de LockItem, se pretender colocar um bloqueio geral sobre o próprio elemento e os respetivos elementos subordinados."
  example:
  - "The following example shows how to use the LockItem.  \n  \n [!code-cs[System.Configuration.ConfigurationElement#3](~/add/codesnippet/csharp/p-system.configuration.c_20_1.cs)]\n [!code-vb[System.Configuration.ConfigurationElement#3](~/add/codesnippet/visualbasic/p-system.configuration.c_20_1.vb)]"
  syntax:
    content: public bool LockItem { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o elemento estar bloqueado; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. A predefinição é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Configuration.ConfigurationElement.LockItem*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "O elemento já foi bloqueado com um nível superior da configuração."
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedAttribute(System.String,System.String)
  id: OnDeserializeUnrecognizedAttribute(System.String,System.String)
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: OnDeserializeUnrecognizedAttribute(String,String)
  nameWithType: ConfigurationElement.OnDeserializeUnrecognizedAttribute(String,String)
  fullName: System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedAttribute(String,String)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Obtém um valor que indica se é encontrado um atributo desconhecido durante a desserialização."
  remarks: "O OnDeserializeUnrecognizedAttribute é invocada quando é encontrado um atributo desconhecido ao anular a serialização de <xref:System.Configuration.ConfigurationElement>objeto.</xref:System.Configuration.ConfigurationElement>"
  syntax:
    content: protected virtual bool OnDeserializeUnrecognizedAttribute (string name, string value);
    parameters:
    - id: name
      type: System.String
      description: "O nome do atributo não reconhecido."
    - id: value
      type: System.String
      description: "O valor do atributo não reconhecido."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Quando um atributo desconhecido foi encontrado ao anular a serialização; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedAttribute*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)
  id: OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: OnDeserializeUnrecognizedElement(String,XmlReader)
  nameWithType: ConfigurationElement.OnDeserializeUnrecognizedElement(String,XmlReader)
  fullName: System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedElement(String,XmlReader)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Obtém um valor que indica se é encontrado um elemento desconhecido durante a desserialização."
  remarks: "O OnDeserializeUnrecognizedElement é invocada quando é encontrado um atributo desconhecido ao anular a serialização de <xref:System.Configuration.ConfigurationElement>objeto.</xref:System.Configuration.ConfigurationElement>"
  syntax:
    content: protected virtual bool OnDeserializeUnrecognizedElement (string elementName, System.Xml.XmlReader reader);
    parameters:
    - id: elementName
      type: System.String
      description: "O nome do subelemento desconhecido."
    - id: reader
      type: System.Xml.XmlReader
      description: "O <xref:System.Xml.XmlReader>a ser utilizado para anulação da serialização.</xref:System.Xml.XmlReader>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Quando um elemento desconhecido foi encontrado ao anular a serialização; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedElement*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "The element identified by <code>elementName</code> is locked.  \n  \n \\- or -  \n  \n One or more of the element's attributes is locked.  \n  \n \\- or -  \n  \n <code>elementName</code> is unrecognized, or the element has an unrecognized attribute.  \n  \n \\- or -  \n  \n The element has a Boolean attribute with an invalid value.  \n  \n \\- or -  \n  \n An attempt was made to deserialize a property more than once.  \n  \n \\- or -  \n  \n An attempt was made to deserialize a property that is not a valid member of the element.  \n  \n \\- or -  \n  \n The element cannot contain a CDATA or text element."
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.OnRequiredPropertyNotFound(System.String)
  id: OnRequiredPropertyNotFound(System.String)
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: OnRequiredPropertyNotFound(String)
  nameWithType: ConfigurationElement.OnRequiredPropertyNotFound(String)
  fullName: System.Configuration.ConfigurationElement.OnRequiredPropertyNotFound(String)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Emite uma exceção quando uma propriedade necessária não foi encontrada."
  remarks: "O <xref:System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedElement%2A>é invocada quando é encontrado um atributo desconhecido ao anular a serialização de <xref:System.Configuration.ConfigurationElement>objeto.</xref:System.Configuration.ConfigurationElement> </xref:System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedElement%2A>"
  syntax:
    content: protected virtual object OnRequiredPropertyNotFound (string name);
    parameters:
    - id: name
      type: System.String
      description: "O nome do atributo necessário que não foi encontrado."
    return:
      type: System.Object
      description: "Nenhum."
  overload: System.Configuration.ConfigurationElement.OnRequiredPropertyNotFound*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "Em todos os casos."
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.PostDeserialize
  id: PostDeserialize
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: PostDeserialize()
  nameWithType: ConfigurationElement.PostDeserialize()
  fullName: System.Configuration.ConfigurationElement.PostDeserialize()
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Chamado após a anulação da serialização."
  syntax:
    content: protected virtual void PostDeserialize ();
    parameters: []
  overload: System.Configuration.ConfigurationElement.PostDeserialize*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.PreSerialize(System.Xml.XmlWriter)
  id: PreSerialize(System.Xml.XmlWriter)
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: PreSerialize(XmlWriter)
  nameWithType: ConfigurationElement.PreSerialize(XmlWriter)
  fullName: System.Configuration.ConfigurationElement.PreSerialize(XmlWriter)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Chamado antes de serialização."
  syntax:
    content: protected virtual void PreSerialize (System.Xml.XmlWriter writer);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "O <xref:System.Xml.XmlWriter>que será utilizado para serializar o <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref>.</xref:System.Xml.XmlWriter>"
  overload: System.Configuration.ConfigurationElement.PreSerialize*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.Properties
  id: Properties
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: Properties
  nameWithType: ConfigurationElement.Properties
  fullName: System.Configuration.ConfigurationElement.Properties
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Obtém a coleção de propriedades."
  remarks: "A propriedade de propriedades, também denominada a matriz de propriedades contém todas as propriedades (atributos) que se aplicam ao elemento."
  example:
  - For an example that shows how to use the Properties property, refer to the <xref:System.Configuration.ConfigurationProperty> class.
  syntax:
    content: protected virtual System.Configuration.ConfigurationPropertyCollection Properties { get; }
    return:
      type: System.Configuration.ConfigurationPropertyCollection
      description: "O <xref href=&quot;System.Configuration.ConfigurationPropertyCollection&quot;> </xref> de propriedades para o elemento."
  overload: System.Configuration.ConfigurationElement.Properties*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.Reset(System.Configuration.ConfigurationElement)
  id: Reset(System.Configuration.ConfigurationElement)
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: Reset(ConfigurationElement)
  nameWithType: ConfigurationElement.Reset(ConfigurationElement)
  fullName: System.Configuration.ConfigurationElement.Reset(ConfigurationElement)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Repõe o estado interno do <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> objeto, incluindo os bloqueios e as coleções de propriedades."
  syntax:
    content: protected virtual void Reset (System.Configuration.ConfigurationElement parentElement);
    parameters:
    - id: parentElement
      type: System.Configuration.ConfigurationElement
      description: "O nó principal do elemento de configuração."
  overload: System.Configuration.ConfigurationElement.Reset*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.ResetModified
  id: ResetModified
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: ResetModified()
  nameWithType: ConfigurationElement.ResetModified()
  fullName: System.Configuration.ConfigurationElement.ResetModified()
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Repõe o valor da <xref:System.Configuration.ConfigurationElement.IsModified*>método <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> quando implementado numa classe derivada.</xref:System.Configuration.ConfigurationElement.IsModified*>"
  remarks: "O método ResetModified denomina-se automaticamente após alterações a este <xref:System.Configuration.ConfigurationElement>objeto escritos para o ficheiro de configuração.</xref:System.Configuration.ConfigurationElement>"
  syntax:
    content: protected virtual void ResetModified ();
    parameters: []
  overload: System.Configuration.ConfigurationElement.ResetModified*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.SerializeElement(System.Xml.XmlWriter,System.Boolean)
  id: SerializeElement(System.Xml.XmlWriter,System.Boolean)
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: SerializeElement(XmlWriter,Boolean)
  nameWithType: ConfigurationElement.SerializeElement(XmlWriter,Boolean)
  fullName: System.Configuration.ConfigurationElement.SerializeElement(XmlWriter,Boolean)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Escreve o conteúdo deste elemento de configuração para o ficheiro de configuração quando implementado numa classe derivada."
  remarks: ''
  example:
  - "The following example shows how to extend the SerializeElement method.  \n  \n [!code-cs[System.Configuration.ConfigurationElement#34](~/add/codesnippet/csharp/640dc581-4dbf-4d04-aba6-_1.cs)]\n [!code-vb[System.Configuration.ConfigurationElement#34](~/add/codesnippet/visualbasic/640dc581-4dbf-4d04-aba6-_1.vb)]"
  syntax:
    content: protected virtual bool SerializeElement (System.Xml.XmlWriter writer, bool serializeCollectionKey);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "O <xref:System.Xml.XmlWriter>que escreve no ficheiro de configuração.</xref:System.Xml.XmlWriter>"
    - id: serializeCollectionKey
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>para serializar apenas as principais propriedades de coleção; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se todos os dados, na verdade, foi serializados; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Configuration.ConfigurationElement.SerializeElement*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "O atributo atual está bloqueado com um nível superior da configuração."
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.SerializeToXmlElement(System.Xml.XmlWriter,System.String)
  id: SerializeToXmlElement(System.Xml.XmlWriter,System.String)
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: SerializeToXmlElement(XmlWriter,String)
  nameWithType: ConfigurationElement.SerializeToXmlElement(XmlWriter,String)
  fullName: System.Configuration.ConfigurationElement.SerializeToXmlElement(XmlWriter,String)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Grava as etiquetas exterior deste elemento de configuração para o ficheiro de configuração quando implementado numa classe derivada."
  remarks: "O método de SerializeToXmlElement é chamado após a chamada para o <xref:System.Configuration.ConfigurationElement.Unmerge%2A>método durante a serialização.</xref:System.Configuration.ConfigurationElement.Unmerge%2A> O método SerializeToXmlElement escreve terminar o conteúdo do elemento de configuração entre o início e fim etiquetas do elemento. Substitua SerializeToXmlElement para fornecer um método de serialização personalizada."
  syntax:
    content: protected virtual bool SerializeToXmlElement (System.Xml.XmlWriter writer, string elementName);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "O <xref:System.Xml.XmlWriter>que escreve no ficheiro de configuração.</xref:System.Xml.XmlWriter>"
    - id: elementName
      type: System.String
      description: "O nome do <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> para serem escritos."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se escrever foi bem sucedida; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Configuration.ConfigurationElement.SerializeToXmlElement*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: "O elemento tem vários elementos subordinados."
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.SetPropertyValue(System.Configuration.ConfigurationProperty,System.Object,System.Boolean)
  id: SetPropertyValue(System.Configuration.ConfigurationProperty,System.Object,System.Boolean)
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: SetPropertyValue(ConfigurationProperty,Object,Boolean)
  nameWithType: ConfigurationElement.SetPropertyValue(ConfigurationProperty,Object,Boolean)
  fullName: System.Configuration.ConfigurationElement.SetPropertyValue(ConfigurationProperty,Object,Boolean)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Define uma propriedade com o valor especificado."
  syntax:
    content: protected void SetPropertyValue (System.Configuration.ConfigurationProperty prop, object value, bool ignoreLocks);
    parameters:
    - id: prop
      type: System.Configuration.ConfigurationProperty
      description: "A propriedade de elemento definida."
    - id: value
      type: System.Object
      description: "O valor a atribuir à propriedade."
    - id: ignoreLocks
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se os bloqueios na propriedade devem ser ignorados; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Configuration.ConfigurationElement.SetPropertyValue*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "Ocorre se o elemento é só de leitura ou <code> ignoreLocks </code> é <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> , mas os bloqueios não podem ser ignorados."
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.SetReadOnly
  id: SetReadOnly
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: SetReadOnly()
  nameWithType: ConfigurationElement.SetReadOnly()
  fullName: System.Configuration.ConfigurationElement.SetReadOnly()
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Define o <xref:System.Configuration.ConfigurationElement.IsReadOnly*>propriedade para o <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> objeto e todos os subelementos.</xref:System.Configuration.ConfigurationElement.IsReadOnly*>"
  remarks: "Este método é utilizado internamente para reserve desses elementos de configuração do sistema que não podem ser modificados.       Para determinar que elementos podem ser modificados, utilize o <xref:System.Configuration.ConfigurationElement.IsReadOnly%2A>método.</xref:System.Configuration.ConfigurationElement.IsReadOnly%2A>"
  syntax:
    content: protected virtual void SetReadOnly ();
    parameters: []
  overload: System.Configuration.ConfigurationElement.SetReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)
  id: Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: Unmerge(ConfigurationElement,ConfigurationElement,ConfigurationSaveMode)
  nameWithType: ConfigurationElement.Unmerge(ConfigurationElement,ConfigurationElement,ConfigurationSaveMode)
  fullName: System.Configuration.ConfigurationElement.Unmerge(ConfigurationElement,ConfigurationElement,ConfigurationSaveMode)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Modifica a <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> objeto para remover todos os valores que não deverá ser guardados."
  remarks: "Este método é denominado antes do <xref:System.Configuration.ConfigurationElement>objeto é guardado pelo <xref:System.Configuration.Configuration>para remover todos os desnecessárias propriedades de objeto.</xref:System.Configuration.Configuration> </xref:System.Configuration.ConfigurationElement>"
  syntax:
    content: protected virtual void Unmerge (System.Configuration.ConfigurationElement sourceElement, System.Configuration.ConfigurationElement parentElement, System.Configuration.ConfigurationSaveMode saveMode);
    parameters:
    - id: sourceElement
      type: System.Configuration.ConfigurationElement
      description: "A <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> no nível atual que contém uma vista intercalada das propriedades."
    - id: parentElement
      type: System.Configuration.ConfigurationElement
      description: "O elemento principal <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref>, ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se se tratar de nível superior."
    - id: saveMode
      type: System.Configuration.ConfigurationSaveMode
      description: "A <xref href=&quot;System.Configuration.ConfigurationSaveMode&quot;> </xref> que determina cuja propriedade valores a incluir."
  overload: System.Configuration.ConfigurationElement.Unmerge*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Configuration.ConfigurationErrorsException
  parent: System.Configuration
  isExternal: false
  name: ConfigurationErrorsException
  nameWithType: ConfigurationErrorsException
  fullName: System.Configuration.ConfigurationErrorsException
- uid: System.Configuration.ConfigurationException
  parent: System.Configuration
  isExternal: false
  name: ConfigurationException
  nameWithType: ConfigurationException
  fullName: System.Configuration.ConfigurationException
- uid: System.Exception
  isExternal: true
  name: System.Exception
- uid: System.Configuration.ConfigurationElement.#ctor
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: ConfigurationElement()
  nameWithType: ConfigurationElement.ConfigurationElement()
  fullName: System.Configuration.ConfigurationElement.ConfigurationElement()
- uid: System.Configuration.ConfigurationElement.CurrentConfiguration
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: CurrentConfiguration
  nameWithType: ConfigurationElement.CurrentConfiguration
  fullName: System.Configuration.ConfigurationElement.CurrentConfiguration
- uid: System.Configuration.Configuration
  parent: System.Configuration
  isExternal: false
  name: Configuration
  nameWithType: Configuration
  fullName: System.Configuration.Configuration
- uid: System.Configuration.ConfigurationElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: DeserializeElement(XmlReader,Boolean)
  nameWithType: ConfigurationElement.DeserializeElement(XmlReader,Boolean)
  fullName: System.Configuration.ConfigurationElement.DeserializeElement(XmlReader,Boolean)
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Configuration.ConfigurationElement.ElementInformation
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: ElementInformation
  nameWithType: ConfigurationElement.ElementInformation
  fullName: System.Configuration.ConfigurationElement.ElementInformation
- uid: System.Configuration.ElementInformation
  parent: System.Configuration
  isExternal: false
  name: ElementInformation
  nameWithType: ElementInformation
  fullName: System.Configuration.ElementInformation
- uid: System.Configuration.ConfigurationElement.ElementProperty
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: ElementProperty
  nameWithType: ConfigurationElement.ElementProperty
  fullName: System.Configuration.ConfigurationElement.ElementProperty
- uid: System.Configuration.ConfigurationElementProperty
  parent: System.Configuration
  isExternal: false
  name: ConfigurationElementProperty
  nameWithType: ConfigurationElementProperty
  fullName: System.Configuration.ConfigurationElementProperty
- uid: System.Configuration.ConfigurationElement.Equals(System.Object)
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: Equals(Object)
  nameWithType: ConfigurationElement.Equals(Object)
  fullName: System.Configuration.ConfigurationElement.Equals(Object)
- uid: System.Configuration.ConfigurationElement.EvaluationContext
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: EvaluationContext
  nameWithType: ConfigurationElement.EvaluationContext
  fullName: System.Configuration.ConfigurationElement.EvaluationContext
- uid: System.Configuration.ContextInformation
  parent: System.Configuration
  isExternal: false
  name: ContextInformation
  nameWithType: ContextInformation
  fullName: System.Configuration.ContextInformation
- uid: System.Configuration.ConfigurationElement.GetHashCode
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: GetHashCode()
  nameWithType: ConfigurationElement.GetHashCode()
  fullName: System.Configuration.ConfigurationElement.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Configuration.ConfigurationElement.GetTransformedAssemblyString(System.String)
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: GetTransformedAssemblyString(String)
  nameWithType: ConfigurationElement.GetTransformedAssemblyString(String)
  fullName: System.Configuration.ConfigurationElement.GetTransformedAssemblyString(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Configuration.ConfigurationElement.GetTransformedTypeString(System.String)
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: GetTransformedTypeString(String)
  nameWithType: ConfigurationElement.GetTransformedTypeString(String)
  fullName: System.Configuration.ConfigurationElement.GetTransformedTypeString(String)
- uid: System.Configuration.ConfigurationElement.HasContext
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: HasContext
  nameWithType: ConfigurationElement.HasContext
  fullName: System.Configuration.ConfigurationElement.HasContext
- uid: System.Configuration.ConfigurationElement.Init
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: Init()
  nameWithType: ConfigurationElement.Init()
  fullName: System.Configuration.ConfigurationElement.Init()
- uid: System.Configuration.ConfigurationElement.InitializeDefault
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: InitializeDefault()
  nameWithType: ConfigurationElement.InitializeDefault()
  fullName: System.Configuration.ConfigurationElement.InitializeDefault()
- uid: System.Configuration.ConfigurationElement.IsModified
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: IsModified()
  nameWithType: ConfigurationElement.IsModified()
  fullName: System.Configuration.ConfigurationElement.IsModified()
- uid: System.Configuration.ConfigurationElement.IsReadOnly
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: IsReadOnly()
  nameWithType: ConfigurationElement.IsReadOnly()
  fullName: System.Configuration.ConfigurationElement.IsReadOnly()
- uid: System.Configuration.ConfigurationElement.Item(System.Configuration.ConfigurationProperty)
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: Item(ConfigurationProperty)
  nameWithType: ConfigurationElement.Item(ConfigurationProperty)
  fullName: System.Configuration.ConfigurationElement.Item(ConfigurationProperty)
- uid: System.Configuration.ConfigurationProperty
  parent: System.Configuration
  isExternal: false
  name: ConfigurationProperty
  nameWithType: ConfigurationProperty
  fullName: System.Configuration.ConfigurationProperty
- uid: System.Configuration.ConfigurationElement.Item(System.String)
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: Item(String)
  nameWithType: ConfigurationElement.Item(String)
  fullName: System.Configuration.ConfigurationElement.Item(String)
- uid: System.Configuration.ConfigurationElement.ListErrors(System.Collections.IList)
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: ListErrors(IList)
  nameWithType: ConfigurationElement.ListErrors(IList)
  fullName: System.Configuration.ConfigurationElement.ListErrors(IList)
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Configuration.ConfigurationElement.LockAllAttributesExcept
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: LockAllAttributesExcept
  nameWithType: ConfigurationElement.LockAllAttributesExcept
  fullName: System.Configuration.ConfigurationElement.LockAllAttributesExcept
- uid: System.Configuration.ConfigurationLockCollection
  parent: System.Configuration
  isExternal: false
  name: ConfigurationLockCollection
  nameWithType: ConfigurationLockCollection
  fullName: System.Configuration.ConfigurationLockCollection
- uid: System.Configuration.ConfigurationElement.LockAllElementsExcept
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: LockAllElementsExcept
  nameWithType: ConfigurationElement.LockAllElementsExcept
  fullName: System.Configuration.ConfigurationElement.LockAllElementsExcept
- uid: System.Configuration.ConfigurationElement.LockAttributes
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: LockAttributes
  nameWithType: ConfigurationElement.LockAttributes
  fullName: System.Configuration.ConfigurationElement.LockAttributes
- uid: System.Configuration.ConfigurationElement.LockElements
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: LockElements
  nameWithType: ConfigurationElement.LockElements
  fullName: System.Configuration.ConfigurationElement.LockElements
- uid: System.Configuration.ConfigurationElement.LockItem
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: LockItem
  nameWithType: ConfigurationElement.LockItem
  fullName: System.Configuration.ConfigurationElement.LockItem
- uid: System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedAttribute(System.String,System.String)
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: OnDeserializeUnrecognizedAttribute(String,String)
  nameWithType: ConfigurationElement.OnDeserializeUnrecognizedAttribute(String,String)
  fullName: System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedAttribute(String,String)
- uid: System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: OnDeserializeUnrecognizedElement(String,XmlReader)
  nameWithType: ConfigurationElement.OnDeserializeUnrecognizedElement(String,XmlReader)
  fullName: System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedElement(String,XmlReader)
- uid: System.Configuration.ConfigurationElement.OnRequiredPropertyNotFound(System.String)
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: OnRequiredPropertyNotFound(String)
  nameWithType: ConfigurationElement.OnRequiredPropertyNotFound(String)
  fullName: System.Configuration.ConfigurationElement.OnRequiredPropertyNotFound(String)
- uid: System.Configuration.ConfigurationElement.PostDeserialize
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: PostDeserialize()
  nameWithType: ConfigurationElement.PostDeserialize()
  fullName: System.Configuration.ConfigurationElement.PostDeserialize()
- uid: System.Configuration.ConfigurationElement.PreSerialize(System.Xml.XmlWriter)
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: PreSerialize(XmlWriter)
  nameWithType: ConfigurationElement.PreSerialize(XmlWriter)
  fullName: System.Configuration.ConfigurationElement.PreSerialize(XmlWriter)
- uid: System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.Configuration.ConfigurationElement.Properties
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: Properties
  nameWithType: ConfigurationElement.Properties
  fullName: System.Configuration.ConfigurationElement.Properties
- uid: System.Configuration.ConfigurationPropertyCollection
  parent: System.Configuration
  isExternal: false
  name: ConfigurationPropertyCollection
  nameWithType: ConfigurationPropertyCollection
  fullName: System.Configuration.ConfigurationPropertyCollection
- uid: System.Configuration.ConfigurationElement.Reset(System.Configuration.ConfigurationElement)
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: Reset(ConfigurationElement)
  nameWithType: ConfigurationElement.Reset(ConfigurationElement)
  fullName: System.Configuration.ConfigurationElement.Reset(ConfigurationElement)
- uid: System.Configuration.ConfigurationElement
  parent: System.Configuration
  isExternal: false
  name: ConfigurationElement
  nameWithType: ConfigurationElement
  fullName: System.Configuration.ConfigurationElement
- uid: System.Configuration.ConfigurationElement.ResetModified
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: ResetModified()
  nameWithType: ConfigurationElement.ResetModified()
  fullName: System.Configuration.ConfigurationElement.ResetModified()
- uid: System.Configuration.ConfigurationElement.SerializeElement(System.Xml.XmlWriter,System.Boolean)
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: SerializeElement(XmlWriter,Boolean)
  nameWithType: ConfigurationElement.SerializeElement(XmlWriter,Boolean)
  fullName: System.Configuration.ConfigurationElement.SerializeElement(XmlWriter,Boolean)
- uid: System.Configuration.ConfigurationElement.SerializeToXmlElement(System.Xml.XmlWriter,System.String)
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: SerializeToXmlElement(XmlWriter,String)
  nameWithType: ConfigurationElement.SerializeToXmlElement(XmlWriter,String)
  fullName: System.Configuration.ConfigurationElement.SerializeToXmlElement(XmlWriter,String)
- uid: System.Configuration.ConfigurationElement.SetPropertyValue(System.Configuration.ConfigurationProperty,System.Object,System.Boolean)
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: SetPropertyValue(ConfigurationProperty,Object,Boolean)
  nameWithType: ConfigurationElement.SetPropertyValue(ConfigurationProperty,Object,Boolean)
  fullName: System.Configuration.ConfigurationElement.SetPropertyValue(ConfigurationProperty,Object,Boolean)
- uid: System.Configuration.ConfigurationElement.SetReadOnly
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: SetReadOnly()
  nameWithType: ConfigurationElement.SetReadOnly()
  fullName: System.Configuration.ConfigurationElement.SetReadOnly()
- uid: System.Configuration.ConfigurationElement.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: Unmerge(ConfigurationElement,ConfigurationElement,ConfigurationSaveMode)
  nameWithType: ConfigurationElement.Unmerge(ConfigurationElement,ConfigurationElement,ConfigurationSaveMode)
  fullName: System.Configuration.ConfigurationElement.Unmerge(ConfigurationElement,ConfigurationElement,ConfigurationSaveMode)
- uid: System.Configuration.ConfigurationSaveMode
  parent: System.Configuration
  isExternal: false
  name: ConfigurationSaveMode
  nameWithType: ConfigurationSaveMode
  fullName: System.Configuration.ConfigurationSaveMode
- uid: System.Configuration.ConfigurationElement.#ctor*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: ConfigurationElement
  nameWithType: ConfigurationElement.ConfigurationElement
- uid: System.Configuration.ConfigurationElement.CurrentConfiguration*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: CurrentConfiguration
  nameWithType: ConfigurationElement.CurrentConfiguration
- uid: System.Configuration.ConfigurationElement.DeserializeElement*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: DeserializeElement
  nameWithType: ConfigurationElement.DeserializeElement
- uid: System.Configuration.ConfigurationElement.ElementInformation*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: ElementInformation
  nameWithType: ConfigurationElement.ElementInformation
- uid: System.Configuration.ConfigurationElement.ElementProperty*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: ElementProperty
  nameWithType: ConfigurationElement.ElementProperty
- uid: System.Configuration.ConfigurationElement.Equals*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: Equals
  nameWithType: ConfigurationElement.Equals
- uid: System.Configuration.ConfigurationElement.EvaluationContext*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: EvaluationContext
  nameWithType: ConfigurationElement.EvaluationContext
- uid: System.Configuration.ConfigurationElement.GetHashCode*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: GetHashCode
  nameWithType: ConfigurationElement.GetHashCode
- uid: System.Configuration.ConfigurationElement.GetTransformedAssemblyString*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: GetTransformedAssemblyString
  nameWithType: ConfigurationElement.GetTransformedAssemblyString
- uid: System.Configuration.ConfigurationElement.GetTransformedTypeString*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: GetTransformedTypeString
  nameWithType: ConfigurationElement.GetTransformedTypeString
- uid: System.Configuration.ConfigurationElement.HasContext*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: HasContext
  nameWithType: ConfigurationElement.HasContext
- uid: System.Configuration.ConfigurationElement.Init*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: Init
  nameWithType: ConfigurationElement.Init
- uid: System.Configuration.ConfigurationElement.InitializeDefault*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: InitializeDefault
  nameWithType: ConfigurationElement.InitializeDefault
- uid: System.Configuration.ConfigurationElement.IsModified*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: IsModified
  nameWithType: ConfigurationElement.IsModified
- uid: System.Configuration.ConfigurationElement.IsReadOnly*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: IsReadOnly
  nameWithType: ConfigurationElement.IsReadOnly
- uid: System.Configuration.ConfigurationElement.Item*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: Item
  nameWithType: ConfigurationElement.Item
- uid: System.Configuration.ConfigurationElement.ListErrors*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: ListErrors
  nameWithType: ConfigurationElement.ListErrors
- uid: System.Configuration.ConfigurationElement.LockAllAttributesExcept*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: LockAllAttributesExcept
  nameWithType: ConfigurationElement.LockAllAttributesExcept
- uid: System.Configuration.ConfigurationElement.LockAllElementsExcept*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: LockAllElementsExcept
  nameWithType: ConfigurationElement.LockAllElementsExcept
- uid: System.Configuration.ConfigurationElement.LockAttributes*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: LockAttributes
  nameWithType: ConfigurationElement.LockAttributes
- uid: System.Configuration.ConfigurationElement.LockElements*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: LockElements
  nameWithType: ConfigurationElement.LockElements
- uid: System.Configuration.ConfigurationElement.LockItem*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: LockItem
  nameWithType: ConfigurationElement.LockItem
- uid: System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedAttribute*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: OnDeserializeUnrecognizedAttribute
  nameWithType: ConfigurationElement.OnDeserializeUnrecognizedAttribute
- uid: System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedElement*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: OnDeserializeUnrecognizedElement
  nameWithType: ConfigurationElement.OnDeserializeUnrecognizedElement
- uid: System.Configuration.ConfigurationElement.OnRequiredPropertyNotFound*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: OnRequiredPropertyNotFound
  nameWithType: ConfigurationElement.OnRequiredPropertyNotFound
- uid: System.Configuration.ConfigurationElement.PostDeserialize*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: PostDeserialize
  nameWithType: ConfigurationElement.PostDeserialize
- uid: System.Configuration.ConfigurationElement.PreSerialize*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: PreSerialize
  nameWithType: ConfigurationElement.PreSerialize
- uid: System.Configuration.ConfigurationElement.Properties*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: Properties
  nameWithType: ConfigurationElement.Properties
- uid: System.Configuration.ConfigurationElement.Reset*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: Reset
  nameWithType: ConfigurationElement.Reset
- uid: System.Configuration.ConfigurationElement.ResetModified*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: ResetModified
  nameWithType: ConfigurationElement.ResetModified
- uid: System.Configuration.ConfigurationElement.SerializeElement*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: SerializeElement
  nameWithType: ConfigurationElement.SerializeElement
- uid: System.Configuration.ConfigurationElement.SerializeToXmlElement*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: SerializeToXmlElement
  nameWithType: ConfigurationElement.SerializeToXmlElement
- uid: System.Configuration.ConfigurationElement.SetPropertyValue*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: SetPropertyValue
  nameWithType: ConfigurationElement.SetPropertyValue
- uid: System.Configuration.ConfigurationElement.SetReadOnly*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: SetReadOnly
  nameWithType: ConfigurationElement.SetReadOnly
- uid: System.Configuration.ConfigurationElement.Unmerge*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: Unmerge
  nameWithType: ConfigurationElement.Unmerge
