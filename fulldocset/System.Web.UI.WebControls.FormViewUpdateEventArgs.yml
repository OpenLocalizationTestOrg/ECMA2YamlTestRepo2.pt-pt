### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.FormViewUpdateEventArgs
  id: FormViewUpdateEventArgs
  children:
  - System.Web.UI.WebControls.FormViewUpdateEventArgs.#ctor(System.Object)
  - System.Web.UI.WebControls.FormViewUpdateEventArgs.CommandArgument
  - System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys
  - System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues
  - System.Web.UI.WebControls.FormViewUpdateEventArgs.OldValues
  langs:
  - csharp
  name: FormViewUpdateEventArgs
  nameWithType: FormViewUpdateEventArgs
  fullName: System.Web.UI.WebControls.FormViewUpdateEventArgs
  type: Class
  summary: "Provides data for the <xref href=&quot;System.Web.UI.WebControls.FormView.ItemUpdating&quot;></xref> event."
  remarks: "The <xref:System.Web.UI.WebControls.FormView> control raises the <xref:System.Web.UI.WebControls.FormView.ItemUpdating> event when an Update button (a button with its `CommandName` property set to &quot;Update&quot;) within the control is clicked, but before the <xref:System.Web.UI.WebControls.FormView> control updates the record. This allows you to provide an event-handling method that performs a custom routine, such as HTML encoding or validating the values of a record before updating it in the data source, whenever this event occurs.       A FormViewUpdateEventArgs object is passed to the event-handling method, which allows you to determine the value of an optional command argument sent to the <xref:System.Web.UI.WebControls.FormView> control and to indicate whether the update operation should be canceled. To determine the value of the command argument, use the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.CommandArgument%2A> property. To cancel the update operation, set the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property to `true`. If you need to access the original key field values for the record being updated, use the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys%2A> property. The original non-key field values can be accessed by using the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.OldValues%2A> property. Updated values (which include updated key field values, if you allow the user to edit key fields) are accessed using the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues%2A> property.       For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).       For a list of initial property values for an instance of the FormViewUpdateEventArgs class, see the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.%23ctor%2A> constructor."
  example:
  - "The following example demonstrates how to use the FormViewUpdateEventArgs object passed to the event-handling method for the <xref:System.Web.UI.WebControls.FormView.ItemUpdating> event to validate the values entered by the user.  \n  \n [!code-cs[FormViewUpdateEventArgs#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_164_1.aspx)]\n [!code-vb[FormViewUpdateEventArgs#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_164_1.aspx)]"
  syntax:
    content: 'public class FormViewUpdateEventArgs : System.ComponentModel.CancelEventArgs'
  inheritance:
  - System.ComponentModel.CancelEventArgs
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormViewUpdateEventArgs.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.Web.UI.WebControls.FormViewUpdateEventArgs
  langs:
  - csharp
  name: FormViewUpdateEventArgs(Object)
  nameWithType: FormViewUpdateEventArgs.FormViewUpdateEventArgs(Object)
  fullName: System.Web.UI.WebControls.FormViewUpdateEventArgs.FormViewUpdateEventArgs(Object)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Initializes a new instance of the <xref href=&quot;System.Web.UI.WebControls.FormViewUpdateEventArgs&quot;></xref> class."
  remarks: "Use this constructor to initialize a new instance of the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs> class.       The following table shows the initial property value for an instance of the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs> class.      |Property|Initial Value|   |--------------|-------------------|   |<xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.CommandArgument%2A>|The value of the `commandArgument` parameter.|      > [!NOTE] >  This constructor is used primarily by control developers when raising events."
  syntax:
    content: public FormViewUpdateEventArgs (object commandArgument);
    parameters:
    - id: commandArgument
      type: System.Object
      description: "An optional command argument passed to the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control."
  overload: System.Web.UI.WebControls.FormViewUpdateEventArgs.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormViewUpdateEventArgs.CommandArgument
  id: CommandArgument
  parent: System.Web.UI.WebControls.FormViewUpdateEventArgs
  langs:
  - csharp
  name: CommandArgument
  nameWithType: FormViewUpdateEventArgs.CommandArgument
  fullName: System.Web.UI.WebControls.FormViewUpdateEventArgs.CommandArgument
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets the command argument for the update operation passed to the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control."
  remarks: "When you create an Update button for one of the templates in a <xref:System.Web.UI.WebControls.FormView> control, you can optionally specify a command argument for the button by using the <xref:System.Web.UI.WebControls.IButtonControl.CommandArgument%2A?displayProperty=fullName> property. The command argument usually contains any optional information you want to accompany the update command, such as the value for the key field. The <xref:System.Web.UI.WebControls.FormViewInsertEventArgs.CommandArgument%2A> property is provided as a convenient way to determine the value of the Update button&quot;s command argument."
  syntax:
    content: public object CommandArgument { get; }
    return:
      type: System.Object
      description: "The command argument for the update operation passed to the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control."
  overload: System.Web.UI.WebControls.FormViewUpdateEventArgs.CommandArgument*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys
  id: Keys
  parent: System.Web.UI.WebControls.FormViewUpdateEventArgs
  langs:
  - csharp
  name: Keys
  nameWithType: FormViewUpdateEventArgs.Keys
  fullName: System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets a dictionary that contains the original key field name/value pairs for the record to update."
  remarks: "The Keys property contains the original values of the key fields listed in the <xref:System.Web.UI.WebControls.FormView.DataKeyNames%2A> property of a <xref:System.Web.UI.WebControls.FormView> control. Use the Keys property to access the original values of the key fields for the record to update. For example, you can use these values to keep a log of updated records.      > [!NOTE] >  If you allow the user to update the values of the key fields, the Keys property contains the original key field values. The updated values are stored in the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues%2A> property.       The Keys property returns an <xref:System.Collections.Specialized.OrderedDictionary> object that implements the <xref:System.Collections.Specialized.IOrderedDictionary?displayProperty=fullName> interface. The <xref:System.Collections.Specialized.OrderedDictionary> object contains <xref:System.Collections.DictionaryEntry?displayProperty=fullName> objects that represent the fields of the updated record. To access the field names, use the <xref:System.Collections.Specialized.OrderedDictionary.Keys%2A> property of the <xref:System.Collections.Specialized.OrderedDictionary> object. Similarly, you can access the field values by using the <xref:System.Collections.Specialized.OrderedDictionary.Values%2A> property.      > [!NOTE] >  As a shortcut, you can also use the indexer of the <xref:System.Collections.Specialized.OrderedDictionary> object to access the field values directly. Data source controls that rely on the field order (such as <xref:System.Web.UI.WebControls.AccessDataSource>) can access field values only by index."
  example:
  - "The following example demonstrates how to use the Keys property to access the value of the key field for the record being updated.  \n  \n [!code-cs[FormViewUpdateEventArgs#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_878_1.aspx)]\n [!code-vb[FormViewUpdateEventArgs#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_878_1.aspx)]"
  syntax:
    content: public System.Collections.Specialized.IOrderedDictionary Keys { get; }
    return:
      type: System.Collections.Specialized.IOrderedDictionary
      description: "An <xref href=&quot;System.Collections.Specialized.IOrderedDictionary&quot;></xref> that contains a dictionary of the original key field name/value pairs for the record to update."
  overload: System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues
  id: NewValues
  parent: System.Web.UI.WebControls.FormViewUpdateEventArgs
  langs:
  - csharp
  name: NewValues
  nameWithType: FormViewUpdateEventArgs.NewValues
  fullName: System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets a dictionary that contains the new field name/value pairs for the record to update."
  remarks: "Use the NewValues property to access the new field values for the record to update. For example, you can use these values to keep a log of updated records.      > [!NOTE] >  If you allow the user to update the values of the key fields, the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys%2A> property contains the original key field values. The updated values are stored in the NewValues property.       The NewValues property returns an <xref:System.Collections.Specialized.OrderedDictionary> object that implements the <xref:System.Collections.Specialized.IOrderedDictionary?displayProperty=fullName> interface. The <xref:System.Collections.Specialized.OrderedDictionary> object contains <xref:System.Collections.DictionaryEntry?displayProperty=fullName> objects that represent the fields of the updated record. To access the field names, use the <xref:System.Collections.Specialized.OrderedDictionary.Keys%2A> property of the <xref:System.Collections.Specialized.OrderedDictionary> object. Similarly, you can access the field values by using the <xref:System.Collections.Specialized.OrderedDictionary.Values%2A> property.      > [!NOTE] >  As a shortcut, you can also use the indexer of the <xref:System.Collections.Specialized.OrderedDictionary> object to access the field values directly. Data source controls that rely on the field order (such as <xref:System.Web.UI.WebControls.AccessDataSource>) can access field values only by index."
  example:
  - "The following example demonstrates how to use the NewValues property to access the new values entered by the user for the non-key fields of the record being updated.  \n  \n [!code-vb[FormViewUpdatedEventArgs#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1083_1.aspx)]\n [!code-cs[FormViewUpdatedEventArgs#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1083_1.aspx)]"
  syntax:
    content: public System.Collections.Specialized.IOrderedDictionary NewValues { get; }
    return:
      type: System.Collections.Specialized.IOrderedDictionary
      description: "An <xref href=&quot;System.Collections.Specialized.IOrderedDictionary&quot;></xref> that contains a dictionary of the new field name/value pairs for the record to update."
  overload: System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormViewUpdateEventArgs.OldValues
  id: OldValues
  parent: System.Web.UI.WebControls.FormViewUpdateEventArgs
  langs:
  - csharp
  name: OldValues
  nameWithType: FormViewUpdateEventArgs.OldValues
  fullName: System.Web.UI.WebControls.FormViewUpdateEventArgs.OldValues
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets a dictionary that contains the original non-key field name/value pairs for the record to update."
  remarks: "Use the OldValues property to access the original non-key field values for the updated record. For example, you can use these values to keep a log of updated records. Some data source controls, such as the <xref:System.Web.UI.WebControls.SqlDataSource> and <xref:System.Web.UI.WebControls.ObjectDataSource> controls, support conflict detection (optimistic concurrency checking). When the <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> property of one of these controls is set to `ConflictOptions.CompareAllValues`, the original values of the record are compared against the values in the data source before an update operation is performed. If a record has been modified by another user concurrently, the record is not updated.      > [!NOTE] >  The OldValues property does not contain key fields. If you allow the user to update the values of the key fields, the original key field values are stored in the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys%2A> property. The updated values are stored in the <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues%2A> property.       The <xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues%2A> property returns an <xref:System.Collections.Specialized.OrderedDictionary> object that implements the <xref:System.Collections.Specialized.IOrderedDictionary?displayProperty=fullName> interface. The <xref:System.Collections.Specialized.OrderedDictionary> object contains <xref:System.Collections.DictionaryEntry?displayProperty=fullName> objects that represent the fields of the updated record. To access the field names, use the <xref:System.Collections.Specialized.OrderedDictionary.Keys%2A> property of the <xref:System.Collections.Specialized.OrderedDictionary> object. Similarly, you can access the field values by using the <xref:System.Collections.Specialized.OrderedDictionary.Values%2A> property.      > [!NOTE] >  As a shortcut, you can also use the indexer of the <xref:System.Collections.Specialized.OrderedDictionary> object to access the field values directly. Data source controls that rely on the field order (such as <xref:System.Web.UI.WebControls.AccessDataSource>) can access field values only by index."
  example:
  - "The following example demonstrates how to use the OldValues property to access the original values of the non-key fields for the record being updated.  \n  \n [!code-cs[FormViewUpdateEventArgs#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_277_1.aspx)]\n [!code-vb[FormViewUpdateEventArgs#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_277_1.aspx)]"
  syntax:
    content: public System.Collections.Specialized.IOrderedDictionary OldValues { get; }
    return:
      type: System.Collections.Specialized.IOrderedDictionary
      description: "An <xref href=&quot;System.Collections.Specialized.IOrderedDictionary&quot;></xref> that contains a dictionary of the original non-key field name/value pairs for the record to update."
  overload: System.Web.UI.WebControls.FormViewUpdateEventArgs.OldValues*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.CancelEventArgs
  isExternal: false
  name: System.ComponentModel.CancelEventArgs
- uid: System.Web.UI.WebControls.FormViewUpdateEventArgs.#ctor(System.Object)
  parent: System.Web.UI.WebControls.FormViewUpdateEventArgs
  isExternal: false
  name: FormViewUpdateEventArgs(Object)
  nameWithType: FormViewUpdateEventArgs.FormViewUpdateEventArgs(Object)
  fullName: System.Web.UI.WebControls.FormViewUpdateEventArgs.FormViewUpdateEventArgs(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.UI.WebControls.FormViewUpdateEventArgs.CommandArgument
  parent: System.Web.UI.WebControls.FormViewUpdateEventArgs
  isExternal: false
  name: CommandArgument
  nameWithType: FormViewUpdateEventArgs.CommandArgument
  fullName: System.Web.UI.WebControls.FormViewUpdateEventArgs.CommandArgument
- uid: System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys
  parent: System.Web.UI.WebControls.FormViewUpdateEventArgs
  isExternal: false
  name: Keys
  nameWithType: FormViewUpdateEventArgs.Keys
  fullName: System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys
- uid: System.Collections.Specialized.IOrderedDictionary
  parent: System.Collections.Specialized
  isExternal: false
  name: IOrderedDictionary
  nameWithType: IOrderedDictionary
  fullName: System.Collections.Specialized.IOrderedDictionary
- uid: System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues
  parent: System.Web.UI.WebControls.FormViewUpdateEventArgs
  isExternal: false
  name: NewValues
  nameWithType: FormViewUpdateEventArgs.NewValues
  fullName: System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues
- uid: System.Web.UI.WebControls.FormViewUpdateEventArgs.OldValues
  parent: System.Web.UI.WebControls.FormViewUpdateEventArgs
  isExternal: false
  name: OldValues
  nameWithType: FormViewUpdateEventArgs.OldValues
  fullName: System.Web.UI.WebControls.FormViewUpdateEventArgs.OldValues
- uid: System.Web.UI.WebControls.FormViewUpdateEventArgs.#ctor*
  parent: System.Web.UI.WebControls.FormViewUpdateEventArgs
  isExternal: false
  name: FormViewUpdateEventArgs
  nameWithType: FormViewUpdateEventArgs.FormViewUpdateEventArgs
- uid: System.Web.UI.WebControls.FormViewUpdateEventArgs.CommandArgument*
  parent: System.Web.UI.WebControls.FormViewUpdateEventArgs
  isExternal: false
  name: CommandArgument
  nameWithType: FormViewUpdateEventArgs.CommandArgument
- uid: System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys*
  parent: System.Web.UI.WebControls.FormViewUpdateEventArgs
  isExternal: false
  name: Keys
  nameWithType: FormViewUpdateEventArgs.Keys
- uid: System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues*
  parent: System.Web.UI.WebControls.FormViewUpdateEventArgs
  isExternal: false
  name: NewValues
  nameWithType: FormViewUpdateEventArgs.NewValues
- uid: System.Web.UI.WebControls.FormViewUpdateEventArgs.OldValues*
  parent: System.Web.UI.WebControls.FormViewUpdateEventArgs
  isExternal: false
  name: OldValues
  nameWithType: FormViewUpdateEventArgs.OldValues
