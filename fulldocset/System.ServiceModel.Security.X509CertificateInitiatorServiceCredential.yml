### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Security.X509CertificateInitiatorServiceCredential
  id: X509CertificateInitiatorServiceCredential
  children:
  - System.ServiceModel.Security.X509CertificateInitiatorServiceCredential.Authentication
  - System.ServiceModel.Security.X509CertificateInitiatorServiceCredential.Certificate
  - System.ServiceModel.Security.X509CertificateInitiatorServiceCredential.SetCertificate(System.String,System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName)
  - System.ServiceModel.Security.X509CertificateInitiatorServiceCredential.SetCertificate(System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.X509FindType,System.Object)
  langs:
  - csharp
  name: X509CertificateInitiatorServiceCredential
  nameWithType: X509CertificateInitiatorServiceCredential
  fullName: System.ServiceModel.Security.X509CertificateInitiatorServiceCredential
  type: Class
  summary: "Represents the settings used by the service to validate the certificate presented by the clients. It also contains a certificate for the service to use for encrypting responses or callbacks for clients when <xref uid=&quot;langword_csharp_MutualCertificateDuplex&quot; name=&quot;MutualCertificateDuplex&quot; href=&quot;&quot;></xref> message security authentication mode is used."
  remarks: "The certificate set in this class is used to encrypt messages to the client only for bindings that are configured with `MutualCertificateDuplex` message security authentication mode."
  syntax:
    content: public sealed class X509CertificateInitiatorServiceCredential
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.ServiceModel.Security.X509CertificateInitiatorServiceCredential.Authentication
  id: Authentication
  parent: System.ServiceModel.Security.X509CertificateInitiatorServiceCredential
  langs:
  - csharp
  name: Authentication
  nameWithType: X509CertificateInitiatorServiceCredential.Authentication
  fullName: System.ServiceModel.Security.X509CertificateInitiatorServiceCredential.Authentication
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Security
  summary: "Gets the settings used to validate the certificate presented by the client during authentication."
  remarks: ''
  example:
  - "The following code shows how to use this property to set the certificate authentication properties.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public System.ServiceModel.Security.X509ClientCertificateAuthentication Authentication { get; }
    return:
      type: System.ServiceModel.Security.X509ClientCertificateAuthentication
      description: "The settings used to validate the certificate presented by the client during authentication."
  overload: System.ServiceModel.Security.X509CertificateInitiatorServiceCredential.Authentication*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Security.X509CertificateInitiatorServiceCredential.Certificate
  id: Certificate
  parent: System.ServiceModel.Security.X509CertificateInitiatorServiceCredential
  langs:
  - csharp
  name: Certificate
  nameWithType: X509CertificateInitiatorServiceCredential.Certificate
  fullName: System.ServiceModel.Security.X509CertificateInitiatorServiceCredential.Certificate
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Security
  summary: "Gets or sets the certificate to use in <xref uid=&quot;langword_csharp_MutualCertificateDuplex&quot; name=&quot;MutualCertificateDuplex&quot; href=&quot;&quot;></xref> message security authentication mode."
  remarks: "This property is used for bindings that are configured to message security mode when `MutualCertificateDuplex` message security authentication mode is used."
  example:
  - "The following code shows how to use this property to get the certificate.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public System.Security.Cryptography.X509Certificates.X509Certificate2 Certificate { get; set; }
    return:
      type: System.Security.Cryptography.X509Certificates.X509Certificate2
      description: "The <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;></xref> to use to encrypt messages sent to the client by the service in the uncorrelated duplex transport case if the <xref uid=&quot;langword_csharp_MutualCertificateDuplex&quot; name=&quot;MutualCertificateDuplex&quot; href=&quot;&quot;></xref> message security authentication mode is used."
  overload: System.ServiceModel.Security.X509CertificateInitiatorServiceCredential.Certificate*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "An attempt was made to set a read-only credential."
  platform:
  - net462
- uid: System.ServiceModel.Security.X509CertificateInitiatorServiceCredential.SetCertificate(System.String,System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName)
  id: SetCertificate(System.String,System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName)
  parent: System.ServiceModel.Security.X509CertificateInitiatorServiceCredential
  langs:
  - csharp
  name: SetCertificate(String,StoreLocation,StoreName)
  nameWithType: X509CertificateInitiatorServiceCredential.SetCertificate(String,StoreLocation,StoreName)
  fullName: System.ServiceModel.Security.X509CertificateInitiatorServiceCredential.SetCertificate(String,StoreLocation,StoreName)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Security
  summary: "Enables you to specify the certificate to use for encrypting messages for the client by specifying the subject distinguished name. This setting is used only by bindings that are configured with the <xref uid=&quot;langword_csharp_MutualCertificateDuplex&quot; name=&quot;MutualCertificateDuplex&quot; href=&quot;&quot;></xref> message security authentication mode."
  remarks: "[!INCLUDE[crabout](~/add/includes/ajax-current-ext-md.md)] the `subjectName` parameter, see <xref:System.Security.Cryptography.X509Certificates.X509Certificate2.SubjectName%2A>.       Values for `storeLocation` are included in the <xref:System.Security.Cryptography.X509Certificates.StoreLocation> enumeration:      -   <xref:System.Security.Cryptography.X509Certificates.StoreLocation>: the certificate store assigned to the local machine (default).      -   <xref:System.Security.Cryptography.X509Certificates.StoreLocation>: the certificate store used by the current user.       If the client application is running under a system account, then the certificate is typically in <xref:System.Security.Cryptography.X509Certificates.StoreLocation>. If the client application is running under a user account, then the certificate is typically in <xref:System.Security.Cryptography.X509Certificates.StoreLocation>.       Values for `storeName` are included in the <xref:System.Security.Cryptography.X509Certificates.StoreName> enumeration."
  example:
  - "The following code shows how to use this method to set the certificate.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public void SetCertificate (string subjectName, System.Security.Cryptography.X509Certificates.StoreLocation storeLocation, System.Security.Cryptography.X509Certificates.StoreName storeName);
    parameters:
    - id: subjectName
      type: System.String
      description: "The subject distinguished name."
    - id: storeLocation
      type: System.Security.Cryptography.X509Certificates.StoreLocation
      description: "The location of the certificate store that the service uses to obtain the certificate."
    - id: storeName
      type: System.Security.Cryptography.X509Certificates.StoreName
      description: "The name of the X.509 certificate store to open."
  overload: System.ServiceModel.Security.X509CertificateInitiatorServiceCredential.SetCertificate*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Security.X509CertificateInitiatorServiceCredential.SetCertificate(System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.X509FindType,System.Object)
  id: SetCertificate(System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.X509FindType,System.Object)
  parent: System.ServiceModel.Security.X509CertificateInitiatorServiceCredential
  langs:
  - csharp
  name: SetCertificate(StoreLocation,StoreName,X509FindType,Object)
  nameWithType: X509CertificateInitiatorServiceCredential.SetCertificate(StoreLocation,StoreName,X509FindType,Object)
  fullName: System.ServiceModel.Security.X509CertificateInitiatorServiceCredential.SetCertificate(StoreLocation,StoreName,X509FindType,Object)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Security
  summary: "Specifies the certificate to use for encrypting messages for the client. This setting is used only by bindings that are configured with the <xref uid=&quot;langword_csharp_MutualCertificateDuplex&quot; name=&quot;MutualCertificateDuplex&quot; href=&quot;&quot;></xref> message security authentication mode."
  remarks: "Values for `storeLocation` are included in the <xref:System.Security.Cryptography.X509Certificates.StoreLocation> enumeration:      -   <xref:System.Security.Cryptography.X509Certificates.StoreLocation>: the certificate store assigned to the local machine (default).      -   <xref:System.Security.Cryptography.X509Certificates.StoreLocation>: the certificate store used by the current user.       If the application is running under a system account, then the certificate is typically in <xref:System.Security.Cryptography.X509Certificates.StoreLocation>. If the application is running under a user account, then the certificate is typically in <xref:System.Security.Cryptography.X509Certificates.StoreLocation>.       Values for `storeName` are included in the <xref:System.Security.Cryptography.X509Certificates.StoreName> enumeration.       Values for `findType` are included in the <xref:System.Security.Cryptography.X509Certificates.X509FindType> enumeration.       The most commonly used enumeration is <xref:System.Security.Cryptography.X509Certificates.X509FindType>, which does a case-insensitive search on the subject name of certificates in the specified store. This can be an imprecise search. If no certificates or multiple certificates that match the criteria are found, an <xref:System.InvalidOperationException> is thrown."
  example:
  - "The following code shows how to use this method to set the certificate.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public void SetCertificate (System.Security.Cryptography.X509Certificates.StoreLocation storeLocation, System.Security.Cryptography.X509Certificates.StoreName storeName, System.Security.Cryptography.X509Certificates.X509FindType findType, object findValue);
    parameters:
    - id: storeLocation
      type: System.Security.Cryptography.X509Certificates.StoreLocation
      description: "The location of the certificate store that the service uses to obtain the certificate."
    - id: storeName
      type: System.Security.Cryptography.X509Certificates.StoreName
      description: "The name of the X.509 certificate store to open."
    - id: findType
      type: System.Security.Cryptography.X509Certificates.X509FindType
      description: "The type of X.509 search to be executed."
    - id: findValue
      type: System.Object
      description: "The value to search for in the X.509 certificate store."
  overload: System.ServiceModel.Security.X509CertificateInitiatorServiceCredential.SetCertificate*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ServiceModel.Security.X509CertificateInitiatorServiceCredential.Authentication
  parent: System.ServiceModel.Security.X509CertificateInitiatorServiceCredential
  isExternal: false
  name: Authentication
  nameWithType: X509CertificateInitiatorServiceCredential.Authentication
  fullName: System.ServiceModel.Security.X509CertificateInitiatorServiceCredential.Authentication
- uid: System.ServiceModel.Security.X509ClientCertificateAuthentication
  parent: System.ServiceModel.Security
  isExternal: false
  name: X509ClientCertificateAuthentication
  nameWithType: X509ClientCertificateAuthentication
  fullName: System.ServiceModel.Security.X509ClientCertificateAuthentication
- uid: System.ServiceModel.Security.X509CertificateInitiatorServiceCredential.Certificate
  parent: System.ServiceModel.Security.X509CertificateInitiatorServiceCredential
  isExternal: false
  name: Certificate
  nameWithType: X509CertificateInitiatorServiceCredential.Certificate
  fullName: System.ServiceModel.Security.X509CertificateInitiatorServiceCredential.Certificate
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X509Certificate2
  nameWithType: X509Certificate2
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2
- uid: System.ServiceModel.Security.X509CertificateInitiatorServiceCredential.SetCertificate(System.String,System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName)
  parent: System.ServiceModel.Security.X509CertificateInitiatorServiceCredential
  isExternal: false
  name: SetCertificate(String,StoreLocation,StoreName)
  nameWithType: X509CertificateInitiatorServiceCredential.SetCertificate(String,StoreLocation,StoreName)
  fullName: System.ServiceModel.Security.X509CertificateInitiatorServiceCredential.SetCertificate(String,StoreLocation,StoreName)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.X509Certificates.StoreLocation
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: StoreLocation
  nameWithType: StoreLocation
  fullName: System.Security.Cryptography.X509Certificates.StoreLocation
- uid: System.Security.Cryptography.X509Certificates.StoreName
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: StoreName
  nameWithType: StoreName
  fullName: System.Security.Cryptography.X509Certificates.StoreName
- uid: System.ServiceModel.Security.X509CertificateInitiatorServiceCredential.SetCertificate(System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.X509FindType,System.Object)
  parent: System.ServiceModel.Security.X509CertificateInitiatorServiceCredential
  isExternal: false
  name: SetCertificate(StoreLocation,StoreName,X509FindType,Object)
  nameWithType: X509CertificateInitiatorServiceCredential.SetCertificate(StoreLocation,StoreName,X509FindType,Object)
  fullName: System.ServiceModel.Security.X509CertificateInitiatorServiceCredential.SetCertificate(StoreLocation,StoreName,X509FindType,Object)
- uid: System.Security.Cryptography.X509Certificates.X509FindType
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X509FindType
  nameWithType: X509FindType
  fullName: System.Security.Cryptography.X509Certificates.X509FindType
- uid: System.ServiceModel.Security.X509CertificateInitiatorServiceCredential.Authentication*
  parent: System.ServiceModel.Security.X509CertificateInitiatorServiceCredential
  isExternal: false
  name: Authentication
  nameWithType: X509CertificateInitiatorServiceCredential.Authentication
- uid: System.ServiceModel.Security.X509CertificateInitiatorServiceCredential.Certificate*
  parent: System.ServiceModel.Security.X509CertificateInitiatorServiceCredential
  isExternal: false
  name: Certificate
  nameWithType: X509CertificateInitiatorServiceCredential.Certificate
- uid: System.ServiceModel.Security.X509CertificateInitiatorServiceCredential.SetCertificate*
  parent: System.ServiceModel.Security.X509CertificateInitiatorServiceCredential
  isExternal: false
  name: SetCertificate
  nameWithType: X509CertificateInitiatorServiceCredential.SetCertificate
