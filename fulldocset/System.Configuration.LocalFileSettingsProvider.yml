### YamlMime:ManagedReference
items:
- uid: System.Configuration.LocalFileSettingsProvider
  id: LocalFileSettingsProvider
  children:
  - System.Configuration.LocalFileSettingsProvider.#ctor
  - System.Configuration.LocalFileSettingsProvider.ApplicationName
  - System.Configuration.LocalFileSettingsProvider.GetPreviousVersion(System.Configuration.SettingsContext,System.Configuration.SettingsProperty)
  - System.Configuration.LocalFileSettingsProvider.GetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)
  - System.Configuration.LocalFileSettingsProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)
  - System.Configuration.LocalFileSettingsProvider.Reset(System.Configuration.SettingsContext)
  - System.Configuration.LocalFileSettingsProvider.SetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyValueCollection)
  - System.Configuration.LocalFileSettingsProvider.Upgrade(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)
  langs:
  - csharp
  name: LocalFileSettingsProvider
  nameWithType: LocalFileSettingsProvider
  fullName: System.Configuration.LocalFileSettingsProvider
  type: Class
  summary: "Provides persistence for application settings classes."
  remarks: "Setting providers define a mechanism for storing configuration data used in the application settings architecture. The [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] contains a single default settings provider, LocalFileSettingsProvider, which stores configuration data to the local file system. An application settings property or group of properties are associated to a specific settings provider through the use of the <xref:System.Configuration.SettingsProviderAttribute>.       Typically, the client program does not explicitly access this class; rather, the application settings architecture automatically invokes the appropriate settings provider when its services are required. For example, many of the members of <xref:System.Configuration.ApplicationSettingsBase> delegate their work to the associated settings provider.       LocalFileSettingsProvider persists settings to configuration files that have the extension `.config`. The contents of configuration files are structured as XML documents. Depending on whether the setting is scoped at either the application-level or user-level, the configuration data is stored as elements within an `<applicationSettings>` or a `<userSettings>` section group, respectively. Each of these section groups is represented by a corresponding <xref:System.Configuration.AppSettingsSection> or <xref:System.Configuration.ClientSettingsSection>, respectively. Each section object is owned and administered by a configuration section handler, which is an object of type <xref:System.Configuration.IConfigurationSectionHandler>.       Application-scoped settings and the default user-scoped settings are stored in a file named `application.exe.config`, which is created in the same directory as the executable file. Application configuration settings are read-only. Specific user data is stored in a file named `user.config`, stored under the user&quot;s home directory. If roaming profiles are enabled, two versions of the user configuration file could exist. In such a case, the entries in the roaming version take precedence over duplicated entries in the local user configuration file.       For more information about application settings, see [Application Settings for Windows Forms](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: 'public class LocalFileSettingsProvider : System.Configuration.SettingsProvider, System.Configuration.IApplicationSettingsProvider'
  inheritance:
  - System.Object
  - System.Configuration.Provider.ProviderBase
  - System.Configuration.SettingsProvider
  implements:
  - System.Configuration.IApplicationSettingsProvider
  inheritedMembers:
  - System.Configuration.Provider.ProviderBase.Description
  - System.Configuration.Provider.ProviderBase.Name
  platform:
  - net462
- uid: System.Configuration.LocalFileSettingsProvider.#ctor
  id: '#ctor'
  parent: System.Configuration.LocalFileSettingsProvider
  langs:
  - csharp
  name: LocalFileSettingsProvider()
  nameWithType: LocalFileSettingsProvider.LocalFileSettingsProvider()
  fullName: System.Configuration.LocalFileSettingsProvider.LocalFileSettingsProvider()
  type: Constructor
  assemblies:
  - System
  namespace: System.Configuration
  summary: "Initializes a new instance of the <xref href=&quot;System.Configuration.LocalFileSettingsProvider&quot;></xref> class."
  remarks: "The default constructor sets the <xref:System.Configuration.LocalFileSettingsProvider.ApplicationName%2A> property to <xref:System.String.Empty>."
  syntax:
    content: public LocalFileSettingsProvider ();
    parameters: []
  overload: System.Configuration.LocalFileSettingsProvider.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.LocalFileSettingsProvider.ApplicationName
  id: ApplicationName
  parent: System.Configuration.LocalFileSettingsProvider
  langs:
  - csharp
  name: ApplicationName
  nameWithType: LocalFileSettingsProvider.ApplicationName
  fullName: System.Configuration.LocalFileSettingsProvider.ApplicationName
  type: Property
  assemblies:
  - System
  namespace: System.Configuration
  summary: "Gets or sets the name of the currently running application."
  remarks: "The ApplicationName and <xref:System.Configuration.Provider.ProviderBase.Name%2A> properties help to disambiguate similarly named setting properties in different applications."
  syntax:
    content: public override string ApplicationName { get; set; }
    return:
      type: System.String
      description: "A string that contains the application&quot;s display name."
  overload: System.Configuration.LocalFileSettingsProvider.ApplicationName*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.LocalFileSettingsProvider.GetPreviousVersion(System.Configuration.SettingsContext,System.Configuration.SettingsProperty)
  id: GetPreviousVersion(System.Configuration.SettingsContext,System.Configuration.SettingsProperty)
  parent: System.Configuration.LocalFileSettingsProvider
  langs:
  - csharp
  name: GetPreviousVersion(SettingsContext,SettingsProperty)
  nameWithType: LocalFileSettingsProvider.GetPreviousVersion(SettingsContext,SettingsProperty)
  fullName: System.Configuration.LocalFileSettingsProvider.GetPreviousVersion(SettingsContext,SettingsProperty)
  type: Method
  assemblies:
  - System
  namespace: System.Configuration
  summary: "Returns the value of the named settings property for the previous version of the same application."
  remarks: "The GetPreviousVersion method is often used in conjunction with the <xref:System.Configuration.LocalFileSettingsProvider.Upgrade%2A> method when migrating application settings during the installation of a new version of an application. For more information, see the <xref:System.Configuration.LocalFileSettingsProvider.Upgrade%2A> method."
  syntax:
    content: public System.Configuration.SettingsPropertyValue GetPreviousVersion (System.Configuration.SettingsContext context, System.Configuration.SettingsProperty property);
    parameters:
    - id: context
      type: System.Configuration.SettingsContext
      description: "A <xref href=&quot;System.Configuration.SettingsContext&quot;></xref> that describes where the application settings property is used."
    - id: property
      type: System.Configuration.SettingsProperty
      description: "The <xref href=&quot;System.Configuration.SettingsProperty&quot;></xref> whose value is to be returned."
    return:
      type: System.Configuration.SettingsPropertyValue
      description: "A <xref href=&quot;System.Configuration.SettingsPropertyValue&quot;></xref> representing the application setting if found; otherwise, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Configuration.LocalFileSettingsProvider.GetPreviousVersion*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.LocalFileSettingsProvider.GetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)
  id: GetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)
  parent: System.Configuration.LocalFileSettingsProvider
  langs:
  - csharp
  name: GetPropertyValues(SettingsContext,SettingsPropertyCollection)
  nameWithType: LocalFileSettingsProvider.GetPropertyValues(SettingsContext,SettingsPropertyCollection)
  fullName: System.Configuration.LocalFileSettingsProvider.GetPropertyValues(SettingsContext,SettingsPropertyCollection)
  type: Method
  assemblies:
  - System
  namespace: System.Configuration
  summary: "Returns the collection of setting property values for the specified application instance and settings property group."
  remarks: "The GetPropertyValues method also manages the special application settings type <xref:System.Configuration.SpecialSetting>. Connection strings are stored in a special section of the configuration file delimited by the element `<connectionstrings>`.      > [!CAUTION] >  <xref:System.Configuration.LocalFileSettingsProvider> does not use encryption to persist any settings. Therefore, do not store plain text passwords or other sensitive information using this provider without taking additional precautions, such as separately encrypting the information within the configuration file. For more information, see [Encrypting Configuration Information Using Protected Configuration](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public override System.Configuration.SettingsPropertyValueCollection GetPropertyValues (System.Configuration.SettingsContext context, System.Configuration.SettingsPropertyCollection properties);
    parameters:
    - id: context
      type: System.Configuration.SettingsContext
      description: "A <xref href=&quot;System.Configuration.SettingsContext&quot;></xref> describing the current application usage."
    - id: properties
      type: System.Configuration.SettingsPropertyCollection
      description: "A <xref href=&quot;System.Configuration.SettingsPropertyCollection&quot;></xref> containing the settings property group whose values are to be retrieved."
    return:
      type: System.Configuration.SettingsPropertyValueCollection
      description: "A <xref href=&quot;System.Configuration.SettingsPropertyValueCollection&quot;></xref> containing the values for the specified settings property group."
  overload: System.Configuration.LocalFileSettingsProvider.GetPropertyValues*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "A user-scoped setting was encountered but the current configuration only supports application-scoped settings."
  platform:
  - net462
- uid: System.Configuration.LocalFileSettingsProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)
  id: Initialize(System.String,System.Collections.Specialized.NameValueCollection)
  parent: System.Configuration.LocalFileSettingsProvider
  langs:
  - csharp
  name: Initialize(String,NameValueCollection)
  nameWithType: LocalFileSettingsProvider.Initialize(String,NameValueCollection)
  fullName: System.Configuration.LocalFileSettingsProvider.Initialize(String,NameValueCollection)
  type: Method
  assemblies:
  - System
  namespace: System.Configuration
  summary: "Initializes the provider."
  syntax:
    content: public override void Initialize (string name, System.Collections.Specialized.NameValueCollection values);
    parameters:
    - id: name
      type: System.String
      description: "The friendly name of the provider."
    - id: values
      type: System.Collections.Specialized.NameValueCollection
      description: "A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider."
  overload: System.Configuration.LocalFileSettingsProvider.Initialize*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.LocalFileSettingsProvider.Reset(System.Configuration.SettingsContext)
  id: Reset(System.Configuration.SettingsContext)
  parent: System.Configuration.LocalFileSettingsProvider
  langs:
  - csharp
  name: Reset(SettingsContext)
  nameWithType: LocalFileSettingsProvider.Reset(SettingsContext)
  fullName: System.Configuration.LocalFileSettingsProvider.Reset(SettingsContext)
  type: Method
  assemblies:
  - System
  namespace: System.Configuration
  summary: "Resets all application settings properties associated with the specified application to their default values."
  remarks: "The Reset method restores the stored values of the specified application settings group. The action of Reset depends on the scope of the application settings property:      -   Application-scoped settings are not affected.      -   User-scoped settings are reset to the default values that are stored as read-only entries in the application configuration file, `application.exe.config`. If roaming profiles are being used, any application settings values in the roaming profile take precedence over duplicates found in the local profile.       Notice that if roaming profiles are used, there can be two `user.config` files, one for the local settings and one for the roaming profile."
  syntax:
    content: public void Reset (System.Configuration.SettingsContext context);
    parameters:
    - id: context
      type: System.Configuration.SettingsContext
      description: "A <xref href=&quot;System.Configuration.SettingsContext&quot;></xref> describing the current application usage."
  overload: System.Configuration.LocalFileSettingsProvider.Reset*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "A user-scoped setting was encountered but the current configuration only supports application-scoped settings."
  platform:
  - net462
- uid: System.Configuration.LocalFileSettingsProvider.SetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyValueCollection)
  id: SetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyValueCollection)
  parent: System.Configuration.LocalFileSettingsProvider
  langs:
  - csharp
  name: SetPropertyValues(SettingsContext,SettingsPropertyValueCollection)
  nameWithType: LocalFileSettingsProvider.SetPropertyValues(SettingsContext,SettingsPropertyValueCollection)
  fullName: System.Configuration.LocalFileSettingsProvider.SetPropertyValues(SettingsContext,SettingsPropertyValueCollection)
  type: Method
  assemblies:
  - System
  namespace: System.Configuration
  summary: "Sets the values of the specified group of property settings."
  remarks: "A settings wrapper class, derived from <xref:System.Configuration.ApplicationSettingsBase>, contains the <xref:System.Configuration.ApplicationSettingsBase.Save%2A> method, which is called to persist the values of all of its settings properties. This method enumerates through all the settings providers associated with its settings properties, and calls the <xref:System.Configuration.SettingsProvider.SetPropertyValues%2A> method for each <xref:System.Configuration.SettingsProvider> to perform the actual serialization operation.       SetPropertyValues individually serializes each user-scoped application settings property to its corresponding application setting in the appropriate `user.config` configuration file.       By default, the SetPropertyValues method uses the following logical sequence to determine the serialization scheme, depending on type of the settings property:      1.  If the type has an associated <xref:System.ComponentModel.TypeConverter> with a <xref:System.ComponentModel.TypeConverter.ConvertToString%2A> method implementation, this conversion is used.      2.  XML serialization is used.       However, you can specify a preferred serialization mechanism by using the <xref:System.Configuration.SettingsSerializeAsAttribute>. <xref:System.Configuration.LocalFileSettingsProvider> does not support binary serialization in [!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)].       If a user-scoped settings property is set back to its default value explicitly, then the local file settings provider will remove the entry for the associated setting from the user configuration file. The next read access for this property will simply use the default value.      > [!CAUTION] >  <xref:System.Configuration.LocalFileSettingsProvider> does not use encryption to persist any settings. Therefore, do not store plain text passwords or other sensitive information using this provider without taking additional precautions, such as separately encrypting the information within the configuration file. For more information, see [Encrypting Configuration Information Using Protected Configuration](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public override void SetPropertyValues (System.Configuration.SettingsContext context, System.Configuration.SettingsPropertyValueCollection values);
    parameters:
    - id: context
      type: System.Configuration.SettingsContext
      description: "A <xref href=&quot;System.Configuration.SettingsContext&quot;></xref> describing the current application usage."
    - id: values
      type: System.Configuration.SettingsPropertyValueCollection
      description: "A <xref href=&quot;System.Configuration.SettingsPropertyValueCollection&quot;></xref> representing the group of property settings to set."
  overload: System.Configuration.LocalFileSettingsProvider.SetPropertyValues*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "A user-scoped setting was encountered but the current configuration only supports application-scoped settings.       -or-       There was a general failure saving the settings to the configuration file."
  platform:
  - net462
- uid: System.Configuration.LocalFileSettingsProvider.Upgrade(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)
  id: Upgrade(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)
  parent: System.Configuration.LocalFileSettingsProvider
  langs:
  - csharp
  name: Upgrade(SettingsContext,SettingsPropertyCollection)
  nameWithType: LocalFileSettingsProvider.Upgrade(SettingsContext,SettingsPropertyCollection)
  fullName: System.Configuration.LocalFileSettingsProvider.Upgrade(SettingsContext,SettingsPropertyCollection)
  type: Method
  assemblies:
  - System
  namespace: System.Configuration
  summary: "Attempts to migrate previous user-scoped settings from a previous version of the same application."
  remarks: "<xref:System.Configuration.LocalFileSettingsProvider> migrates the local and roaming settings in separate operations.       The Upgrade method is suppressed for every application setting that has the <xref:System.Configuration.NoSettingsVersionUpgradeAttribute> applied to it, or to the entire settings wrapper class, derived from <xref:System.Configuration.ApplicationSettingsBase>.       This way this method is called depends on the type of application that is being upgraded:      -   Each version of a [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application is stored in its own isolated installation directory. After a new version of a [!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)] application is installed, and when the new version is first run, internal logic will automatically call Upgrade to migrate all common application settings to the new version. For more information, see [ClickOnce and Application Settings](~/add/includes/ajax-current-ext-md.md).      -   Standard Windows Forms and console applications must manually call Upgrade, because there is not a general, automatic way to determine when such an application is first run. The two common ways to do this are either from the installation program or using from the application itself, using a persisted property, often named something like `IsFirstRun`.       Note that for the newer version to migrate application settings, it must be able to also load and read the older version of the application settings. Therefore, it must contain wrapper classes compatible with both the new and previous versions of the application."
  syntax:
    content: public void Upgrade (System.Configuration.SettingsContext context, System.Configuration.SettingsPropertyCollection properties);
    parameters:
    - id: context
      type: System.Configuration.SettingsContext
      description: "A <xref href=&quot;System.Configuration.SettingsContext&quot;></xref> describing the current application usage."
    - id: properties
      type: System.Configuration.SettingsPropertyCollection
      description: "A <xref href=&quot;System.Configuration.SettingsPropertyCollection&quot;></xref> containing the settings property group whose values are to be retrieved."
  overload: System.Configuration.LocalFileSettingsProvider.Upgrade*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "A user-scoped setting was encountered but the current configuration only supports application-scoped settings.       -or-       The previous version of the configuration file could not be accessed."
  platform:
  - net462
references:
- uid: System.Configuration.SettingsProvider
  isExternal: false
  name: System.Configuration.SettingsProvider
- uid: System.Configuration.ConfigurationErrorsException
  parent: System.Configuration
  isExternal: false
  name: ConfigurationErrorsException
  nameWithType: ConfigurationErrorsException
  fullName: System.Configuration.ConfigurationErrorsException
- uid: System.Configuration.LocalFileSettingsProvider.#ctor
  parent: System.Configuration.LocalFileSettingsProvider
  isExternal: false
  name: LocalFileSettingsProvider()
  nameWithType: LocalFileSettingsProvider.LocalFileSettingsProvider()
  fullName: System.Configuration.LocalFileSettingsProvider.LocalFileSettingsProvider()
- uid: System.Configuration.LocalFileSettingsProvider.ApplicationName
  parent: System.Configuration.LocalFileSettingsProvider
  isExternal: false
  name: ApplicationName
  nameWithType: LocalFileSettingsProvider.ApplicationName
  fullName: System.Configuration.LocalFileSettingsProvider.ApplicationName
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Configuration.LocalFileSettingsProvider.GetPreviousVersion(System.Configuration.SettingsContext,System.Configuration.SettingsProperty)
  parent: System.Configuration.LocalFileSettingsProvider
  isExternal: false
  name: GetPreviousVersion(SettingsContext,SettingsProperty)
  nameWithType: LocalFileSettingsProvider.GetPreviousVersion(SettingsContext,SettingsProperty)
  fullName: System.Configuration.LocalFileSettingsProvider.GetPreviousVersion(SettingsContext,SettingsProperty)
- uid: System.Configuration.SettingsPropertyValue
  parent: System.Configuration
  isExternal: false
  name: SettingsPropertyValue
  nameWithType: SettingsPropertyValue
  fullName: System.Configuration.SettingsPropertyValue
- uid: System.Configuration.SettingsContext
  parent: System.Configuration
  isExternal: false
  name: SettingsContext
  nameWithType: SettingsContext
  fullName: System.Configuration.SettingsContext
- uid: System.Configuration.SettingsProperty
  parent: System.Configuration
  isExternal: false
  name: SettingsProperty
  nameWithType: SettingsProperty
  fullName: System.Configuration.SettingsProperty
- uid: System.Configuration.LocalFileSettingsProvider.GetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)
  parent: System.Configuration.LocalFileSettingsProvider
  isExternal: false
  name: GetPropertyValues(SettingsContext,SettingsPropertyCollection)
  nameWithType: LocalFileSettingsProvider.GetPropertyValues(SettingsContext,SettingsPropertyCollection)
  fullName: System.Configuration.LocalFileSettingsProvider.GetPropertyValues(SettingsContext,SettingsPropertyCollection)
- uid: System.Configuration.SettingsPropertyValueCollection
  parent: System.Configuration
  isExternal: false
  name: SettingsPropertyValueCollection
  nameWithType: SettingsPropertyValueCollection
  fullName: System.Configuration.SettingsPropertyValueCollection
- uid: System.Configuration.SettingsPropertyCollection
  parent: System.Configuration
  isExternal: false
  name: SettingsPropertyCollection
  nameWithType: SettingsPropertyCollection
  fullName: System.Configuration.SettingsPropertyCollection
- uid: System.Configuration.LocalFileSettingsProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)
  parent: System.Configuration.LocalFileSettingsProvider
  isExternal: false
  name: Initialize(String,NameValueCollection)
  nameWithType: LocalFileSettingsProvider.Initialize(String,NameValueCollection)
  fullName: System.Configuration.LocalFileSettingsProvider.Initialize(String,NameValueCollection)
- uid: System.Collections.Specialized.NameValueCollection
  parent: System.Collections.Specialized
  isExternal: false
  name: NameValueCollection
  nameWithType: NameValueCollection
  fullName: System.Collections.Specialized.NameValueCollection
- uid: System.Configuration.LocalFileSettingsProvider.Reset(System.Configuration.SettingsContext)
  parent: System.Configuration.LocalFileSettingsProvider
  isExternal: false
  name: Reset(SettingsContext)
  nameWithType: LocalFileSettingsProvider.Reset(SettingsContext)
  fullName: System.Configuration.LocalFileSettingsProvider.Reset(SettingsContext)
- uid: System.Configuration.LocalFileSettingsProvider.SetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyValueCollection)
  parent: System.Configuration.LocalFileSettingsProvider
  isExternal: false
  name: SetPropertyValues(SettingsContext,SettingsPropertyValueCollection)
  nameWithType: LocalFileSettingsProvider.SetPropertyValues(SettingsContext,SettingsPropertyValueCollection)
  fullName: System.Configuration.LocalFileSettingsProvider.SetPropertyValues(SettingsContext,SettingsPropertyValueCollection)
- uid: System.Configuration.LocalFileSettingsProvider.Upgrade(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)
  parent: System.Configuration.LocalFileSettingsProvider
  isExternal: false
  name: Upgrade(SettingsContext,SettingsPropertyCollection)
  nameWithType: LocalFileSettingsProvider.Upgrade(SettingsContext,SettingsPropertyCollection)
  fullName: System.Configuration.LocalFileSettingsProvider.Upgrade(SettingsContext,SettingsPropertyCollection)
- uid: System.Configuration.LocalFileSettingsProvider.#ctor*
  parent: System.Configuration.LocalFileSettingsProvider
  isExternal: false
  name: LocalFileSettingsProvider
  nameWithType: LocalFileSettingsProvider.LocalFileSettingsProvider
- uid: System.Configuration.LocalFileSettingsProvider.ApplicationName*
  parent: System.Configuration.LocalFileSettingsProvider
  isExternal: false
  name: ApplicationName
  nameWithType: LocalFileSettingsProvider.ApplicationName
- uid: System.Configuration.LocalFileSettingsProvider.GetPreviousVersion*
  parent: System.Configuration.LocalFileSettingsProvider
  isExternal: false
  name: GetPreviousVersion
  nameWithType: LocalFileSettingsProvider.GetPreviousVersion
- uid: System.Configuration.LocalFileSettingsProvider.GetPropertyValues*
  parent: System.Configuration.LocalFileSettingsProvider
  isExternal: false
  name: GetPropertyValues
  nameWithType: LocalFileSettingsProvider.GetPropertyValues
- uid: System.Configuration.LocalFileSettingsProvider.Initialize*
  parent: System.Configuration.LocalFileSettingsProvider
  isExternal: false
  name: Initialize
  nameWithType: LocalFileSettingsProvider.Initialize
- uid: System.Configuration.LocalFileSettingsProvider.Reset*
  parent: System.Configuration.LocalFileSettingsProvider
  isExternal: false
  name: Reset
  nameWithType: LocalFileSettingsProvider.Reset
- uid: System.Configuration.LocalFileSettingsProvider.SetPropertyValues*
  parent: System.Configuration.LocalFileSettingsProvider
  isExternal: false
  name: SetPropertyValues
  nameWithType: LocalFileSettingsProvider.SetPropertyValues
- uid: System.Configuration.LocalFileSettingsProvider.Upgrade*
  parent: System.Configuration.LocalFileSettingsProvider
  isExternal: false
  name: Upgrade
  nameWithType: LocalFileSettingsProvider.Upgrade
