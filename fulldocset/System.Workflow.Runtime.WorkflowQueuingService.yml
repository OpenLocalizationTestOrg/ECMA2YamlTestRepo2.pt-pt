### YamlMime:ManagedReference
items:
- uid: System.Workflow.Runtime.WorkflowQueuingService
  id: WorkflowQueuingService
  children:
  - System.Workflow.Runtime.WorkflowQueuingService.CreateWorkflowQueue(System.IComparable,System.Boolean)
  - System.Workflow.Runtime.WorkflowQueuingService.DeleteWorkflowQueue(System.IComparable)
  - System.Workflow.Runtime.WorkflowQueuingService.Exists(System.IComparable)
  - System.Workflow.Runtime.WorkflowQueuingService.GetWorkflowQueue(System.IComparable)
  - System.Workflow.Runtime.WorkflowQueuingService.PendingMessagesProperty
  langs:
  - csharp
  name: WorkflowQueuingService
  nameWithType: WorkflowQueuingService
  fullName: System.Workflow.Runtime.WorkflowQueuingService
  type: Class
  summary: "Provides the services for management of <see cref=&quot;T:System.Workflow.Runtime.WorkflowQueue&quot;></see> objects."
  remarks: "> [!NOTE] >  [!INCLUDE[DeprecatedContent](~/add/includes/deprecatedcontent-md.md)]       WorkflowQueuingService provides methods that you can use to manage the workflow queues associated with a workflow instance."
  example:
  - "The following code example demonstrates a method, named `CreateQueue`, that initializes a WorkflowQueuingService object by calling the <xref:System.Workflow.ComponentModel.ActivityExecutionContext.GetService%2A?displayProperty=fullName> method. The code then uses the <xref:System.Workflow.Runtime.WorkflowQueuingService.Exists%2A> method to determine if a <xref:System.Workflow.Runtime.WorkflowQueue> with a specified name exists. If it does not exist, the code calls the <xref:System.Workflow.Runtime.WorkflowQueuingService.CreateWorkflowQueue%2A> method; if it does the code calls the <xref:System.Workflow.Runtime.WorkflowQueuingService.GetWorkflowQueue%2A> method.  \n  \n This code example is part of the File Watcher Activity SDK Sample from the FileSystemEvent.cs file. For more information, see [File System Watcher Activity](http://msdn.microsoft.com/en-us/5442b63a-bdad-43d0-b7cf-f0b5d8b56a99).  \n  \n [!code-cs[WF_Samples#223](~/add/codesnippet/CSharp/wf_snippets/snippets24.cs#223)]\n [!code-vb[WF_Samples#223](~/add/codesnippet/VisualBasic/wf_snippets/snippets24.vb#223)]"
  syntax:
    content: >-
      [System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]

      public class WorkflowQueuingService
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Workflow.Runtime.WorkflowQueuingService.CreateWorkflowQueue(System.IComparable,System.Boolean)
  id: CreateWorkflowQueue(System.IComparable,System.Boolean)
  parent: System.Workflow.Runtime.WorkflowQueuingService
  langs:
  - csharp
  name: CreateWorkflowQueue(IComparable,Boolean)
  nameWithType: WorkflowQueuingService.CreateWorkflowQueue(IComparable,Boolean)
  fullName: System.Workflow.Runtime.WorkflowQueuingService.CreateWorkflowQueue(IComparable,Boolean)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Creates a <see cref=&quot;T:System.Workflow.Runtime.WorkflowQueue&quot;></see> by using the specified name and transactional scope."
  remarks: "A <xref:System.Workflow.Runtime.WorkflowQueue> is created with the specified `queueName`. If transactional is `true`, the <xref:System.Workflow.Runtime.WorkflowQueue> is only visible inside the current transaction."
  example:
  - "The following code example demonstrates a method, named `CreateQueue`, that initializes a <xref:System.Workflow.Runtime.WorkflowQueuingService> object by calling the <xref:System.Workflow.ComponentModel.ActivityExecutionContext.GetService%2A?displayProperty=fullName> method. The code then uses the <xref:System.Workflow.Runtime.WorkflowQueuingService.Exists%2A> method to determine if a <xref:System.Workflow.Runtime.WorkflowQueue> with a specified name exists. If it does not exist, the code calls the CreateWorkflowQueue method; if it does the code calls the <xref:System.Workflow.Runtime.WorkflowQueuingService.GetWorkflowQueue%2A> method.  \n  \n This code example is part of the File Watcher Activity SDK Sample from the FileSystemEvent.cs file. For more information, see [File System Watcher Activity](http://msdn.microsoft.com/en-us/5442b63a-bdad-43d0-b7cf-f0b5d8b56a99).  \n  \n [!code-cs[WF_Samples#223](~/add/codesnippet/CSharp/wf_snippets/snippets24.cs#223)]\n [!code-vb[WF_Samples#223](~/add/codesnippet/VisualBasic/wf_snippets/snippets24.vb#223)]"
  syntax:
    content: public System.Workflow.Runtime.WorkflowQueue CreateWorkflowQueue (IComparable queueName, bool transactional);
    parameters:
    - id: queueName
      type: System.IComparable
      description: "The name of the queue."
    - id: transactional
      type: System.Boolean
      description: "A value that specifies whether the  is visible outside the scope of the current transaction."
    return:
      type: System.Workflow.Runtime.WorkflowQueue
      description: "To be added."
  overload: System.Workflow.Runtime.WorkflowQueuingService.CreateWorkflowQueue*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n    queueName is a null reference ( in Visual Basic)."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A  with the name specified by queueName already exists."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Workflow.Runtime.WorkflowQueuingService.DeleteWorkflowQueue(System.IComparable)
  id: DeleteWorkflowQueue(System.IComparable)
  parent: System.Workflow.Runtime.WorkflowQueuingService
  langs:
  - csharp
  name: DeleteWorkflowQueue(IComparable)
  nameWithType: WorkflowQueuingService.DeleteWorkflowQueue(IComparable)
  fullName: System.Workflow.Runtime.WorkflowQueuingService.DeleteWorkflowQueue(IComparable)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Deletes the specified <see cref=&quot;T:System.Workflow.Runtime.WorkflowQueue&quot;></see>."
  remarks: ''
  example:
  - "The following code example demonstrates a method that writes a string to the console, creates an instance of <xref:System.Workflow.Runtime.WorkflowQueuingService> by calling the <xref:System.Workflow.ComponentModel.ActivityExecutionContext.GetService%2A?displayProperty=fullName> method. Finally, the code calls the DeleteWorkflowQueue method to delete the queue associated with a `QueueName` property on the current workflow.  \n  \n This code example is part of the File Watcher Activity SDK Sample from the FileSystemEvent.cs file. For more information, see [File System Watcher Activity](http://msdn.microsoft.com/en-us/5442b63a-bdad-43d0-b7cf-f0b5d8b56a99).  \n  \n [!code-cs[WF_Samples#224](~/add/codesnippet/CSharp/wf_snippets/snippets24.cs#224)]\n [!code-vb[WF_Samples#224](~/add/codesnippet/VisualBasic/wf_snippets/snippets24.vb#224)]"
  syntax:
    content: public void DeleteWorkflowQueue (IComparable queueName);
    parameters:
    - id: queueName
      type: System.IComparable
      description: "The name of the  to delete."
  overload: System.Workflow.Runtime.WorkflowQueuingService.DeleteWorkflowQueue*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n    queueName is a null reference ( in Visual Basic)."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Workflow.Runtime.WorkflowQueuingService.Exists(System.IComparable)
  id: Exists(System.IComparable)
  parent: System.Workflow.Runtime.WorkflowQueuingService
  langs:
  - csharp
  name: Exists(IComparable)
  nameWithType: WorkflowQueuingService.Exists(IComparable)
  fullName: System.Workflow.Runtime.WorkflowQueuingService.Exists(IComparable)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Tests for the existence of the specified <see cref=&quot;T:System.Workflow.Runtime.WorkflowQueue&quot;></see>."
  remarks: ''
  example:
  - "The following code example demonstrates a method, named `CreateQueue`, that initializes a <xref:System.Workflow.Runtime.WorkflowQueuingService> object by calling the <xref:System.Workflow.ComponentModel.ActivityExecutionContext.GetService%2A?displayProperty=fullName> method. The code then uses the Exists method to determine if a <xref:System.Workflow.Runtime.WorkflowQueue> with a specified name exists. If it does not exist, the code calls the <xref:System.Workflow.Runtime.WorkflowQueuingService.CreateWorkflowQueue%2A> method; if it does the code calls the <xref:System.Workflow.Runtime.WorkflowQueuingService.GetWorkflowQueue%2A> method.  \n  \n This code example is part of the File Watcher Activity SDK Sample from the FileSystemEvent.cs file. For more information, see [File System Watcher Activity](http://msdn.microsoft.com/en-us/5442b63a-bdad-43d0-b7cf-f0b5d8b56a99).  \n  \n [!code-cs[WF_Samples#223](~/add/codesnippet/CSharp/wf_snippets/snippets24.cs#223)]\n [!code-vb[WF_Samples#223](~/add/codesnippet/VisualBasic/wf_snippets/snippets24.vb#223)]"
  syntax:
    content: public bool Exists (IComparable queueName);
    parameters:
    - id: queueName
      type: System.IComparable
      description: "The name of the ."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.Workflow.Runtime.WorkflowQueuingService.Exists*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n    queueName is a null reference ( in Visual Basic)."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Workflow.Runtime.WorkflowQueuingService.GetWorkflowQueue(System.IComparable)
  id: GetWorkflowQueue(System.IComparable)
  parent: System.Workflow.Runtime.WorkflowQueuingService
  langs:
  - csharp
  name: GetWorkflowQueue(IComparable)
  nameWithType: WorkflowQueuingService.GetWorkflowQueue(IComparable)
  fullName: System.Workflow.Runtime.WorkflowQueuingService.GetWorkflowQueue(IComparable)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Retrieves the specified <see cref=&quot;T:System.Workflow.Runtime.WorkflowQueue&quot;></see>."
  remarks: ''
  example:
  - "The following code example demonstrates a method, named `CreateQueue`, that initializes a <xref:System.Workflow.Runtime.WorkflowQueuingService> object by calling the <xref:System.Workflow.ComponentModel.ActivityExecutionContext.GetService%2A?displayProperty=fullName> method. The code then uses the <xref:System.Workflow.Runtime.WorkflowQueuingService.Exists%2A> method to determine if a <xref:System.Workflow.Runtime.WorkflowQueue> with a specified name exists. If it does not exist, the code calls the <xref:System.Workflow.Runtime.WorkflowQueuingService.CreateWorkflowQueue%2A> method; if it does the code calls the GetWorkflowQueue method.  \n  \n This code example is part of the File Watcher Activity SDK Sample from the FileSystemEvent.cs file. For more information, see [File System Watcher Activity](http://msdn.microsoft.com/en-us/5442b63a-bdad-43d0-b7cf-f0b5d8b56a99).  \n  \n [!code-cs[WF_Samples#223](~/add/codesnippet/CSharp/wf_snippets/snippets24.cs#223)]\n [!code-vb[WF_Samples#223](~/add/codesnippet/VisualBasic/wf_snippets/snippets24.vb#223)]"
  syntax:
    content: public System.Workflow.Runtime.WorkflowQueue GetWorkflowQueue (IComparable queueName);
    parameters:
    - id: queueName
      type: System.IComparable
      description: "The name of the  to retrieve."
    return:
      type: System.Workflow.Runtime.WorkflowQueue
      description: "To be added."
  overload: System.Workflow.Runtime.WorkflowQueuingService.GetWorkflowQueue*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n    queueName is a null reference ( in Visual Basic)."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The specified  was not found."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Workflow.Runtime.WorkflowQueuingService.PendingMessagesProperty
  id: PendingMessagesProperty
  parent: System.Workflow.Runtime.WorkflowQueuingService
  langs:
  - csharp
  name: PendingMessagesProperty
  nameWithType: WorkflowQueuingService.PendingMessagesProperty
  fullName: System.Workflow.Runtime.WorkflowQueuingService.PendingMessagesProperty
  type: Field
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Contains the unconsumed items in the workflow queues associated with this <see cref=&quot;T:System.Workflow.Runtime.WorkflowQueuingService&quot;></see>."
  remarks: "When a workflow instance completes or terminates all of the unconsumed items in its workflow queues that are associated with this <xref:System.Workflow.Runtime.WorkflowQueuingService> are moved to the PendingMessagesProperty."
  syntax:
    content: public static readonly System.Workflow.ComponentModel.DependencyProperty PendingMessagesProperty;
    return:
      type: System.Workflow.ComponentModel.DependencyProperty
      description: "To be added."
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Workflow.Runtime.WorkflowQueuingService.CreateWorkflowQueue(System.IComparable,System.Boolean)
  parent: System.Workflow.Runtime.WorkflowQueuingService
  isExternal: false
  name: CreateWorkflowQueue(IComparable,Boolean)
  nameWithType: WorkflowQueuingService.CreateWorkflowQueue(IComparable,Boolean)
  fullName: System.Workflow.Runtime.WorkflowQueuingService.CreateWorkflowQueue(IComparable,Boolean)
- uid: System.Workflow.Runtime.WorkflowQueue
  parent: System.Workflow.Runtime
  isExternal: false
  name: WorkflowQueue
  nameWithType: WorkflowQueue
  fullName: System.Workflow.Runtime.WorkflowQueue
- uid: System.IComparable
  parent: System
  isExternal: true
  name: IComparable
  nameWithType: IComparable
  fullName: System.IComparable
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Workflow.Runtime.WorkflowQueuingService.DeleteWorkflowQueue(System.IComparable)
  parent: System.Workflow.Runtime.WorkflowQueuingService
  isExternal: false
  name: DeleteWorkflowQueue(IComparable)
  nameWithType: WorkflowQueuingService.DeleteWorkflowQueue(IComparable)
  fullName: System.Workflow.Runtime.WorkflowQueuingService.DeleteWorkflowQueue(IComparable)
- uid: System.Workflow.Runtime.WorkflowQueuingService.Exists(System.IComparable)
  parent: System.Workflow.Runtime.WorkflowQueuingService
  isExternal: false
  name: Exists(IComparable)
  nameWithType: WorkflowQueuingService.Exists(IComparable)
  fullName: System.Workflow.Runtime.WorkflowQueuingService.Exists(IComparable)
- uid: System.Workflow.Runtime.WorkflowQueuingService.GetWorkflowQueue(System.IComparable)
  parent: System.Workflow.Runtime.WorkflowQueuingService
  isExternal: false
  name: GetWorkflowQueue(IComparable)
  nameWithType: WorkflowQueuingService.GetWorkflowQueue(IComparable)
  fullName: System.Workflow.Runtime.WorkflowQueuingService.GetWorkflowQueue(IComparable)
- uid: System.Workflow.Runtime.WorkflowQueuingService.PendingMessagesProperty
  parent: System.Workflow.Runtime.WorkflowQueuingService
  isExternal: false
  name: PendingMessagesProperty
  nameWithType: WorkflowQueuingService.PendingMessagesProperty
  fullName: System.Workflow.Runtime.WorkflowQueuingService.PendingMessagesProperty
- uid: System.Workflow.ComponentModel.DependencyProperty
  parent: System.Workflow.ComponentModel
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Workflow.ComponentModel.DependencyProperty
- uid: System.Workflow.Runtime.WorkflowQueuingService.CreateWorkflowQueue*
  parent: System.Workflow.Runtime.WorkflowQueuingService
  isExternal: false
  name: CreateWorkflowQueue
  nameWithType: WorkflowQueuingService.CreateWorkflowQueue
- uid: System.Workflow.Runtime.WorkflowQueuingService.DeleteWorkflowQueue*
  parent: System.Workflow.Runtime.WorkflowQueuingService
  isExternal: false
  name: DeleteWorkflowQueue
  nameWithType: WorkflowQueuingService.DeleteWorkflowQueue
- uid: System.Workflow.Runtime.WorkflowQueuingService.Exists*
  parent: System.Workflow.Runtime.WorkflowQueuingService
  isExternal: false
  name: Exists
  nameWithType: WorkflowQueuingService.Exists
- uid: System.Workflow.Runtime.WorkflowQueuingService.GetWorkflowQueue*
  parent: System.Workflow.Runtime.WorkflowQueuingService
  isExternal: false
  name: GetWorkflowQueue
  nameWithType: WorkflowQueuingService.GetWorkflowQueue
