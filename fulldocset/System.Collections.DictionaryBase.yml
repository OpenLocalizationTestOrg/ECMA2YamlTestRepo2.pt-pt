### YamlMime:ManagedReference
items:
- uid: System.Collections.DictionaryBase
  id: DictionaryBase
  children:
  - System.Collections.DictionaryBase.#ctor
  - System.Collections.DictionaryBase.Clear
  - System.Collections.DictionaryBase.CopyTo(System.Array,System.Int32)
  - System.Collections.DictionaryBase.Count
  - System.Collections.DictionaryBase.Dictionary
  - System.Collections.DictionaryBase.GetEnumerator
  - System.Collections.DictionaryBase.InnerHashtable
  - System.Collections.DictionaryBase.OnClear
  - System.Collections.DictionaryBase.OnClearComplete
  - System.Collections.DictionaryBase.OnGet(System.Object,System.Object)
  - System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)
  - System.Collections.DictionaryBase.OnInsertComplete(System.Object,System.Object)
  - System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)
  - System.Collections.DictionaryBase.OnRemoveComplete(System.Object,System.Object)
  - System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)
  - System.Collections.DictionaryBase.OnSetComplete(System.Object,System.Object,System.Object)
  - System.Collections.DictionaryBase.OnValidate(System.Object,System.Object)
  - System.Collections.DictionaryBase.System#Collections#ICollection#IsSynchronized
  - System.Collections.DictionaryBase.System#Collections#ICollection#SyncRoot
  - System.Collections.DictionaryBase.System#Collections#IDictionary#Add(System.Object,System.Object)
  - System.Collections.DictionaryBase.System#Collections#IDictionary#Contains(System.Object)
  - System.Collections.DictionaryBase.System#Collections#IDictionary#IsFixedSize
  - System.Collections.DictionaryBase.System#Collections#IDictionary#IsReadOnly
  - System.Collections.DictionaryBase.System#Collections#IDictionary#Item(System.Object)
  - System.Collections.DictionaryBase.System#Collections#IDictionary#Keys
  - System.Collections.DictionaryBase.System#Collections#IDictionary#Remove(System.Object)
  - System.Collections.DictionaryBase.System#Collections#IDictionary#Values
  - System.Collections.DictionaryBase.System#Collections#IEnumerable#GetEnumerator
  langs:
  - csharp
  name: DictionaryBase
  nameWithType: DictionaryBase
  fullName: System.Collections.DictionaryBase
  type: Class
  summary: "Provides the <xref uid=&quot;langword_csharp_abstract&quot; name=&quot;abstract&quot; href=&quot;&quot;></xref> base class for a strongly typed collection of key/value pairs."
  remarks: "The foreach statement of the C# language (for each in Visual Basic) returns an object of the type of the elements in the collection. Since each element of the DictionaryBase is a key/value pair, the element type is not the type of the key or the type of the value. Instead, the element type is <xref:System.Collections.DictionaryEntry>.       The `foreach` statement is a wrapper around the enumerator, which only allows reading from, not writing to, the collection.      > [!NOTE] >  Because keys can be inherited and their behavior changed, their absolute uniqueness cannot be guaranteed by comparisons using the <xref:System.Type.Equals%2A> method."
  example:
  - "The following code example implements the DictionaryBase class and uses that implementation to create a dictionary of <xref:System.String> keys and values that have a <xref:System.String.Length%2A> of 5 characters or less.  \n  \n [!code-cpp[System.Collections.DictionaryBase#1](~/add/codesnippet/cpp/t-system.collections.dic_1.cpp)]\n [!code-cs[System.Collections.DictionaryBase#1](~/add/codesnippet/csharp/t-system.collections.dic_1.cs)]\n [!code-vb[System.Collections.DictionaryBase#1](~/add/codesnippet/visualbasic/t-system.collections.dic_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class DictionaryBase : System.Collections.IDictionary
  inheritance:
  - System.Object
  implements:
  - System.Collections.IDictionary
  inheritedMembers: []
  platform:
  - net462
- uid: System.Collections.DictionaryBase.#ctor
  id: '#ctor'
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  name: DictionaryBase()
  nameWithType: DictionaryBase.DictionaryBase()
  fullName: System.Collections.DictionaryBase.DictionaryBase()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Initializes a new instance of the <xref href=&quot;System.Collections.DictionaryBase&quot;></xref> class."
  remarks: "This constructor is an O(1) operation."
  syntax:
    content: protected DictionaryBase ();
    parameters: []
  overload: System.Collections.DictionaryBase.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.DictionaryBase.Clear
  id: Clear
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  name: Clear()
  nameWithType: DictionaryBase.Clear()
  fullName: System.Collections.DictionaryBase.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Clears the contents of the <xref href=&quot;System.Collections.DictionaryBase&quot;></xref> instance."
  remarks: "<xref:System.Collections.DictionaryBase.Count%2A> is set to zero, and references to other objects from elements of the collection are also released.       This method is an O(`n`) operation, where `n` is <xref:System.Collections.DictionaryBase.Count%2A>."
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Collections.DictionaryBase.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.DictionaryBase.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  name: CopyTo(Array,Int32)
  nameWithType: DictionaryBase.CopyTo(Array,Int32)
  fullName: System.Collections.DictionaryBase.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Copies the <xref href=&quot;System.Collections.DictionaryBase&quot;></xref> elements to a one-dimensional <xref:System.Array> at the specified index."
  remarks: "The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.DictionaryBase>.       This method is an O(`n`) operation, where `n` is <xref:System.Collections.DictionaryBase.Count%2A>."
  syntax:
    content: public void CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: "The one-dimensional <xref:System.Array> that is the destination of the <xref:System.Collections.DictionaryEntry> objects copied from the <xref href=&quot;System.Collections.DictionaryBase&quot;></xref> instance. The <xref:System.Array> must have zero-based indexing."
    - id: index
      type: System.Int32
      description: "The zero-based index in `array` at which copying begins."
  overload: System.Collections.DictionaryBase.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code> is less than zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code> is multidimensional.       -or-       The number of elements in the source <xref href=&quot;System.Collections.DictionaryBase&quot;></xref> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "The type of the source <xref href=&quot;System.Collections.DictionaryBase&quot;></xref> cannot be cast automatically to the type of the destination <code>array</code>."
  platform:
  - net462
- uid: System.Collections.DictionaryBase.Count
  id: Count
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  name: Count
  nameWithType: DictionaryBase.Count
  fullName: System.Collections.DictionaryBase.Count
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Gets the number of elements contained in the <xref href=&quot;System.Collections.DictionaryBase&quot;></xref> instance."
  remarks: "Retrieving the value of this property is an O(1) operation."
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: "The number of elements contained in the <xref href=&quot;System.Collections.DictionaryBase&quot;></xref> instance."
  overload: System.Collections.DictionaryBase.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.DictionaryBase.Dictionary
  id: Dictionary
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  name: Dictionary
  nameWithType: DictionaryBase.Dictionary
  fullName: System.Collections.DictionaryBase.Dictionary
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Gets the list of elements contained in the <xref href=&quot;System.Collections.DictionaryBase&quot;></xref> instance."
  remarks: "The On* methods are invoked only on the instance returned by the Dictionary property, but not on the instance returned by the <xref:System.Collections.DictionaryBase.InnerHashtable%2A> property.       Retrieving the value of this property is an O(1) operation."
  example:
  - "The following code example implements the <xref:System.Collections.DictionaryBase> class and uses that implementation to create a dictionary of <xref:System.String> keys and values that have a <xref:System.String.Length%2A> of 5 characters or less.  \n  \n [!code-cpp[System.Collections.DictionaryBase#1](~/add/codesnippet/cpp/p-system.collections.dic_1.cpp)]\n [!code-cs[System.Collections.DictionaryBase#1](~/add/codesnippet/csharp/p-system.collections.dic_1.cs)]\n [!code-vb[System.Collections.DictionaryBase#1](~/add/codesnippet/visualbasic/p-system.collections.dic_1.vb)]"
  syntax:
    content: protected System.Collections.IDictionary Dictionary { get; }
    return:
      type: System.Collections.IDictionary
      description: "An <xref:System.Collections.IDictionary> representing the <xref href=&quot;System.Collections.DictionaryBase&quot;></xref> instance itself."
  overload: System.Collections.DictionaryBase.Dictionary*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.DictionaryBase.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: DictionaryBase.GetEnumerator()
  fullName: System.Collections.DictionaryBase.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Returns an <xref:System.Collections.IDictionaryEnumerator> that iterates through the <xref href=&quot;System.Collections.DictionaryBase&quot;></xref> instance."
  remarks: "The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.       Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.       Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.       <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.       If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.       An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.       The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.       This method is an O(1) operation."
  example:
  - "The following code example implements the <xref:System.Collections.DictionaryBase> class and uses that implementation to create a dictionary of <xref:System.String> keys and values that have a <xref:System.String.Length%2A> of 5 characters or less.  \n  \n [!code-cpp[System.Collections.DictionaryBase#1](~/add/codesnippet/cpp/m-system.collections.dic_3_1.cpp)]\n [!code-cs[System.Collections.DictionaryBase#1](~/add/codesnippet/csharp/m-system.collections.dic_3_1.cs)]\n [!code-vb[System.Collections.DictionaryBase#1](~/add/codesnippet/visualbasic/m-system.collections.dic_3_1.vb)]"
  syntax:
    content: public System.Collections.IDictionaryEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IDictionaryEnumerator
      description: "An <xref:System.Collections.IDictionaryEnumerator> for the <xref href=&quot;System.Collections.DictionaryBase&quot;></xref> instance."
  overload: System.Collections.DictionaryBase.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.DictionaryBase.InnerHashtable
  id: InnerHashtable
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  name: InnerHashtable
  nameWithType: DictionaryBase.InnerHashtable
  fullName: System.Collections.DictionaryBase.InnerHashtable
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Gets the list of elements contained in the <xref href=&quot;System.Collections.DictionaryBase&quot;></xref> instance."
  remarks: "The On* methods are invoked only on the instance returned by the <xref:System.Collections.DictionaryBase.Dictionary%2A> property, but not on the instance returned by the InnerHashtable property.       Retrieving the value of this property is an O(1) operation."
  syntax:
    content: protected System.Collections.Hashtable InnerHashtable { get; }
    return:
      type: System.Collections.Hashtable
      description: "A <xref href=&quot;System.Collections.Hashtable&quot;></xref> representing the <xref href=&quot;System.Collections.DictionaryBase&quot;></xref> instance itself."
  overload: System.Collections.DictionaryBase.InnerHashtable*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.DictionaryBase.OnClear
  id: OnClear
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  name: OnClear()
  nameWithType: DictionaryBase.OnClear()
  fullName: System.Collections.DictionaryBase.OnClear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Performs additional custom processes before clearing the contents of the <xref href=&quot;System.Collections.DictionaryBase&quot;></xref> instance."
  remarks: "The default implementation of this method is intended to be overridden by a derived class to perform some action before the collection is cleared.       The On* methods are invoked only on the instance returned by the <xref:System.Collections.DictionaryBase.Dictionary%2A> property, but not on the instance returned by the <xref:System.Collections.DictionaryBase.InnerHashtable%2A> property.       The default implementation of this method is an O(1) operation."
  syntax:
    content: protected virtual void OnClear ();
    parameters: []
  overload: System.Collections.DictionaryBase.OnClear*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.DictionaryBase.OnClearComplete
  id: OnClearComplete
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  name: OnClearComplete()
  nameWithType: DictionaryBase.OnClearComplete()
  fullName: System.Collections.DictionaryBase.OnClearComplete()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Performs additional custom processes after clearing the contents of the <xref href=&quot;System.Collections.DictionaryBase&quot;></xref> instance."
  remarks: "The default implementation of this method is intended to be overridden by a derived class to perform some action after the collection is cleared.       The On* methods are invoked only on the instance returned by the <xref:System.Collections.DictionaryBase.Dictionary%2A> property, but not on the instance returned by the <xref:System.Collections.DictionaryBase.InnerHashtable%2A> property.       The default implementation of this method is an O(1) operation."
  syntax:
    content: protected virtual void OnClearComplete ();
    parameters: []
  overload: System.Collections.DictionaryBase.OnClearComplete*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.DictionaryBase.OnGet(System.Object,System.Object)
  id: OnGet(System.Object,System.Object)
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  name: OnGet(Object,Object)
  nameWithType: DictionaryBase.OnGet(Object,Object)
  fullName: System.Collections.DictionaryBase.OnGet(Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Gets the element with the specified key and value in the <xref href=&quot;System.Collections.DictionaryBase&quot;></xref> instance."
  remarks: "The default implementation of this method returns `currentValue`. It is intended to be overridden by a derived class to perform additional action when the specified element is retrieved.       The On* methods are invoked only on the instance returned by the <xref:System.Collections.DictionaryBase.Dictionary%2A> property, but not on the instance returned by the <xref:System.Collections.DictionaryBase.InnerHashtable%2A> property.       The default implementation of this method is an O(1) operation."
  syntax:
    content: protected virtual object OnGet (object key, object currentValue);
    parameters:
    - id: key
      type: System.Object
      description: "The key of the element to get."
    - id: currentValue
      type: System.Object
      description: "The current value of the element associated with `key`."
    return:
      type: System.Object
      description: "An <xref:System.Object> containing the element with the specified key and value."
  overload: System.Collections.DictionaryBase.OnGet*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)
  id: OnInsert(System.Object,System.Object)
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  name: OnInsert(Object,Object)
  nameWithType: DictionaryBase.OnInsert(Object,Object)
  fullName: System.Collections.DictionaryBase.OnInsert(Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Performs additional custom processes before inserting a new element into the <xref href=&quot;System.Collections.DictionaryBase&quot;></xref> instance."
  remarks: "The default implementation of this method is intended to be overridden by a derived class to perform some action before the specified element is inserted.       The On* methods are invoked only on the instance returned by the <xref:System.Collections.DictionaryBase.Dictionary%2A> property, but not on the instance returned by the <xref:System.Collections.DictionaryBase.InnerHashtable%2A> property.       The default implementation of this method is an O(1) operation."
  example:
  - "The following code example implements the <xref:System.Collections.DictionaryBase> class and uses that implementation to create a dictionary of <xref:System.String> keys and values that have a <xref:System.String.Length%2A> of 5 characters or less.  \n  \n [!code-cpp[System.Collections.DictionaryBase#1](~/add/codesnippet/cpp/m-system.collections.dic_0_1.cpp)]\n [!code-cs[System.Collections.DictionaryBase#1](~/add/codesnippet/csharp/m-system.collections.dic_0_1.cs)]\n [!code-vb[System.Collections.DictionaryBase#1](~/add/codesnippet/visualbasic/m-system.collections.dic_0_1.vb)]"
  syntax:
    content: protected virtual void OnInsert (object key, object value);
    parameters:
    - id: key
      type: System.Object
      description: "The key of the element to insert."
    - id: value
      type: System.Object
      description: "The value of the element to insert."
  overload: System.Collections.DictionaryBase.OnInsert*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.DictionaryBase.OnInsertComplete(System.Object,System.Object)
  id: OnInsertComplete(System.Object,System.Object)
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  name: OnInsertComplete(Object,Object)
  nameWithType: DictionaryBase.OnInsertComplete(Object,Object)
  fullName: System.Collections.DictionaryBase.OnInsertComplete(Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Performs additional custom processes after inserting a new element into the <xref href=&quot;System.Collections.DictionaryBase&quot;></xref> instance."
  remarks: "The default implementation of this method is intended to be overridden by a derived class to perform some action after the specified element is inserted.       The On* methods are invoked only on the instance returned by the <xref:System.Collections.DictionaryBase.Dictionary%2A> property, but not on the instance returned by the <xref:System.Collections.DictionaryBase.InnerHashtable%2A> property.       The default implementation of this method is an O(1) operation."
  syntax:
    content: protected virtual void OnInsertComplete (object key, object value);
    parameters:
    - id: key
      type: System.Object
      description: "The key of the element to insert."
    - id: value
      type: System.Object
      description: "The value of the element to insert."
  overload: System.Collections.DictionaryBase.OnInsertComplete*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)
  id: OnRemove(System.Object,System.Object)
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  name: OnRemove(Object,Object)
  nameWithType: DictionaryBase.OnRemove(Object,Object)
  fullName: System.Collections.DictionaryBase.OnRemove(Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Performs additional custom processes before removing an element from the <xref href=&quot;System.Collections.DictionaryBase&quot;></xref> instance."
  remarks: "The default implementation of this method is intended to be overridden by a derived class to perform some action before the specified element is removed.       The On* methods are invoked only on the instance returned by the <xref:System.Collections.DictionaryBase.Dictionary%2A> property, but not on the instance returned by the <xref:System.Collections.DictionaryBase.InnerHashtable%2A> property.       The default implementation of this method is an O(1) operation."
  example:
  - "The following code example implements the <xref:System.Collections.DictionaryBase> class and uses that implementation to create a dictionary of <xref:System.String> keys and values that have a <xref:System.String.Length%2A> of 5 characters or less.  \n  \n [!code-cpp[System.Collections.DictionaryBase#1](~/add/codesnippet/cpp/m-system.collections.dic_1_1.cpp)]\n [!code-cs[System.Collections.DictionaryBase#1](~/add/codesnippet/csharp/m-system.collections.dic_1_1.cs)]\n [!code-vb[System.Collections.DictionaryBase#1](~/add/codesnippet/visualbasic/m-system.collections.dic_1_1.vb)]"
  syntax:
    content: protected virtual void OnRemove (object key, object value);
    parameters:
    - id: key
      type: System.Object
      description: "The key of the element to remove."
    - id: value
      type: System.Object
      description: "The value of the element to remove."
  overload: System.Collections.DictionaryBase.OnRemove*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.DictionaryBase.OnRemoveComplete(System.Object,System.Object)
  id: OnRemoveComplete(System.Object,System.Object)
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  name: OnRemoveComplete(Object,Object)
  nameWithType: DictionaryBase.OnRemoveComplete(Object,Object)
  fullName: System.Collections.DictionaryBase.OnRemoveComplete(Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Performs additional custom processes after removing an element from the <xref href=&quot;System.Collections.DictionaryBase&quot;></xref> instance."
  remarks: "The default implementation of this method is intended to be overridden by a derived class to perform some action after the specified element is removed.       The On* methods are invoked only on the instance returned by the <xref:System.Collections.DictionaryBase.Dictionary%2A> property, but not on the instance returned by the <xref:System.Collections.DictionaryBase.InnerHashtable%2A> property.       The default implementation of this method is an O(1) operation."
  syntax:
    content: protected virtual void OnRemoveComplete (object key, object value);
    parameters:
    - id: key
      type: System.Object
      description: "The key of the element to remove."
    - id: value
      type: System.Object
      description: "The value of the element to remove."
  overload: System.Collections.DictionaryBase.OnRemoveComplete*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)
  id: OnSet(System.Object,System.Object,System.Object)
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  name: OnSet(Object,Object,Object)
  nameWithType: DictionaryBase.OnSet(Object,Object,Object)
  fullName: System.Collections.DictionaryBase.OnSet(Object,Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Performs additional custom processes before setting a value in the <xref href=&quot;System.Collections.DictionaryBase&quot;></xref> instance."
  remarks: "The default implementation of this method is intended to be overridden by a derived class to perform some action before the specified element is set.       The On* methods are invoked only on the instance returned by the <xref:System.Collections.DictionaryBase.Dictionary%2A> property, but not on the instance returned by the <xref:System.Collections.DictionaryBase.InnerHashtable%2A> property.       The default implementation of this method is an O(1) operation."
  example:
  - "The following code example implements the <xref:System.Collections.DictionaryBase> class and uses that implementation to create a dictionary of <xref:System.String> keys and values that have a <xref:System.String.Length%2A> of 5 characters or less.  \n  \n [!code-cpp[System.Collections.DictionaryBase#1](~/add/codesnippet/cpp/576c3070-5898-49fc-92c2-_1.cpp)]\n [!code-cs[System.Collections.DictionaryBase#1](~/add/codesnippet/csharp/576c3070-5898-49fc-92c2-_1.cs)]\n [!code-vb[System.Collections.DictionaryBase#1](~/add/codesnippet/visualbasic/576c3070-5898-49fc-92c2-_1.vb)]"
  syntax:
    content: protected virtual void OnSet (object key, object oldValue, object newValue);
    parameters:
    - id: key
      type: System.Object
      description: "The key of the element to locate."
    - id: oldValue
      type: System.Object
      description: "The old value of the element associated with `key`."
    - id: newValue
      type: System.Object
      description: "The new value of the element associated with `key`."
  overload: System.Collections.DictionaryBase.OnSet*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.DictionaryBase.OnSetComplete(System.Object,System.Object,System.Object)
  id: OnSetComplete(System.Object,System.Object,System.Object)
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  name: OnSetComplete(Object,Object,Object)
  nameWithType: DictionaryBase.OnSetComplete(Object,Object,Object)
  fullName: System.Collections.DictionaryBase.OnSetComplete(Object,Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Performs additional custom processes after setting a value in the <xref href=&quot;System.Collections.DictionaryBase&quot;></xref> instance."
  remarks: "The default implementation of this method is intended to be overridden by a derived class to perform some action after the specified element is set.       The On* methods are invoked only on the instance returned by the <xref:System.Collections.DictionaryBase.Dictionary%2A> property, but not on the instance returned by the <xref:System.Collections.DictionaryBase.InnerHashtable%2A> property.       The default implementation of this method is an O(1) operation."
  syntax:
    content: protected virtual void OnSetComplete (object key, object oldValue, object newValue);
    parameters:
    - id: key
      type: System.Object
      description: "The key of the element to locate."
    - id: oldValue
      type: System.Object
      description: "The old value of the element associated with `key`."
    - id: newValue
      type: System.Object
      description: "The new value of the element associated with `key`."
  overload: System.Collections.DictionaryBase.OnSetComplete*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.DictionaryBase.OnValidate(System.Object,System.Object)
  id: OnValidate(System.Object,System.Object)
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  name: OnValidate(Object,Object)
  nameWithType: DictionaryBase.OnValidate(Object,Object)
  fullName: System.Collections.DictionaryBase.OnValidate(Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Performs additional custom processes when validating the element with the specified key and value."
  remarks: "The default implementation of this method is intended to be overridden by a derived class to perform some action when the specified element is validated.       The On* methods are invoked only on the instance returned by the <xref:System.Collections.DictionaryBase.Dictionary%2A> property, but not on the instance returned by the <xref:System.Collections.DictionaryBase.InnerHashtable%2A> property.       The default implementation of this method is an O(1) operation."
  example:
  - "The following code example implements the <xref:System.Collections.DictionaryBase> class and uses that implementation to create a dictionary of <xref:System.String> keys and values that have a <xref:System.String.Length%2A> of 5 characters or less.  \n  \n [!code-cpp[System.Collections.DictionaryBase#1](~/add/codesnippet/cpp/m-system.collections.dic_2_1.cpp)]\n [!code-cs[System.Collections.DictionaryBase#1](~/add/codesnippet/csharp/m-system.collections.dic_2_1.cs)]\n [!code-vb[System.Collections.DictionaryBase#1](~/add/codesnippet/visualbasic/m-system.collections.dic_2_1.vb)]"
  syntax:
    content: protected virtual void OnValidate (object key, object value);
    parameters:
    - id: key
      type: System.Object
      description: "The key of the element to validate."
    - id: value
      type: System.Object
      description: "The value of the element to validate."
  overload: System.Collections.DictionaryBase.OnValidate*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.DictionaryBase.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: DictionaryBase.System.Collections.ICollection.IsSynchronized
  fullName: System.Collections.DictionaryBase.System.Collections.ICollection.IsSynchronized
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Gets a value indicating whether access to a <xref href=&quot;System.Collections.DictionaryBase&quot;></xref> object is synchronized (thread safe)."
  remarks: "A <xref:System.Collections.DictionaryBase> object is not synchronized. Derived classes can provide a synchronized version of the <xref:System.Collections.DictionaryBase> class using the <xref:System.Collections.ICollection.SyncRoot%2A> property.       Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads."
  example:
  - "The following code example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> property during the entire enumeration.  \n  \n [!code-cs[System.Collections.DictionaryBase#3](~/add/codesnippet/csharp/f850b608-c07e-40f9-af58-_1.cs)]\n [!code-cpp[System.Collections.DictionaryBase#3](~/add/codesnippet/cpp/f850b608-c07e-40f9-af58-_1.cpp)]\n [!code-vb[System.Collections.DictionaryBase#3](~/add/codesnippet/visualbasic/f850b608-c07e-40f9-af58-_1.vb)]  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: bool System.Collections.ICollection.IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if access to the <xref href=&quot;System.Collections.DictionaryBase&quot;></xref> object is synchronized (thread safe); otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Collections.DictionaryBase.System#Collections#ICollection#IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.DictionaryBase.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  name: System.Collections.ICollection.SyncRoot
  nameWithType: DictionaryBase.System.Collections.ICollection.SyncRoot
  fullName: System.Collections.DictionaryBase.System.Collections.ICollection.SyncRoot
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Gets an object that can be used to synchronize access to a <xref href=&quot;System.Collections.DictionaryBase&quot;></xref> object."
  remarks: "Derived classes can provide their own synchronized version of the <xref:System.Collections.DictionaryBase> class using the <xref:System.Collections.ICollection.SyncRoot%2A> property. The synchronizing code must perform operations on the <xref:System.Collections.ICollection.SyncRoot%2A> property of the <xref:System.Collections.DictionaryBase> object, not directly on the <xref:System.Collections.DictionaryBase> object. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.DictionaryBase> object.       Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads."
  example:
  - "The following code example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> property during the entire enumeration.  \n  \n [!code-cs[System.Collections.DictionaryBase#3](~/add/codesnippet/csharp/86708232-6546-45cc-abc0-_1.cs)]\n [!code-cpp[System.Collections.DictionaryBase#3](~/add/codesnippet/cpp/86708232-6546-45cc-abc0-_1.cpp)]\n [!code-vb[System.Collections.DictionaryBase#3](~/add/codesnippet/visualbasic/86708232-6546-45cc-abc0-_1.vb)]  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: object System.Collections.ICollection.SyncRoot { get; }
    return:
      type: System.Object
      description: "An object that can be used to synchronize access to the <xref href=&quot;System.Collections.DictionaryBase&quot;></xref> object."
  overload: System.Collections.DictionaryBase.System#Collections#ICollection#SyncRoot*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#Add(System.Object,System.Object)
  id: System#Collections#IDictionary#Add(System.Object,System.Object)
  isEii: true
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  name: System.Collections.IDictionary.Add(Object,Object)
  nameWithType: DictionaryBase.System.Collections.IDictionary.Add(Object,Object)
  fullName: System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Adds an element with the specified key and value into the <xref href=&quot;System.Collections.DictionaryBase&quot;></xref>."
  remarks: "An object that has no correlation between its state and its hash code value should typically not be used as the key. For example, <xref:System.String> objects are better than <xref:System.Text.StringBuilder> objects for use as keys.       You can also use the <xref:System.Collections.IDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.DictionaryBase>; for example, `myCollection[&quot;myNonexistentKey&quot;] = myValue`. However, if the specified key already exists in the <xref:System.Collections.DictionaryBase>, setting the <xref:System.Collections.IDictionary.Item%2A> property overwrites the old value. In contrast, the <xref:System.Collections.IDictionary.Add%2A> method does not modify existing elements.       This method is an O(1) operation."
  example:
  - "The following code example implements the <xref:System.Collections.DictionaryBase> class and uses that implementation to create a dictionary of <xref:System.String> keys and values that have a <xref:System.String.Length%2A> of 5 characters or less.  \n  \n [!code-cpp[System.Collections.DictionaryBase#1](~/add/codesnippet/cpp/c65f1d46-c6ba-40bd-bf67-_1.cpp)]\n [!code-cs[System.Collections.DictionaryBase#1](~/add/codesnippet/csharp/c65f1d46-c6ba-40bd-bf67-_1.cs)]\n [!code-vb[System.Collections.DictionaryBase#1](~/add/codesnippet/visualbasic/c65f1d46-c6ba-40bd-bf67-_1.vb)]"
  syntax:
    content: void IDictionary.Add (object key, object value);
    parameters:
    - id: key
      type: System.Object
      description: "The key of the element to add."
    - id: value
      type: System.Object
      description: "The value of the element to add."
  overload: System.Collections.DictionaryBase.System#Collections#IDictionary#Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "An element with the same key already exists in the <xref href=&quot;System.Collections.DictionaryBase&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "The <xref href=&quot;System.Collections.DictionaryBase&quot;></xref> is read-only.       -or-       The <xref href=&quot;System.Collections.DictionaryBase&quot;></xref> has a fixed size."
  platform:
  - net462
- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#Contains(System.Object)
  id: System#Collections#IDictionary#Contains(System.Object)
  isEii: true
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  name: System.Collections.IDictionary.Contains(Object)
  nameWithType: DictionaryBase.System.Collections.IDictionary.Contains(Object)
  fullName: System.Collections.DictionaryBase.System.Collections.IDictionary.Contains(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Determines whether the <xref href=&quot;System.Collections.DictionaryBase&quot;></xref> contains a specific key."
  remarks: "This method is an O(1) operation.       Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `key` to determine whether `item` exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `key` parameter on the objects in the collection."
  example:
  - "The following code example implements the <xref:System.Collections.DictionaryBase> class and uses that implementation to create a dictionary of <xref:System.String> keys and values that have a <xref:System.String.Length%2A> of 5 characters or less.  \n  \n [!code-cpp[System.Collections.DictionaryBase#1](~/add/codesnippet/cpp/c59cd535-1a58-4e00-98b8-_1.cpp)]\n [!code-cs[System.Collections.DictionaryBase#1](~/add/codesnippet/csharp/c59cd535-1a58-4e00-98b8-_1.cs)]\n [!code-vb[System.Collections.DictionaryBase#1](~/add/codesnippet/visualbasic/c59cd535-1a58-4e00-98b8-_1.vb)]"
  syntax:
    content: bool IDictionary.Contains (object key);
    parameters:
    - id: key
      type: System.Object
      description: "The key to locate in the <xref href=&quot;System.Collections.DictionaryBase&quot;></xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the <xref href=&quot;System.Collections.DictionaryBase&quot;></xref> contains an element with the specified key; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Collections.DictionaryBase.System#Collections#IDictionary#Contains*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#IsFixedSize
  id: System#Collections#IDictionary#IsFixedSize
  isEii: true
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  name: System.Collections.IDictionary.IsFixedSize
  nameWithType: DictionaryBase.System.Collections.IDictionary.IsFixedSize
  fullName: System.Collections.DictionaryBase.System.Collections.IDictionary.IsFixedSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Gets a value indicating whether a <xref href=&quot;System.Collections.DictionaryBase&quot;></xref> object has a fixed size."
  remarks: "A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but does allow the modification of existing elements.       A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.       Retrieving the value of this property is an O(1) operation."
  syntax:
    content: bool System.Collections.IDictionary.IsFixedSize { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the <xref href=&quot;System.Collections.DictionaryBase&quot;></xref> object has a fixed size; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Collections.DictionaryBase.System#Collections#IDictionary#IsFixedSize*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#IsReadOnly
  id: System#Collections#IDictionary#IsReadOnly
  isEii: true
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  name: System.Collections.IDictionary.IsReadOnly
  nameWithType: DictionaryBase.System.Collections.IDictionary.IsReadOnly
  fullName: System.Collections.DictionaryBase.System.Collections.IDictionary.IsReadOnly
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Gets a value indicating whether a <xref href=&quot;System.Collections.DictionaryBase&quot;></xref> object is read-only."
  remarks: "A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.       A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.       Retrieving the value of this property is an O(1) operation."
  syntax:
    content: bool System.Collections.IDictionary.IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the <xref href=&quot;System.Collections.DictionaryBase&quot;></xref> object is read-only; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Collections.DictionaryBase.System#Collections#IDictionary#IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#Item(System.Object)
  id: System#Collections#IDictionary#Item(System.Object)
  isEii: true
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  name: System.Collections.IDictionary.Item(Object)
  nameWithType: DictionaryBase.System.Collections.IDictionary.Item(Object)
  fullName: System.Collections.DictionaryBase.System.Collections.IDictionary.Item(Object)
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Gets or sets the value associated with the specified key."
  remarks: "This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[key]`.       You can also use the <xref:System.Collections.IDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.DictionaryBase>; for example, `myCollection[&quot;myNonexistentKey&quot;] = myValue`. However, if the specified key already exists in the <xref:System.Collections.DictionaryBase>, setting the <xref:System.Collections.IDictionary.Item%2A> property overwrites the old value. In contrast, the <xref:System.Collections.IDictionary.Add%2A> method does not modify existing elements.       Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation."
  example:
  - "The following code example implements the <xref:System.Collections.DictionaryBase> class and uses that implementation to create a dictionary of <xref:System.String> keys and values that have a <xref:System.String.Length%2A> of 5 characters or less.  \n  \n [!code-cpp[System.Collections.DictionaryBase#1](~/add/codesnippet/cpp/24404b11-3020-40f8-8aa1-_1.cpp)]\n [!code-cs[System.Collections.DictionaryBase#1](~/add/codesnippet/csharp/24404b11-3020-40f8-8aa1-_1.cs)]\n [!code-vb[System.Collections.DictionaryBase#1](~/add/codesnippet/visualbasic/24404b11-3020-40f8-8aa1-_1.vb)]"
  syntax:
    content: object System.Collections.IDictionary.Item[object key] { get; set; }
    parameters:
    - id: key
      type: System.Object
      description: "The key whose value to get or set."
    return:
      type: System.Object
      description: "The value associated with the specified key. If the specified key is not found, attempting to get it returns <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>, and attempting to set it creates a new element using the specified key."
  overload: System.Collections.DictionaryBase.System#Collections#IDictionary#Item*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "The property is set and the <xref href=&quot;System.Collections.DictionaryBase&quot;></xref> is read-only.       -or-       The property is set, <code>key</code> does not exist in the collection, and the <xref href=&quot;System.Collections.DictionaryBase&quot;></xref> has a fixed size."
  platform:
  - net462
- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#Keys
  id: System#Collections#IDictionary#Keys
  isEii: true
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  name: System.Collections.IDictionary.Keys
  nameWithType: DictionaryBase.System.Collections.IDictionary.Keys
  fullName: System.Collections.DictionaryBase.System.Collections.IDictionary.Keys
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Gets an <xref:System.Collections.ICollection> object containing the keys in the <xref href=&quot;System.Collections.DictionaryBase&quot;></xref> object."
  remarks: "The order of the keys in the <xref:System.Collections.ICollection> object is unspecified, but is the same order as the associated values in the <xref:System.Collections.ICollection> object returned by the <xref:System.Collections.IDictionary.Values%2A> property.       The returned <xref:System.Collections.ICollection> is not a static copy; instead, the <xref:System.Collections.ICollection> refers back to the keys in the original <xref:System.Collections.DictionaryBase> object. Therefore, changes to the <xref:System.Collections.DictionaryBase> continue to be reflected in the returned <xref:System.Collections.ICollection>.       Retrieving the value of this property is an O(1) operation."
  example:
  - "The following code example implements the <xref:System.Collections.DictionaryBase> class and uses that implementation to create a dictionary of <xref:System.String> keys and values that have a <xref:System.String.Length%2A> property of 5 characters or less.  \n  \n [!code-cpp[System.Collections.DictionaryBase#1](~/add/codesnippet/cpp/55fc7d60-7b22-451a-9b28-_1.cpp)]\n [!code-cs[System.Collections.DictionaryBase#1](~/add/codesnippet/csharp/55fc7d60-7b22-451a-9b28-_1.cs)]\n [!code-vb[System.Collections.DictionaryBase#1](~/add/codesnippet/visualbasic/55fc7d60-7b22-451a-9b28-_1.vb)]"
  syntax:
    content: System.Collections.ICollection System.Collections.IDictionary.Keys { get; }
    return:
      type: System.Collections.ICollection
      description: "An <xref:System.Collections.ICollection> object containing the keys in the <xref href=&quot;System.Collections.DictionaryBase&quot;></xref> object."
  overload: System.Collections.DictionaryBase.System#Collections#IDictionary#Keys*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#Remove(System.Object)
  id: System#Collections#IDictionary#Remove(System.Object)
  isEii: true
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  name: System.Collections.IDictionary.Remove(Object)
  nameWithType: DictionaryBase.System.Collections.IDictionary.Remove(Object)
  fullName: System.Collections.DictionaryBase.System.Collections.IDictionary.Remove(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Removes the element with the specified key from the <xref href=&quot;System.Collections.DictionaryBase&quot;></xref>."
  remarks: "If the <xref:System.Collections.DictionaryBase> does not contain an element with the specified key, the <xref:System.Collections.DictionaryBase> remains unchanged. No exception is thrown.       This method is an O(1) operation."
  example:
  - "The following code example implements the <xref:System.Collections.DictionaryBase> class and uses that implementation to create a dictionary of <xref:System.String> keys and values that have a <xref:System.String.Length%2A> of 5 characters or less.  \n  \n [!code-cpp[System.Collections.DictionaryBase#1](~/add/codesnippet/cpp/ce3b6ffc-125d-4340-aa5a-_1.cpp)]\n [!code-cs[System.Collections.DictionaryBase#1](~/add/codesnippet/csharp/ce3b6ffc-125d-4340-aa5a-_1.cs)]\n [!code-vb[System.Collections.DictionaryBase#1](~/add/codesnippet/visualbasic/ce3b6ffc-125d-4340-aa5a-_1.vb)]"
  syntax:
    content: void IDictionary.Remove (object key);
    parameters:
    - id: key
      type: System.Object
      description: "The key of the element to remove."
  overload: System.Collections.DictionaryBase.System#Collections#IDictionary#Remove*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "The <xref href=&quot;System.Collections.DictionaryBase&quot;></xref> is read-only.       -or-       The <xref href=&quot;System.Collections.DictionaryBase&quot;></xref> has a fixed size."
  platform:
  - net462
- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#Values
  id: System#Collections#IDictionary#Values
  isEii: true
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  name: System.Collections.IDictionary.Values
  nameWithType: DictionaryBase.System.Collections.IDictionary.Values
  fullName: System.Collections.DictionaryBase.System.Collections.IDictionary.Values
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Gets an <xref:System.Collections.ICollection> object containing the values in the <xref href=&quot;System.Collections.DictionaryBase&quot;></xref> object."
  remarks: "The order of the values in the <xref:System.Collections.ICollection> object is unspecified, but is the same order as the associated keys in the <xref:System.Collections.ICollection> object returned by the <xref:System.Collections.IDictionary.Keys%2A> property.       The returned <xref:System.Collections.ICollection> is not a static copy; instead, the <xref:System.Collections.ICollection> refers back to the values in the original <xref:System.Collections.DictionaryBase> object. Therefore, changes to the <xref:System.Collections.DictionaryBase> continue to be reflected in the returned <xref:System.Collections.ICollection>.       Retrieving the value of this property is an O(1) operation."
  example:
  - "The following code example implements the <xref:System.Collections.DictionaryBase> class and uses that implementation to create a dictionary of <xref:System.String> keys and values that have a <xref:System.String.Length%2A> property of 5 characters or less.  \n  \n [!code-cpp[System.Collections.DictionaryBase#1](~/add/codesnippet/cpp/48c1eb68-69bc-40ec-afd8-_1.cpp)]\n [!code-cs[System.Collections.DictionaryBase#1](~/add/codesnippet/csharp/48c1eb68-69bc-40ec-afd8-_1.cs)]\n [!code-vb[System.Collections.DictionaryBase#1](~/add/codesnippet/visualbasic/48c1eb68-69bc-40ec-afd8-_1.vb)]"
  syntax:
    content: System.Collections.ICollection System.Collections.IDictionary.Values { get; }
    return:
      type: System.Collections.ICollection
      description: "An <xref:System.Collections.ICollection> object containing the values in the <xref href=&quot;System.Collections.DictionaryBase&quot;></xref> object."
  overload: System.Collections.DictionaryBase.System#Collections#IDictionary#Values*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.DictionaryBase.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: DictionaryBase.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.DictionaryBase.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Returns an <xref:System.Collections.IEnumerator> that iterates through the <xref href=&quot;System.Collections.DictionaryBase&quot;></xref>."
  remarks: "The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators. Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.       Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.       Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position. At this position, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.       <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.       If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.       An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>. If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated.       The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.       This method is an O(1) operation."
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "An <xref:System.Collections.IEnumerator> for the <xref href=&quot;System.Collections.DictionaryBase&quot;></xref>."
  overload: System.Collections.DictionaryBase.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Collections.DictionaryBase.#ctor
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: DictionaryBase()
  nameWithType: DictionaryBase.DictionaryBase()
  fullName: System.Collections.DictionaryBase.DictionaryBase()
- uid: System.Collections.DictionaryBase.Clear
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: Clear()
  nameWithType: DictionaryBase.Clear()
  fullName: System.Collections.DictionaryBase.Clear()
- uid: System.Collections.DictionaryBase.CopyTo(System.Array,System.Int32)
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: CopyTo(Array,Int32)
  nameWithType: DictionaryBase.CopyTo(Array,Int32)
  fullName: System.Collections.DictionaryBase.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.DictionaryBase.Count
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: Count
  nameWithType: DictionaryBase.Count
  fullName: System.Collections.DictionaryBase.Count
- uid: System.Collections.DictionaryBase.Dictionary
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: Dictionary
  nameWithType: DictionaryBase.Dictionary
  fullName: System.Collections.DictionaryBase.Dictionary
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: true
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Collections.DictionaryBase.GetEnumerator
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: GetEnumerator()
  nameWithType: DictionaryBase.GetEnumerator()
  fullName: System.Collections.DictionaryBase.GetEnumerator()
- uid: System.Collections.IDictionaryEnumerator
  parent: System.Collections
  isExternal: true
  name: IDictionaryEnumerator
  nameWithType: IDictionaryEnumerator
  fullName: System.Collections.IDictionaryEnumerator
- uid: System.Collections.DictionaryBase.InnerHashtable
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: InnerHashtable
  nameWithType: DictionaryBase.InnerHashtable
  fullName: System.Collections.DictionaryBase.InnerHashtable
- uid: System.Collections.Hashtable
  parent: System.Collections
  isExternal: false
  name: Hashtable
  nameWithType: Hashtable
  fullName: System.Collections.Hashtable
- uid: System.Collections.DictionaryBase.OnClear
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: OnClear()
  nameWithType: DictionaryBase.OnClear()
  fullName: System.Collections.DictionaryBase.OnClear()
- uid: System.Collections.DictionaryBase.OnClearComplete
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: OnClearComplete()
  nameWithType: DictionaryBase.OnClearComplete()
  fullName: System.Collections.DictionaryBase.OnClearComplete()
- uid: System.Collections.DictionaryBase.OnGet(System.Object,System.Object)
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: OnGet(Object,Object)
  nameWithType: DictionaryBase.OnGet(Object,Object)
  fullName: System.Collections.DictionaryBase.OnGet(Object,Object)
- uid: System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: OnInsert(Object,Object)
  nameWithType: DictionaryBase.OnInsert(Object,Object)
  fullName: System.Collections.DictionaryBase.OnInsert(Object,Object)
- uid: System.Collections.DictionaryBase.OnInsertComplete(System.Object,System.Object)
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: OnInsertComplete(Object,Object)
  nameWithType: DictionaryBase.OnInsertComplete(Object,Object)
  fullName: System.Collections.DictionaryBase.OnInsertComplete(Object,Object)
- uid: System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: OnRemove(Object,Object)
  nameWithType: DictionaryBase.OnRemove(Object,Object)
  fullName: System.Collections.DictionaryBase.OnRemove(Object,Object)
- uid: System.Collections.DictionaryBase.OnRemoveComplete(System.Object,System.Object)
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: OnRemoveComplete(Object,Object)
  nameWithType: DictionaryBase.OnRemoveComplete(Object,Object)
  fullName: System.Collections.DictionaryBase.OnRemoveComplete(Object,Object)
- uid: System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: OnSet(Object,Object,Object)
  nameWithType: DictionaryBase.OnSet(Object,Object,Object)
  fullName: System.Collections.DictionaryBase.OnSet(Object,Object,Object)
- uid: System.Collections.DictionaryBase.OnSetComplete(System.Object,System.Object,System.Object)
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: OnSetComplete(Object,Object,Object)
  nameWithType: DictionaryBase.OnSetComplete(Object,Object,Object)
  fullName: System.Collections.DictionaryBase.OnSetComplete(Object,Object,Object)
- uid: System.Collections.DictionaryBase.OnValidate(System.Object,System.Object)
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: OnValidate(Object,Object)
  nameWithType: DictionaryBase.OnValidate(Object,Object)
  fullName: System.Collections.DictionaryBase.OnValidate(Object,Object)
- uid: System.Collections.DictionaryBase.System#Collections#ICollection#IsSynchronized
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: DictionaryBase.System.Collections.ICollection.IsSynchronized
  fullName: System.Collections.DictionaryBase.System.Collections.ICollection.IsSynchronized
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.DictionaryBase.System#Collections#ICollection#SyncRoot
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: DictionaryBase.System.Collections.ICollection.SyncRoot
  fullName: System.Collections.DictionaryBase.System.Collections.ICollection.SyncRoot
- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#Add(System.Object,System.Object)
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: System.Collections.IDictionary.Add(Object,Object)
  nameWithType: DictionaryBase.System.Collections.IDictionary.Add(Object,Object)
  fullName: System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object,Object)
- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#Contains(System.Object)
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: System.Collections.IDictionary.Contains(Object)
  nameWithType: DictionaryBase.System.Collections.IDictionary.Contains(Object)
  fullName: System.Collections.DictionaryBase.System.Collections.IDictionary.Contains(Object)
- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#IsFixedSize
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: System.Collections.IDictionary.IsFixedSize
  nameWithType: DictionaryBase.System.Collections.IDictionary.IsFixedSize
  fullName: System.Collections.DictionaryBase.System.Collections.IDictionary.IsFixedSize
- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#IsReadOnly
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: System.Collections.IDictionary.IsReadOnly
  nameWithType: DictionaryBase.System.Collections.IDictionary.IsReadOnly
  fullName: System.Collections.DictionaryBase.System.Collections.IDictionary.IsReadOnly
- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#Item(System.Object)
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: System.Collections.IDictionary.Item(Object)
  nameWithType: DictionaryBase.System.Collections.IDictionary.Item(Object)
  fullName: System.Collections.DictionaryBase.System.Collections.IDictionary.Item(Object)
- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#Keys
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: System.Collections.IDictionary.Keys
  nameWithType: DictionaryBase.System.Collections.IDictionary.Keys
  fullName: System.Collections.DictionaryBase.System.Collections.IDictionary.Keys
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#Remove(System.Object)
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: System.Collections.IDictionary.Remove(Object)
  nameWithType: DictionaryBase.System.Collections.IDictionary.Remove(Object)
  fullName: System.Collections.DictionaryBase.System.Collections.IDictionary.Remove(Object)
- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#Values
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: System.Collections.IDictionary.Values
  nameWithType: DictionaryBase.System.Collections.IDictionary.Values
  fullName: System.Collections.DictionaryBase.System.Collections.IDictionary.Values
- uid: System.Collections.DictionaryBase.System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: DictionaryBase.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.DictionaryBase.System.Collections.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.DictionaryBase.#ctor*
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: DictionaryBase
  nameWithType: DictionaryBase.DictionaryBase
- uid: System.Collections.DictionaryBase.Clear*
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: Clear
  nameWithType: DictionaryBase.Clear
- uid: System.Collections.DictionaryBase.CopyTo*
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: CopyTo
  nameWithType: DictionaryBase.CopyTo
- uid: System.Collections.DictionaryBase.Count*
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: Count
  nameWithType: DictionaryBase.Count
- uid: System.Collections.DictionaryBase.Dictionary*
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: Dictionary
  nameWithType: DictionaryBase.Dictionary
- uid: System.Collections.DictionaryBase.GetEnumerator*
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: GetEnumerator
  nameWithType: DictionaryBase.GetEnumerator
- uid: System.Collections.DictionaryBase.InnerHashtable*
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: InnerHashtable
  nameWithType: DictionaryBase.InnerHashtable
- uid: System.Collections.DictionaryBase.OnClear*
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: OnClear
  nameWithType: DictionaryBase.OnClear
- uid: System.Collections.DictionaryBase.OnClearComplete*
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: OnClearComplete
  nameWithType: DictionaryBase.OnClearComplete
- uid: System.Collections.DictionaryBase.OnGet*
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: OnGet
  nameWithType: DictionaryBase.OnGet
- uid: System.Collections.DictionaryBase.OnInsert*
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: OnInsert
  nameWithType: DictionaryBase.OnInsert
- uid: System.Collections.DictionaryBase.OnInsertComplete*
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: OnInsertComplete
  nameWithType: DictionaryBase.OnInsertComplete
- uid: System.Collections.DictionaryBase.OnRemove*
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: OnRemove
  nameWithType: DictionaryBase.OnRemove
- uid: System.Collections.DictionaryBase.OnRemoveComplete*
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: OnRemoveComplete
  nameWithType: DictionaryBase.OnRemoveComplete
- uid: System.Collections.DictionaryBase.OnSet*
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: OnSet
  nameWithType: DictionaryBase.OnSet
- uid: System.Collections.DictionaryBase.OnSetComplete*
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: OnSetComplete
  nameWithType: DictionaryBase.OnSetComplete
- uid: System.Collections.DictionaryBase.OnValidate*
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: OnValidate
  nameWithType: DictionaryBase.OnValidate
- uid: System.Collections.DictionaryBase.System#Collections#ICollection#IsSynchronized*
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: DictionaryBase.System.Collections.ICollection.IsSynchronized
- uid: System.Collections.DictionaryBase.System#Collections#ICollection#SyncRoot*
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: DictionaryBase.System.Collections.ICollection.SyncRoot
- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#Add*
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: System.Collections.IDictionary.Add
  nameWithType: DictionaryBase.System.Collections.IDictionary.Add
- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#Contains*
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: System.Collections.IDictionary.Contains
  nameWithType: DictionaryBase.System.Collections.IDictionary.Contains
- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#IsFixedSize*
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: System.Collections.IDictionary.IsFixedSize
  nameWithType: DictionaryBase.System.Collections.IDictionary.IsFixedSize
- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#IsReadOnly*
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: System.Collections.IDictionary.IsReadOnly
  nameWithType: DictionaryBase.System.Collections.IDictionary.IsReadOnly
- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#Item*
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: System.Collections.IDictionary.Item
  nameWithType: DictionaryBase.System.Collections.IDictionary.Item
- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#Keys*
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: System.Collections.IDictionary.Keys
  nameWithType: DictionaryBase.System.Collections.IDictionary.Keys
- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#Remove*
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: System.Collections.IDictionary.Remove
  nameWithType: DictionaryBase.System.Collections.IDictionary.Remove
- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#Values*
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: System.Collections.IDictionary.Values
  nameWithType: DictionaryBase.System.Collections.IDictionary.Values
- uid: System.Collections.DictionaryBase.System#Collections#IEnumerable#GetEnumerator*
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: DictionaryBase.System.Collections.IEnumerable.GetEnumerator
