### YamlMime:ManagedReference
items:
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  id: SynchronizedReadOnlyCollection`1
  children:
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor(System.Object)
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor(System.Object,System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor(System.Object,`0[])
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.Contains(`0)
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.CopyTo(`0[],System.Int32)
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.Count
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.GetEnumerator
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.IndexOf(`0)
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.Item(System.Int32)
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.Items
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Add(`0)
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Clear
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Remove(`0)
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#Item(System.Int32)
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#IsSynchronized
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#SyncRoot
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Add(System.Object)
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Clear
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Contains(System.Object)
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IndexOf(System.Object)
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IsFixedSize
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IsReadOnly
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Item(System.Int32)
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Remove(System.Object)
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#RemoveAt(System.Int32)
  langs:
  - csharp
  name: SynchronizedReadOnlyCollection<T>
  nameWithType: SynchronizedReadOnlyCollection<T>
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>
  type: Class
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public class SynchronizedReadOnlyCollection<T> : System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IList<T>, System.Collections.IList
    typeParameters:
    - id: T
      description: "To be added."
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.ICollection<T>
  - System.Collections.Generic.IEnumerable<T>
  - System.Collections.Generic.IList<T>
  - System.Collections.IList
  inheritedMembers: []
  platform:
  - net462
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor
  id: '#ctor'
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  name: SynchronizedReadOnlyCollection()
  nameWithType: SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection()
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection()
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  syntax:
    content: public SynchronizedReadOnlyCollection ();
    parameters: []
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  name: SynchronizedReadOnlyCollection(Object)
  nameWithType: SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection(Object)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection(Object)
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  syntax:
    content: public SynchronizedReadOnlyCollection (object syncRoot);
    parameters:
    - id: syncRoot
      type: System.Object
      description: "To be added."
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor(System.Object,System.Collections.Generic.IEnumerable{`0})
  id: '#ctor(System.Object,System.Collections.Generic.IEnumerable{`0})'
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  name: SynchronizedReadOnlyCollection(Object,IEnumerable<T>)
  nameWithType: SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection(Object,IEnumerable<T>)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection(Object,IEnumerable<T>)
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  syntax:
    content: public SynchronizedReadOnlyCollection (object syncRoot, System.Collections.Generic.IEnumerable<T> list);
    parameters:
    - id: syncRoot
      type: System.Object
      description: "To be added."
    - id: list
      type: System.Collections.Generic.IEnumerable{T}
      description: "To be added."
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor(System.Object,`0[])
  id: '#ctor(System.Object,`0[])'
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  name: SynchronizedReadOnlyCollection(Object,T[])
  nameWithType: SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection(Object,T[])
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection(Object,T[])
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  syntax:
    content: public SynchronizedReadOnlyCollection (object syncRoot, T[] list);
    parameters:
    - id: syncRoot
      type: System.Object
      description: "To be added."
    - id: list
      type: T[]
      description: "To be added."
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Contains(`0)
  id: Contains(`0)
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  name: Contains(T)
  nameWithType: SynchronizedReadOnlyCollection<T>.Contains(T)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.Contains(T)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  syntax:
    content: public bool Contains (T value);
    parameters:
    - id: value
      type: T
      description: "To be added."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Contains*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  name: CopyTo(T[],Int32)
  nameWithType: SynchronizedReadOnlyCollection<T>.CopyTo(T[],Int32)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.CopyTo(T[],Int32)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  syntax:
    content: public void CopyTo (T[] array, int index);
    parameters:
    - id: array
      type: T[]
      description: "To be added."
    - id: index
      type: System.Int32
      description: "To be added."
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.CopyTo*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Count
  id: Count
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  name: Count
  nameWithType: SynchronizedReadOnlyCollection<T>.Count
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.Count
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: "To be added."
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: SynchronizedReadOnlyCollection<T>.GetEnumerator()
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.GetEnumerator()
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  syntax:
    content: public System.Collections.Generic.IEnumerator<T> GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerator{T}
      description: "To be added."
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.IndexOf(`0)
  id: IndexOf(`0)
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  name: IndexOf(T)
  nameWithType: SynchronizedReadOnlyCollection<T>.IndexOf(T)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.IndexOf(T)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  syntax:
    content: public int IndexOf (T value);
    parameters:
    - id: value
      type: T
      description: "To be added."
    return:
      type: System.Int32
      description: "To be added."
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.IndexOf*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: SynchronizedReadOnlyCollection<T>.Item(Int32)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.Item(Int32)
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  syntax:
    content: public T this[int index] { get; }
    parameters:
    - id: index
      type: System.Int32
      description: "To be added."
    return:
      type: T
      description: "To be added."
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Item*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Items
  id: Items
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  name: Items
  nameWithType: SynchronizedReadOnlyCollection<T>.Items
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.Items
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  syntax:
    content: protected System.Collections.Generic.IList<T> Items { get; }
    return:
      type: System.Collections.Generic.IList{T}
      description: "To be added."
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Items*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Add(`0)
  id: System#Collections#Generic#ICollection{T}#Add(`0)
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  name: System.Collections.Generic.ICollection(T)
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.Generic.ICollection(T)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.Generic.ICollection(T)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  syntax:
    content: void ICollection<T>.Add (T value);
    parameters:
    - id: value
      type: T
      description: "To be added."
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection<T>#Add*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Clear
  id: System#Collections#Generic#ICollection{T}#Clear
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  name: System.Collections.Generic.ICollection()
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.Generic.ICollection()
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.Generic.ICollection()
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  syntax:
    content: void ICollection<T>.Clear ();
    parameters: []
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection<T>#Clear*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  id: System#Collections#Generic#ICollection{T}#IsReadOnly
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  name: System.Collections.Generic.ICollection
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.Generic.ICollection
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.Generic.ICollection
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  syntax:
    content: bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection<T>#IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Remove(`0)
  id: System#Collections#Generic#ICollection{T}#Remove(`0)
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  name: System.Collections.Generic.ICollection(T)
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.Generic.ICollection(T)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.Generic.ICollection(T)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  syntax:
    content: bool ICollection<T>.Remove (T value);
    parameters:
    - id: value
      type: T
      description: "To be added."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection<T>#Remove*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)
  id: System#Collections#Generic#IList{T}#Insert(System.Int32,`0)
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  name: System.Collections.Generic.IList(Int32,T)
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.Generic.IList(Int32,T)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.Generic.IList(Int32,T)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  syntax:
    content: void IList<T>.Insert (int index, T value);
    parameters:
    - id: index
      type: System.Int32
      description: "To be added."
    - id: value
      type: T
      description: "To be added."
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList<T>#Insert*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#Item(System.Int32)
  id: System#Collections#Generic#IList{T}#Item(System.Int32)
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  name: System.Collections.Generic.IList(Int32)
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.Generic.IList(Int32)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.Generic.IList(Int32)
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  syntax:
    content: T System.Collections.Generic.IList<T>.Item[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: "To be added."
    return:
      type: T
      description: "To be added."
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList<T>#Item*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)
  id: System#Collections#Generic#IList{T}#RemoveAt(System.Int32)
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  name: System.Collections.Generic.IList(Int32)
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.Generic.IList(Int32)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.Generic.IList(Int32)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  syntax:
    content: void IList<T>.RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "To be added."
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList<T>#RemoveAt*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.ICollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  syntax:
    content: void ICollection.CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: "To be added."
    - id: index
      type: System.Int32
      description: "To be added."
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#CopyTo*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.ICollection.IsSynchronized
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.ICollection.IsSynchronized
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  syntax:
    content: bool System.Collections.ICollection.IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  name: System.Collections.ICollection.SyncRoot
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.ICollection.SyncRoot
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.ICollection.SyncRoot
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  syntax:
    content: object System.Collections.ICollection.SyncRoot { get; }
    return:
      type: System.Object
      description: "To be added."
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#SyncRoot*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "To be added."
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Add(System.Object)
  id: System#Collections#IList#Add(System.Object)
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  name: System.Collections.IList.Add(Object)
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.Add(Object)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.IList.Add(Object)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  syntax:
    content: int IList.Add (object value);
    parameters:
    - id: value
      type: System.Object
      description: "To be added."
    return:
      type: System.Int32
      description: "To be added."
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Add*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Clear
  id: System#Collections#IList#Clear
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  name: System.Collections.IList.Clear()
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.Clear()
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.IList.Clear()
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  syntax:
    content: void IList.Clear ();
    parameters: []
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Clear*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Contains(System.Object)
  id: System#Collections#IList#Contains(System.Object)
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  name: System.Collections.IList.Contains(Object)
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.Contains(Object)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.IList.Contains(Object)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  syntax:
    content: bool IList.Contains (object value);
    parameters:
    - id: value
      type: System.Object
      description: "To be added."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Contains*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IndexOf(System.Object)
  id: System#Collections#IList#IndexOf(System.Object)
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  name: System.Collections.IList.IndexOf(Object)
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.IndexOf(Object)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.IList.IndexOf(Object)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  syntax:
    content: int IList.IndexOf (object value);
    parameters:
    - id: value
      type: System.Object
      description: "To be added."
    return:
      type: System.Int32
      description: "To be added."
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IndexOf*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)
  id: System#Collections#IList#Insert(System.Int32,System.Object)
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  name: System.Collections.IList.Insert(Int32,Object)
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.Insert(Int32,Object)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.IList.Insert(Int32,Object)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  syntax:
    content: void IList.Insert (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: "To be added."
    - id: value
      type: System.Object
      description: "To be added."
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Insert*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IsFixedSize
  id: System#Collections#IList#IsFixedSize
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  name: System.Collections.IList.IsFixedSize
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.IsFixedSize
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.IList.IsFixedSize
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  syntax:
    content: bool System.Collections.IList.IsFixedSize { get; }
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IsFixedSize*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IsReadOnly
  id: System#Collections#IList#IsReadOnly
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  name: System.Collections.IList.IsReadOnly
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.IsReadOnly
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.IList.IsReadOnly
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  syntax:
    content: bool System.Collections.IList.IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Item(System.Int32)
  id: System#Collections#IList#Item(System.Int32)
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  name: System.Collections.IList.Item(Int32)
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.Item(Int32)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.IList.Item(Int32)
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  syntax:
    content: object System.Collections.IList.Item[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: "To be added."
    return:
      type: System.Object
      description: "To be added."
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Item*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Remove(System.Object)
  id: System#Collections#IList#Remove(System.Object)
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  name: System.Collections.IList.Remove(Object)
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.Remove(Object)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.IList.Remove(Object)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  syntax:
    content: void IList.Remove (object value);
    parameters:
    - id: value
      type: System.Object
      description: "To be added."
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Remove*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#RemoveAt(System.Int32)
  id: System#Collections#IList#RemoveAt(System.Int32)
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  name: System.Collections.IList.RemoveAt(Int32)
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.RemoveAt(Int32)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.IList.RemoveAt(Int32)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  syntax:
    content: void IList.RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "To be added."
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#RemoveAt*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: SynchronizedReadOnlyCollection()
  nameWithType: SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection()
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection()
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor(System.Object)
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: SynchronizedReadOnlyCollection(Object)
  nameWithType: SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection(Object)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection(Object)
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor(System.Object,System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: SynchronizedReadOnlyCollection(Object,IEnumerable<T>)
  nameWithType: SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection(Object,IEnumerable<T>)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection(Object,IEnumerable<T>)
- uid: System.Collections.Generic.IEnumerable{T}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<T>
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor(System.Object,`0[])
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: SynchronizedReadOnlyCollection(Object,T[])
  nameWithType: SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection(Object,T[])
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection(Object,T[])
- uid: T[]
  isExternal: true
  name: T
  nameWithType: T
  fullName: T[]
  spec.csharp:
  - uid: T
    name: T
    nameWithType: T
    fullName: T[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Contains(`0)
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: Contains(T)
  nameWithType: SynchronizedReadOnlyCollection<T>.Contains(T)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.Contains(T)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: CopyTo(T[],Int32)
  nameWithType: SynchronizedReadOnlyCollection<T>.CopyTo(T[],Int32)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.CopyTo(T[],Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Count
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: Count
  nameWithType: SynchronizedReadOnlyCollection<T>.Count
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.Count
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.GetEnumerator
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: GetEnumerator()
  nameWithType: SynchronizedReadOnlyCollection<T>.GetEnumerator()
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.GetEnumerator()
- uid: System.Collections.Generic.IEnumerator{T}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator<T>
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.IndexOf(`0)
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: IndexOf(T)
  nameWithType: SynchronizedReadOnlyCollection<T>.IndexOf(T)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.IndexOf(T)
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Item(System.Int32)
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: Item(Int32)
  nameWithType: SynchronizedReadOnlyCollection<T>.Item(Int32)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.Item(Int32)
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Items
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: Items
  nameWithType: SynchronizedReadOnlyCollection<T>.Items
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.Items
- uid: System.Collections.Generic.IList{T}
  parent: System.Collections.Generic
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: IList<T>
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Add(`0)
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: System.Collections.Generic.ICollection(T)
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.Generic.ICollection(T)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.Generic.ICollection(T)
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Clear
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: System.Collections.Generic.ICollection()
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.Generic.ICollection()
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.Generic.ICollection()
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: System.Collections.Generic.ICollection
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.Generic.ICollection
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.Generic.ICollection
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Remove(`0)
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: System.Collections.Generic.ICollection(T)
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.Generic.ICollection(T)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.Generic.ICollection(T)
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: System.Collections.Generic.IList(Int32,T)
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.Generic.IList(Int32,T)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.Generic.IList(Int32,T)
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#Item(System.Int32)
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: System.Collections.Generic.IList(Int32)
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.Generic.IList(Int32)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.Generic.IList(Int32)
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: System.Collections.Generic.IList(Int32)
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.Generic.IList(Int32)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.Generic.IList(Int32)
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.ICollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#IsSynchronized
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.ICollection.IsSynchronized
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.ICollection.IsSynchronized
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#SyncRoot
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.ICollection.SyncRoot
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.ICollection.SyncRoot
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Add(System.Object)
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: System.Collections.IList.Add(Object)
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.Add(Object)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.IList.Add(Object)
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Clear
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: System.Collections.IList.Clear()
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.Clear()
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.IList.Clear()
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Contains(System.Object)
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: System.Collections.IList.Contains(Object)
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.Contains(Object)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.IList.Contains(Object)
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IndexOf(System.Object)
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: System.Collections.IList.IndexOf(Object)
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.IndexOf(Object)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.IList.IndexOf(Object)
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: System.Collections.IList.Insert(Int32,Object)
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.Insert(Int32,Object)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.IList.Insert(Int32,Object)
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IsFixedSize
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: System.Collections.IList.IsFixedSize
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.IsFixedSize
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.IList.IsFixedSize
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IsReadOnly
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: System.Collections.IList.IsReadOnly
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.IsReadOnly
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.IList.IsReadOnly
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Item(System.Int32)
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: System.Collections.IList.Item(Int32)
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.Item(Int32)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.IList.Item(Int32)
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Remove(System.Object)
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: System.Collections.IList.Remove(Object)
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.Remove(Object)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.IList.Remove(Object)
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#RemoveAt(System.Int32)
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: System.Collections.IList.RemoveAt(Int32)
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.RemoveAt(Int32)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.System.Collections.IList.RemoveAt(Int32)
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor*
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: SynchronizedReadOnlyCollection<T>
  nameWithType: SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection<T>
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Contains*
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: Contains
  nameWithType: SynchronizedReadOnlyCollection<T>.Contains
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.CopyTo*
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: CopyTo
  nameWithType: SynchronizedReadOnlyCollection<T>.CopyTo
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Count*
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: Count
  nameWithType: SynchronizedReadOnlyCollection<T>.Count
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.GetEnumerator*
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: GetEnumerator
  nameWithType: SynchronizedReadOnlyCollection<T>.GetEnumerator
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.IndexOf*
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: IndexOf
  nameWithType: SynchronizedReadOnlyCollection<T>.IndexOf
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Item*
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: Item
  nameWithType: SynchronizedReadOnlyCollection<T>.Item
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Items*
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: Items
  nameWithType: SynchronizedReadOnlyCollection<T>.Items
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection<T>#Add*
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: System.Collections.Generic.ICollection<T>.Add
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.Generic.ICollection<T>.Add
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection<T>#Clear*
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: System.Collections.Generic.ICollection<T>.Clear
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.Generic.ICollection<T>.Clear
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection<T>#IsReadOnly*
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.Generic.ICollection<T>.IsReadOnly
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection<T>#Remove*
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: System.Collections.Generic.ICollection<T>.Remove
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.Generic.ICollection<T>.Remove
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList<T>#Insert*
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: System.Collections.Generic.IList<T>.Insert
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.Generic.IList<T>.Insert
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList<T>#Item*
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: System.Collections.Generic.IList<T>.Item
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.Generic.IList<T>.Item
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList<T>#RemoveAt*
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: System.Collections.Generic.IList<T>.RemoveAt
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.Generic.IList<T>.RemoveAt
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#CopyTo*
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: System.Collections.ICollection.CopyTo
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.ICollection.CopyTo
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#IsSynchronized*
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.ICollection.IsSynchronized
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#SyncRoot*
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.ICollection.SyncRoot
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator*
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Add*
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: System.Collections.IList.Add
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.Add
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Clear*
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: System.Collections.IList.Clear
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.Clear
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Contains*
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: System.Collections.IList.Contains
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.Contains
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IndexOf*
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: System.Collections.IList.IndexOf
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.IndexOf
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Insert*
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: System.Collections.IList.Insert
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.Insert
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IsFixedSize*
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: System.Collections.IList.IsFixedSize
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.IsFixedSize
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IsReadOnly*
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: System.Collections.IList.IsReadOnly
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.IsReadOnly
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Item*
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: System.Collections.IList.Item
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.Item
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Remove*
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: System.Collections.IList.Remove
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.Remove
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#RemoveAt*
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: System.Collections.IList.RemoveAt
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.RemoveAt
