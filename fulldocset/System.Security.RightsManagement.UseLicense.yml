### YamlMime:ManagedReference
items:
- uid: System.Security.RightsManagement.UseLicense
  id: UseLicense
  children:
  - System.Security.RightsManagement.UseLicense.#ctor(System.String)
  - System.Security.RightsManagement.UseLicense.ApplicationData
  - System.Security.RightsManagement.UseLicense.Bind(System.Security.RightsManagement.SecureEnvironment)
  - System.Security.RightsManagement.UseLicense.ContentId
  - System.Security.RightsManagement.UseLicense.Equals(System.Object)
  - System.Security.RightsManagement.UseLicense.GetHashCode
  - System.Security.RightsManagement.UseLicense.Owner
  - System.Security.RightsManagement.UseLicense.ToString
  langs:
  - csharp
  name: UseLicense
  nameWithType: UseLicense
  fullName: System.Security.RightsManagement.UseLicense
  type: Class
  summary: "Representa uma licença que permite aceder a conteúdo gerido direitos protegidos."
  remarks: "Tal como com outros <xref:System.Security.RightsManagement>tipos, UseLicense só é utilizado em aplicações de fidedignidade total.</xref:System.Security.RightsManagement>"
  example:
  - "The following example shows how to use this class to initialize a <xref:System.Security.RightsManagement.PublishLicense>.  \n  \n [!code-vb[RightsManagedPackagePublish#RmPkgPubEncrypt](~/add/codesnippet/visualbasic/rmpackagepublish/window1.xaml.vb#rmpkgpubencrypt)]\n [!code-cs[RightsManagedPackagePublish#RmPkgPubEncrypt](~/add/codesnippet/csharp/RmPackagePublish/Window1.xaml.cs#rmpkgpubencrypt)]"
  syntax:
    content: >-
      [System.Security.SecurityCritical(System.Security.SecurityCriticalScope.Everything)]

      public class UseLicense
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.RightsManagement.UseLicense.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Security.RightsManagement.UseLicense
  langs:
  - csharp
  name: UseLicense(String)
  nameWithType: UseLicense.UseLicense(String)
  fullName: System.Security.RightsManagement.UseLicense.UseLicense(String)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Security.RightsManagement.UseLicense&quot;> </xref> classe."
  syntax:
    content: public UseLicense (string useLicense);
    parameters:
    - id: useLicense
      type: System.String
      description: "Serializar uma licença de utilização no [!INCLUDE[TLA#tla_xrml](~/add/includes/ajax-current-ext-md.md)] formulário."
  overload: System.Security.RightsManagement.UseLicense.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>useLicense</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.RightsManagement.RightsManagementException
    commentId: T:System.Security.RightsManagement.RightsManagementException
    description: "<code>useLicense</code>Não é válido."
  platform:
  - net462
- uid: System.Security.RightsManagement.UseLicense.ApplicationData
  id: ApplicationData
  parent: System.Security.RightsManagement.UseLicense
  langs:
  - csharp
  name: ApplicationData
  nameWithType: UseLicense.ApplicationData
  fullName: System.Security.RightsManagement.UseLicense.ApplicationData
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "Obtém o dicionário de dados de aplicação que contenha pares chave/valor transmitidos a partir da aplicação de publicação para a aplicação de consumo."
  remarks: "Dados de um par chave/valor que é processada por um servidor de serviços de gestão de direitos (RMS) é o par de cadeia &quot;Allow_Server_Editing&quot; / &quot;True&quot;.  Quando a emissão de licença &quot;Allow_Server_Editing&quot; / &quot;True&quot; estiver definido, o serviço ou de qualquer serviço fidedigno, pode reutilizar a chave de conteúdo.       O par chave/valor &quot;NOLICCACHE&quot; / &quot;1&quot; controla a licença de utilização ao incorporar a política de aplicações de consumo.  Quando &quot;NOLICCACHE&quot; / &quot;1&quot; está definido, as aplicações são esperadas não para incorporar a licença de utilização no documento gerido direitos."
  syntax:
    content: public System.Collections.Generic.IDictionary<string,string> ApplicationData { get; }
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "O dicionário de dados de aplicação que contenha pares chave/valor transmitido a partir da aplicação de publicação para a aplicação de consumo."
  overload: System.Security.RightsManagement.UseLicense.ApplicationData*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.UseLicense.Bind(System.Security.RightsManagement.SecureEnvironment)
  id: Bind(System.Security.RightsManagement.SecureEnvironment)
  parent: System.Security.RightsManagement.UseLicense
  langs:
  - csharp
  name: Bind(SecureEnvironment)
  nameWithType: UseLicense.Bind(SecureEnvironment)
  fullName: System.Security.RightsManagement.UseLicense.Bind(SecureEnvironment)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "Vincula a licença para uma determinada <xref href=&quot;System.Security.RightsManagement.SecureEnvironment&quot;> </xref>."
  remarks: "Depois da licença está vinculada a um ambiente seguro, a aplicação pode examinar e exercer os direitos concedidos pela licença.       O devolvido <xref:System.Security.RightsManagement.CryptoProvider>instância fornece acesso ao conteúdo gerido direitos protegidos e desencriptação.</xref:System.Security.RightsManagement.CryptoProvider>"
  example:
  - "The following example shows how to use this method to initialize a <xref:System.Security.RightsManagement.CryptoProvider>.  \n  \n [!code-vb[RightsManagedPackagePublish#RmPkgPubEncrypt](~/add/codesnippet/visualbasic/rmpackagepublish/window1.xaml.vb#rmpkgpubencrypt)]\n [!code-cs[RightsManagedPackagePublish#RmPkgPubEncrypt](~/add/codesnippet/csharp/RmPackagePublish/Window1.xaml.cs#rmpkgpubencrypt)]"
  syntax:
    content: public System.Security.RightsManagement.CryptoProvider Bind (System.Security.RightsManagement.SecureEnvironment secureEnvironment);
    parameters:
    - id: secureEnvironment
      type: System.Security.RightsManagement.SecureEnvironment
      description: "O ambiente para vincular a licença para."
    return:
      type: System.Security.RightsManagement.CryptoProvider
      description: "A <xref href=&quot;System.Security.RightsManagement.CryptoProvider&quot;> </xref> instância se o enlace da licença foi bem sucedida; caso contrário, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.RightsManagement.UseLicense.Bind*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>secureEnvironment</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.RightsManagement.UseLicense.ContentId
  id: ContentId
  parent: System.Security.RightsManagement.UseLicense
  langs:
  - csharp
  name: ContentId
  nameWithType: UseLicense.ContentId
  fullName: System.Security.RightsManagement.UseLicense.ContentId
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "Obtém o identificador de conteúdo criado pelo fabricante."
  remarks: "ContentId é criado pelo fabricante e pode ser utilizado para corresponder ao conteúdo a um <xref:System.Security.RightsManagement.UseLicense>e <xref:System.Security.RightsManagement.PublishLicense>.</xref:System.Security.RightsManagement.PublishLicense> </xref:System.Security.RightsManagement.UseLicense>"
  syntax:
    content: public Guid ContentId { get; }
    return:
      type: System.Guid
      description: "O identificador de conteúdo criado pelo fabricante."
  overload: System.Security.RightsManagement.UseLicense.ContentId*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.UseLicense.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Security.RightsManagement.UseLicense
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: UseLicense.Equals(Object)
  fullName: System.Security.RightsManagement.UseLicense.Equals(Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "Indica se esta licença é equivalente a outro fornecido licença."
  remarks: "É igual a testes para equivalência comparar o serializados [!INCLUDE[TLA#tla_xrml](~/add/includes/ajax-current-ext-md.md)] cadeias especificadas para o <xref:System.Security.RightsManagement.UseLicense.%23ctor%2A>construtores.</xref:System.Security.RightsManagement.UseLicense.%23ctor%2A>"
  syntax:
    content: public override bool Equals (object x);
    parameters:
    - id: x
      type: System.Object
      description: "A licença para comparar."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se ambas as licenças são equivalentes; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.RightsManagement.UseLicense.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.UseLicense.GetHashCode
  id: GetHashCode
  parent: System.Security.RightsManagement.UseLicense
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: UseLicense.GetHashCode()
  fullName: System.Security.RightsManagement.UseLicense.GetHashCode()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "Devolve o código hash associado a esta licença."
  remarks: "O código hash devolvido baseia-se no serializados [!INCLUDE[TLA#tla_xrml](~/add/includes/ajax-current-ext-md.md)] cadeia transmitida para o <xref:System.Security.RightsManagement.UseLicense.%23ctor%2A>construtor.</xref:System.Security.RightsManagement.UseLicense.%23ctor%2A>"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "Um código hash para esta licença."
  overload: System.Security.RightsManagement.UseLicense.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.UseLicense.Owner
  id: Owner
  parent: System.Security.RightsManagement.UseLicense
  langs:
  - csharp
  name: Owner
  nameWithType: UseLicense.Owner
  fullName: System.Security.RightsManagement.UseLicense.Owner
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "Obtém o proprietário da licença."
  remarks: "Proprietário da licença é obtido o serializados de [!INCLUDE[TLA#tla_xrml](~/add/includes/ajax-current-ext-md.md)] cadeia transmitida para o <xref:System.Security.RightsManagement.UseLicense.%23ctor%2A>construtor.</xref:System.Security.RightsManagement.UseLicense.%23ctor%2A>"
  syntax:
    content: public System.Security.RightsManagement.ContentUser Owner { get; }
    return:
      type: System.Security.RightsManagement.ContentUser
      description: "O proprietário da licença."
  overload: System.Security.RightsManagement.UseLicense.Owner*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.UseLicense.ToString
  id: ToString
  parent: System.Security.RightsManagement.UseLicense
  langs:
  - csharp
  name: ToString()
  nameWithType: UseLicense.ToString()
  fullName: System.Security.RightsManagement.UseLicense.ToString()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "Devolve o serializados [!INCLUDE[TLA2#tla_xrml](~/add/includes/tla2sharptla-xrml-md.md)] cadeia utilizada para criar esta licença."
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "O serializados [!INCLUDE[TLA#tla_xrml](~/add/includes/ajax-current-ext-md.md)] cadeia originalmente transmitida para o &lt;xref:System.Security.RightsManagement.UseLicense.%23ctor%2A&gt; construtor."
  overload: System.Security.RightsManagement.UseLicense.ToString*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.RightsManagement.RightsManagementException
  parent: System.Security.RightsManagement
  isExternal: false
  name: RightsManagementException
  nameWithType: RightsManagementException
  fullName: System.Security.RightsManagement.RightsManagementException
- uid: System.Security.RightsManagement.UseLicense.#ctor(System.String)
  parent: System.Security.RightsManagement.UseLicense
  isExternal: false
  name: UseLicense(String)
  nameWithType: UseLicense.UseLicense(String)
  fullName: System.Security.RightsManagement.UseLicense.UseLicense(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.RightsManagement.UseLicense.ApplicationData
  parent: System.Security.RightsManagement.UseLicense
  isExternal: false
  name: ApplicationData
  nameWithType: UseLicense.ApplicationData
  fullName: System.Security.RightsManagement.UseLicense.ApplicationData
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  parent: System.Collections.Generic
  isExternal: true
  name: IDictionary<String,String>
  nameWithType: IDictionary<String,String>
  fullName: System.Collections.Generic.IDictionary<System.String,System.String>
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary<System.String,System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Security.RightsManagement.UseLicense.Bind(System.Security.RightsManagement.SecureEnvironment)
  parent: System.Security.RightsManagement.UseLicense
  isExternal: false
  name: Bind(SecureEnvironment)
  nameWithType: UseLicense.Bind(SecureEnvironment)
  fullName: System.Security.RightsManagement.UseLicense.Bind(SecureEnvironment)
- uid: System.Security.RightsManagement.CryptoProvider
  parent: System.Security.RightsManagement
  isExternal: false
  name: CryptoProvider
  nameWithType: CryptoProvider
  fullName: System.Security.RightsManagement.CryptoProvider
- uid: System.Security.RightsManagement.SecureEnvironment
  parent: System.Security.RightsManagement
  isExternal: false
  name: SecureEnvironment
  nameWithType: SecureEnvironment
  fullName: System.Security.RightsManagement.SecureEnvironment
- uid: System.Security.RightsManagement.UseLicense.ContentId
  parent: System.Security.RightsManagement.UseLicense
  isExternal: false
  name: ContentId
  nameWithType: UseLicense.ContentId
  fullName: System.Security.RightsManagement.UseLicense.ContentId
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Security.RightsManagement.UseLicense.Equals(System.Object)
  parent: System.Security.RightsManagement.UseLicense
  isExternal: false
  name: Equals(Object)
  nameWithType: UseLicense.Equals(Object)
  fullName: System.Security.RightsManagement.UseLicense.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.RightsManagement.UseLicense.GetHashCode
  parent: System.Security.RightsManagement.UseLicense
  isExternal: false
  name: GetHashCode()
  nameWithType: UseLicense.GetHashCode()
  fullName: System.Security.RightsManagement.UseLicense.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.RightsManagement.UseLicense.Owner
  parent: System.Security.RightsManagement.UseLicense
  isExternal: false
  name: Owner
  nameWithType: UseLicense.Owner
  fullName: System.Security.RightsManagement.UseLicense.Owner
- uid: System.Security.RightsManagement.ContentUser
  parent: System.Security.RightsManagement
  isExternal: false
  name: ContentUser
  nameWithType: ContentUser
  fullName: System.Security.RightsManagement.ContentUser
- uid: System.Security.RightsManagement.UseLicense.ToString
  parent: System.Security.RightsManagement.UseLicense
  isExternal: false
  name: ToString()
  nameWithType: UseLicense.ToString()
  fullName: System.Security.RightsManagement.UseLicense.ToString()
- uid: System.Security.RightsManagement.UseLicense.#ctor*
  parent: System.Security.RightsManagement.UseLicense
  isExternal: false
  name: UseLicense
  nameWithType: UseLicense.UseLicense
- uid: System.Security.RightsManagement.UseLicense.ApplicationData*
  parent: System.Security.RightsManagement.UseLicense
  isExternal: false
  name: ApplicationData
  nameWithType: UseLicense.ApplicationData
- uid: System.Security.RightsManagement.UseLicense.Bind*
  parent: System.Security.RightsManagement.UseLicense
  isExternal: false
  name: Bind
  nameWithType: UseLicense.Bind
- uid: System.Security.RightsManagement.UseLicense.ContentId*
  parent: System.Security.RightsManagement.UseLicense
  isExternal: false
  name: ContentId
  nameWithType: UseLicense.ContentId
- uid: System.Security.RightsManagement.UseLicense.Equals*
  parent: System.Security.RightsManagement.UseLicense
  isExternal: false
  name: Equals
  nameWithType: UseLicense.Equals
- uid: System.Security.RightsManagement.UseLicense.GetHashCode*
  parent: System.Security.RightsManagement.UseLicense
  isExternal: false
  name: GetHashCode
  nameWithType: UseLicense.GetHashCode
- uid: System.Security.RightsManagement.UseLicense.Owner*
  parent: System.Security.RightsManagement.UseLicense
  isExternal: false
  name: Owner
  nameWithType: UseLicense.Owner
- uid: System.Security.RightsManagement.UseLicense.ToString*
  parent: System.Security.RightsManagement.UseLicense
  isExternal: false
  name: ToString
  nameWithType: UseLicense.ToString
